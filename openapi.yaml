openapi: 3.0.0
info:
  title: WedSync 2.0 API
  description: Comprehensive API documentation for WedSync wedding vendor management platform
  version: 2.0.0
  contact:
    name: WedSync Support
    email: support@wedsync.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.wedsync.com/v2
    description: Production server
  - url: https://staging-api.wedsync.com/v2
    description: Staging server
  - url: http://localhost:3002/api
    description: Development server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Forms
    description: Form creation and management
  - name: Submissions
    description: Form submission handling
  - name: PDF
    description: PDF processing and OCR
  - name: Payments
    description: Payment and subscription management
  - name: Email
    description: Email notifications and templates

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - companyName
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                companyName:
                  type: string
                vendorType:
                  type: string
                  enum: [photography, videography, planning, catering, venue, florist, music, other]
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /forms:
    get:
      tags:
        - Forms
      summary: List all forms
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, archived]
      responses:
        '200':
          description: List of forms
          content:
            application/json:
              schema:
                type: object
                properties:
                  forms:
                    type: array
                    items:
                      $ref: '#/components/schemas/Form'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Forms
      summary: Create a new form
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormCreate'
      responses:
        '201':
          description: Form created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /forms/{id}:
    get:
      tags:
        - Forms
      summary: Get form by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Form details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Forms
      summary: Update form
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormUpdate'
      responses:
        '200':
          description: Form updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Forms
      summary: Delete form
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Form deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /forms/{id}/submit:
    post:
      tags:
        - Submissions
      summary: Submit form response
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  additionalProperties: true
                metadata:
                  type: object
                  properties:
                    sessionId:
                      type: string
      responses:
        '201':
          description: Submission created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /pdf/upload:
    post:
      tags:
        - PDF
      summary: Upload PDF for processing
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: PDF uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  filename:
                    type: string
                  status:
                    type: string
                    enum: [uploaded, processing, processed, failed]
                  url:
                    type: string
                    format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: File too large

  /pdf/process/{id}:
    post:
      tags:
        - PDF
      summary: Process PDF with OCR
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OCR processing completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  extractedText:
                    type: string
                  fields:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        label:
                          type: string
                        value:
                          type: string
        '404':
          $ref: '#/components/responses/NotFound'

  /forms/generate-from-pdf:
    post:
      tags:
        - Forms
        - PDF
      summary: Generate form from PDF OCR data
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pdfId:
                  type: string
                  format: uuid
                extractedData:
                  type: object
                draft:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Form generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /stripe/create-payment-intent:
    post:
      tags:
        - Payments
      summary: Create Stripe payment intent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  description: Amount in cents
                currency:
                  type: string
                  default: usd
                metadata:
                  type: object
                  properties:
                    plan:
                      type: string
                      enum: [starter, pro, enterprise]
      responses:
        '200':
          description: Payment intent created
          content:
            application/json:
              schema:
                type: object
                properties:
                  client_secret:
                    type: string
                  payment_intent_id:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /stripe/webhook:
    post:
      tags:
        - Payments
      summary: Stripe webhook endpoint
      parameters:
        - name: stripe-signature
          in: header
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  received:
                    type: boolean
        '400':
          description: Invalid signature

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
        expiresIn:
          type: integer

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        companyName:
          type: string
        vendorType:
          type: string
        tier:
          type: string
          enum: [free, starter, pro, enterprise]
        createdAt:
          type: string
          format: date-time

    Form:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FormField'
        settings:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    FormCreate:
      type: object
      required:
        - title
        - fields
      properties:
        title:
          type: string
        description:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FormField'
        settings:
          type: object

    FormUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FormField'
        settings:
          type: object

    FormField:
      type: object
      required:
        - type
        - label
      properties:
        id:
          type: string
        type:
          type: string
          enum: [text, email, tel, number, date, select, checkbox, radio, textarea, file, signature]
        label:
          type: string
        placeholder:
          type: string
        required:
          type: boolean
        validation:
          type: object
          properties:
            minLength:
              type: integer
            maxLength:
              type: integer
            pattern:
              type: string
        options:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              value:
                type: string

    Submission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        formId:
          type: string
          format: uuid
        data:
          type: object
          additionalProperties: true
        status:
          type: string
          enum: [pending, completed, failed]
        submittedAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: array
                items:
                  type: string

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                default: Authentication required

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                default: Resource not found

    TooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                default: Too many requests. Please wait before trying again.
              retryAfter:
                type: integer
                description: Seconds to wait before retry