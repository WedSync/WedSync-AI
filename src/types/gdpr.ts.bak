/**
 * GDPR Compliance TypeScript Types
 * WS-176 - GDPR Compliance System
 * 
 * Comprehensive type definitions for GDPR data processing,
 * consent management, and data subject rights.
 */

// ============================================================================
// GDPR Legal Basis Types
// ============================================================================

export enum GDPRLegalBasis {
  CONSENT = 'consent',
  CONTRACT = 'contract',
  LEGAL_OBLIGATION = 'legal_obligation',
  VITAL_INTERESTS = 'vital_interests',
  PUBLIC_TASK = 'public_task',
  LEGITIMATE_INTEREST = 'legitimate_interest'
}

export enum ConsentType {
  MARKETING = 'marketing',
  ANALYTICS = 'analytics',
  FUNCTIONAL = 'functional',
  PERFORMANCE = 'performance',
  COMMUNICATION = 'communication',
  DATA_SHARING = 'data_sharing'
}

export enum ConsentStatus {
  GRANTED = 'granted',
  DENIED = 'denied',
  WITHDRAWN = 'withdrawn',
  EXPIRED = 'expired'
}

// ============================================================================
// Data Processing Types
// ============================================================================

export enum DataCategory {
  PERSONAL_DETAILS = 'personal_details',
  CONTACT_INFO = 'contact_info',
  WEDDING_INFO = 'wedding_info',
  PAYMENT_DATA = 'payment_data',
  COMMUNICATION_LOGS = 'communication_logs',
  USAGE_DATA = 'usage_data',
  TECHNICAL_DATA = 'technical_data'
}

export enum ProcessingPurpose {
  SERVICE_PROVISION = 'service_provision',
  MARKETING = 'marketing',
  ANALYTICS = 'analytics',
  LEGAL_COMPLIANCE = 'legal_compliance',
  SECURITY = 'security',
  CUSTOMER_SUPPORT = 'customer_support'
}

export enum DataSubjectRights {
  ACCESS = 'access',
  RECTIFICATION = 'rectification',
  ERASURE = 'erasure',
  RESTRICT_PROCESSING = 'restrict_processing',
  DATA_PORTABILITY = 'data_portability',
  OBJECT = 'object',
  WITHDRAW_CONSENT = 'withdraw_consent'
}

// ============================================================================
// Core GDPR Entities
// ============================================================================

export interface ConsentRecord {
  id: string;
  user_id: string;
  consent_type: ConsentType;
  status: ConsentStatus;
  legal_basis: GDPRLegalBasis;
  granted_at?: Date;
  withdrawn_at?: Date;
  expires_at?: Date;
  version: string;
  metadata: Record<string, any>;
  created_at: Date;
  updated_at: Date;
}

export interface DataProcessingRecord {
  id: string;
  user_id: string;
  data_category: DataCategory;
  processing_purpose: ProcessingPurpose;
  legal_basis: GDPRLegalBasis;
  retention_period_days: number;
  processor_info: {
    name: string;
    contact: string;
    location: string;
  };
  data_sources: string[];
  data_recipients: string[];
  cross_border_transfers: boolean;
  safeguards_applied: string[];
  created_at: Date;
  updated_at: Date;
}

export interface DataSubjectRequest {
  id: string;
  user_id: string;
  request_type: DataSubjectRights;
  status: RequestStatus;
  submitted_at: Date;
  processed_at?: Date;
  completed_at?: Date;
  response_data?: any;
  verification_token?: string;
  verification_expires_at?: Date;
  processor_notes?: string;
  created_at: Date;
  updated_at: Date;
}

export enum RequestStatus {
  SUBMITTED = 'submitted',
  VERIFIED = 'verified',
  IN_PROGRESS = 'in_progress',
  COMPLETED = 'completed',
  REJECTED = 'rejected',
  EXPIRED = 'expired'
}

// ============================================================================
// Data Export/Portability Types
// ============================================================================

export interface DataExportRequest {
  user_id: string;
  data_categories: DataCategory[];
  export_format: 'json' | 'csv' | 'xml';
  include_metadata: boolean;
  date_from?: Date;
  date_to?: Date;
}

export interface UserDataExport {
  user_id: string;
  export_date: Date;
  data_categories: DataCategory[];
  data: {
    personal_details?: PersonalDataExport;
    contact_info?: ContactDataExport;
    wedding_info?: WeddingDataExport;
    communication_logs?: CommunicationDataExport;
    usage_data?: UsageDataExport;
    technical_data?: TechnicalDataExport;
  };
  metadata: {
    export_version: string;
    total_records: number;
    export_size_bytes: number;
    anonymized_fields: string[];
  };
}

export interface PersonalDataExport {
  name: string;
  email: string;
  phone?: string;
  date_of_birth?: string;
  address?: {
    street: string;
    city: string;
    postal_code: string;
    country: string;
  };
  preferences: Record<string, any>;
  created_at: string;
  updated_at: string;
}

export interface ContactDataExport {
  emails: Array<{
    address: string;
    type: string;
    verified: boolean;
    created_at: string;
  }>;
  phone_numbers: Array<{
    number: string;
    type: string;
    verified: boolean;
    created_at: string;
  }>;
  addresses: Array<{
    type: string;
    address: string;
    created_at: string;
  }>;
}

export interface WeddingDataExport {
  weddings: Array<{
    id: string;
    title: string;
    date: string;
    venue: string;
    guest_count: number;
    suppliers: Array<{
      name: string;
      category: string;
      contact: string;
    }>;
    tasks: Array<{
      title: string;
      status: string;
      assigned_to: string;
      due_date: string;
    }>;
    budget: {
      total: number;
      spent: number;
      categories: Record<string, number>;
    };
    created_at: string;
    updated_at: string;
  }>;
}

export interface CommunicationDataExport {
  messages: Array<{
    id: string;
    type: string;
    subject?: string;
    content_summary: string;
    participants: string[];
    timestamp: string;
  }>;
  notifications: Array<{
    id: string;
    type: string;
    title: string;
    content: string;
    sent_at: string;
    read_at?: string;
  }>;
}

export interface UsageDataExport {
  sessions: Array<{
    id: string;
    start_time: string;
    end_time: string;
    duration_minutes: number;
    pages_viewed: string[];
    actions_performed: string[];
  }>;
  feature_usage: Record<string, {
    usage_count: number;
    last_used: string;
  }>;
}

export interface TechnicalDataExport {
  device_info: Array<{
    user_agent: string;
    ip_address_hash: string;
    device_type: string;
    browser: string;
    os: string;
    first_seen: string;
    last_seen: string;
  }>;
  api_usage: Array<{
    endpoint: string;
    method: string;
    timestamp: string;
    response_status: number;
  }>;
}

// ============================================================================
// Data Deletion Types
// ============================================================================

export interface DataDeletionRequest {
  user_id: string;
  deletion_type: DeletionType;
  data_categories: DataCategory[];
  reason: string;
  verify_identity: boolean;
  immediate_deletion: boolean;
}

export enum DeletionType {
  COMPLETE_ERASURE = 'complete_erasure',
  ANONYMIZATION = 'anonymization',
  PSEUDONYMIZATION = 'pseudonymization',
  SOFT_DELETE = 'soft_delete'
}

export interface DeletionExecutionPlan {
  user_id: string;
  plan_id: string;
  tables_to_process: Array<{
    table_name: string;
    deletion_strategy: DeletionType;
    conditions: string;
    estimated_records: number;
    dependencies: string[];
  }>;
  retention_exceptions: Array<{
    table_name: string;
    reason: string;
    legal_basis: GDPRLegalBasis;
    retention_period_days: number;
  }>;
  execution_order: string[];
  estimated_duration_minutes: number;
  rollback_possible: boolean;
}

export interface DeletionResult {
  user_id: string;
  plan_id: string;
  execution_id: string;
  status: DeletionStatus;
  started_at: Date;
  completed_at?: Date;
  tables_processed: Array<{
    table_name: string;
    records_deleted: number;
    records_anonymized: number;
    status: 'success' | 'failed' | 'partial';
    error?: string;
  }>;
  verification_hash: string;
  audit_log_entries: string[];
}

export enum DeletionStatus {
  PLANNED = 'planned',
  IN_PROGRESS = 'in_progress',
  COMPLETED = 'completed',
  FAILED = 'failed',
  PARTIALLY_COMPLETED = 'partially_completed',
  ROLLED_BACK = 'rolled_back'
}

// ============================================================================
// Consent Management Types
// ============================================================================

export interface ConsentConfiguration {
  consent_type: ConsentType;
  required: boolean;
  legal_basis: GDPRLegalBasis;
  purpose_description: string;
  data_categories: DataCategory[];
  retention_period_days: number;
  third_party_sharing: boolean;
  withdrawal_mechanism: string;
  version: string;
}

export interface ConsentBundle {
  user_id: string;
  consents: Array<{
    consent_type: ConsentType;
    status: ConsentStatus;
    granted_at?: Date;
    withdrawn_at?: Date;
  }>;
  last_updated: Date;
  ip_address_hash: string;
  user_agent_hash: string;
  consent_method: 'explicit' | 'implied' | 'opt_out';
}

// ============================================================================
// API Response Types
// ============================================================================

export interface GDPRApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
    details?: Record<string, any>;
  };
  metadata?: {
    processing_time_ms: number;
    request_id: string;
    timestamp: Date;
  };
}

export interface ConsentApiResponse extends GDPRApiResponse<ConsentBundle> {}
export interface DataExportApiResponse extends GDPRApiResponse<UserDataExport> {}
export interface DeletionApiResponse extends GDPRApiResponse<DeletionResult> {}

// ============================================================================
// Validation and Security Types
// ============================================================================

export interface GDPRValidationRule {
  field: string;
  required: boolean;
  type: 'string' | 'number' | 'boolean' | 'date' | 'array' | 'object';
  min_length?: number;
  max_length?: number;
  pattern?: string;
  allowed_values?: any[];
  sanitization_rules: string[];
}

export interface SecurityContext {
  user_id: string;
  session_id: string;
  ip_address_hash: string;
  user_agent_hash: string;
  timestamp: Date;
  api_endpoint: string;
  rate_limit_key: string;
}

export interface AuditLogEntry {
  id: string;
  user_id: string;
  action: string;
  resource_type: string;
  resource_id?: string;
  details: Record<string, any>;
  security_context: SecurityContext;
  timestamp: Date;
  result: 'success' | 'failure' | 'partial';
  error_message?: string;
}

// ============================================================================
// Wedding-Specific GDPR Types
// ============================================================================

export interface WeddingGuestDataRights {
  guest_id: string;
  wedding_id: string;
  consent_for_photos: ConsentStatus;
  consent_for_communication: ConsentStatus;
  dietary_requirements?: string;
  accessibility_needs?: string;
  data_retention_preferences: {
    after_wedding_days: number;
    marketing_opt_in: boolean;
    future_event_invites: boolean;
  };
}

export interface SupplierDataProcessing {
  supplier_id: string;
  wedding_id: string;
  data_processing_agreement: {
    signed: boolean;
    signed_date?: Date;
    version: string;
  };
  data_categories_shared: DataCategory[];
  processing_purposes: ProcessingPurpose[];
  retention_period_days: number;
  data_transfer_restrictions: string[];
}

// ============================================================================
// Configuration and Settings
// ============================================================================

export interface GDPRSettings {
  data_retention_defaults: Record<DataCategory, number>;
  consent_expiry_days: number;
  verification_token_expiry_hours: number;
  deletion_grace_period_days: number;
  audit_log_retention_years: number;
  data_export_size_limit_mb: number;
  anonymization_config: {
    name_replacement: string;
    email_domain: string;
    phone_mask: string;
    address_replacement: string;
  };
  third_party_processors: Array<{
    name: string;
    purpose: ProcessingPurpose;
    location: string;
    safeguards: string[];
  }>;
}

export default {
  GDPRLegalBasis,
  ConsentType,
  ConsentStatus,
  DataCategory,
  ProcessingPurpose,
  DataSubjectRights,
  RequestStatus,
  DeletionType,
  DeletionStatus
};