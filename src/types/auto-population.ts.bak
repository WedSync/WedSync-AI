// Core auto-population system types
export interface FormField {
  id: string;
  name: string;
  type: 'text' | 'email' | 'phone' | 'date' | 'number' | 'select' | 'textarea';
  label: string;
  placeholder?: string;
  required: boolean;
  options?: string[]; // For select fields
}

export interface WeddingData {
  id: string;
  couple_id: string;
  couple_name_1: string;
  couple_name_2: string;
  wedding_date: string;
  venue_name?: string;
  venue_address?: string;
  guest_count?: number;
  budget_amount?: number;
  contact_email: string;
  contact_phone?: string;
  created_at: string;
  updated_at: string;
  last_updated_source?: string;
  organization_id: string; // Multi-tenant support
  [key: string]: any; // Allow dynamic wedding fields
}

export interface FieldMapping {
  id?: string;
  form_id: string;
  form_field_id: string;
  core_field_key: string;
  confidence: number;
  transformation_rule?: string;
  priority: number;
  is_verified: boolean;
  is_active: boolean;
  created_at?: string;
  updated_at?: string;
  created_by?: string;
  verified_by?: string;
  usage_count?: number; // Track how often mapping is used
  accuracy_score?: number; // Track accuracy based on feedback
}

export interface PopulationSession {
  id: string;
  couple_id: string;
  supplier_id: string;
  form_identifier: string;
  populated_fields: Record<string, PopulatedField>;
  created_at: string;
  expires_at: string;
  status: 'active' | 'completed' | 'expired' | 'cancelled';
  feedback_provided: boolean;
  accuracy_score?: number;
  organization_id: string; // Multi-tenant support
}

export interface PopulatedField {
  value: any;
  confidence: number;
  source: 'existing' | 'new' | 'transformed';
  coreFieldKey: string;
  originalValue?: any;
  transformationApplied?: string;
  wasVerified?: boolean;
}

export interface ConfidenceFactors {
  stringMatchScore: number;
  patternMatchScore: number;
  contextMatchScore: number;
  historicalAccuracy: number;
  userFeedbackScore: number;
}

export interface MatchingConfig {
  exactMatch: number;
  partialMatch: number;
  synonymMatch: number;
  patternMatch: number;
  minimumConfidence: number;
}

export interface PopulationRule {
  id: string;
  rule_name: string;
  source_field_pattern: string;
  target_core_field: string;
  transformation_function?: string;
  confidence_modifier: number;
  priority: number;
  is_active: boolean;
  supplier_type?: SupplierType;
  form_type?: FormType;
  organization_id?: string; // For custom organization rules
  created_at: string;
  updated_at: string;
}

export interface PopulationFeedback {
  id: string;
  session_id: string;
  field_id: string;
  was_correct: boolean;
  corrected_value?: any;
  confidence_before: number;
  user_comment?: string;
  created_at: string;
  organization_id: string;
}

// API Request/Response Types
export interface PopulateFormRequest {
  formId: string;
  clientId: string;
  formFields: FormField[];
  populationPreferences?: PopulationPreferences;
}

export interface PopulationPreferences {
  onlyRequiredFields?: boolean;
  skipConfidentialFields?: boolean;
  maxAge?: number; // Days
  minimumConfidence?: number;
}

export interface PopulateFormResponse {
  success: boolean;
  sessionId?: string;
  weddingId?: string;
  populatedFields?: Record<string, PopulatedField>;
  stats?: PopulationStats;
  mappings?: FieldMappingSummary[];
  error?: string;
  details?: ValidationError[];
}

export interface PopulationStats {
  fieldsDetected: number;
  fieldsPopulated: number;
  fieldsSkipped: number;
  averageConfidence: number;
  processingTimeMs: number;
  accuracyPrediction?: number; // ML-based accuracy prediction
}

export interface FieldMappingSummary {
  fieldId: string;
  coreFieldKey: string;
  confidence: number;
  transformationApplied?: string;
}

export interface ValidationError {
  field: string;
  message: string;
  code?: string;
}

export interface WeddingDataUpdateRequest {
  weddingId: string;
  updates: Record<string, any>;
  source?: UpdateSource;
}

export interface CreateMappingsRequest {
  formId: string;
  mappings: CreateFieldMapping[];
}

export interface CreateFieldMapping {
  formFieldId: string;
  coreFieldKey: CoreFieldKey;
  confidence: number;
  transformationRule?: string;
  priority: number;
  isVerified?: boolean;
}

export interface AutoDetectMappingsRequest {
  formId: string;
  formFields: FormField[];
  supplierType?: SupplierType;
  formType?: FormType;
}

export interface SessionFeedbackRequest {
  sessionId: string;
  fieldFeedback: FieldFeedback[];
}

export interface FieldFeedback {
  fieldId: string;
  wasCorrect: boolean;
  correctedValue?: any;
  comment?: string;
}

export interface VendorAccess {
  canRead: boolean;
  canWrite: boolean;
  accessLevel: 'none' | 'read' | 'write' | 'full';
  restrictions?: string[];
}

// Enum-like types
export type SupplierType = 
  | 'photographer' 
  | 'venue' 
  | 'florist' 
  | 'caterer' 
  | 'dj' 
  | 'band'
  | 'videographer' 
  | 'planner' 
  | 'makeup' 
  | 'transportation' 
  | 'other';

export type FormType = 
  | 'inquiry' 
  | 'contract' 
  | 'questionnaire' 
  | 'timeline' 
  | 'preferences' 
  | 'other';

export type CoreFieldKey = 
  | 'couple_name_1' 
  | 'couple_name_2' 
  | 'wedding_date' 
  | 'venue_name'
  | 'venue_address' 
  | 'guest_count' 
  | 'budget_amount' 
  | 'contact_email' 
  | 'contact_phone';

export type UpdateSource = 
  | 'form_submission' 
  | 'manual_entry' 
  | 'import' 
  | 'api' 
  | 'integration';

export type TransformationRule = 
  | 'date_iso' 
  | 'phone_format' 
  | 'email_lowercase' 
  | 'number_currency'
  | 'text_title_case' 
  | 'text_uppercase' 
  | 'text_lowercase';

// Wedding industry specific constants
export const CORE_FIELD_LABELS: Record<CoreFieldKey, string> = {
  couple_name_1: 'Partner 1 Name',
  couple_name_2: 'Partner 2 Name', 
  wedding_date: 'Wedding Date',
  venue_name: 'Venue Name',
  venue_address: 'Venue Address',
  guest_count: 'Number of Guests',
  budget_amount: 'Wedding Budget',
  contact_email: 'Contact Email',
  contact_phone: 'Contact Phone'
};

export const SUPPLIER_TYPE_LABELS: Record<SupplierType, string> = {
  photographer: 'Photographer',
  venue: 'Venue',
  florist: 'Florist',
  caterer: 'Caterer',
  dj: 'DJ',
  band: 'Band',
  videographer: 'Videographer',
  planner: 'Wedding Planner',
  makeup: 'Makeup Artist',
  transportation: 'Transportation',
  other: 'Other'
};

export const FORM_TYPE_LABELS: Record<FormType, string> = {
  inquiry: 'Initial Inquiry',
  contract: 'Contract Form',
  questionnaire: 'Client Questionnaire',
  timeline: 'Timeline Form',
  preferences: 'Preferences Form',
  other: 'Other'
};

// Performance and monitoring types
export interface AutoPopulationMetrics {
  totalPopulations: number;
  successRate: number;
  averageConfidence: number;
  averageProcessingTime: number;
  topMappedFields: { field: string; count: number }[];
  supplierTypeDistribution: Record<SupplierType, number>;
  accuracyTrends: { date: string; accuracy: number }[];
  performanceBySupplierType: Record<SupplierType, {
    avgConfidence: number;
    avgProcessingTime: number;
    successRate: number;
  }>;
}

export interface PopulationHealth {
  systemStatus: 'healthy' | 'degraded' | 'down';
  avgResponseTime: number;
  errorRate: number;
  activeSessionsCount: number;
  queueLength: number;
  lastHealthCheck: string;
  issues: string[];
}