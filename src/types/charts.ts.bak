/**
 * WS-224: Progress Charts System - Type Definitions
 * Comprehensive type definitions for wedding progress tracking and analytics
 */

export interface WeddingMilestone {
  id: string;
  name: string;
  category: 'venue' | 'catering' | 'photography' | 'flowers' | 'music' | 'transport' | 'other';
  status: 'not_started' | 'in_progress' | 'completed' | 'overdue';
  dueDate: Date;
  completedDate?: Date;
  priority: 'low' | 'medium' | 'high' | 'critical';
  assignedTo?: string;
  progress: number; // 0-100
  dependencies?: string[];
  estimatedCost?: number;
  actualCost?: number;
}

export interface TaskProgress {
  id: string;
  title: string;
  description?: string;
  category: string;
  completed: boolean;
  completedAt?: Date;
  createdAt: Date;
  dueDate?: Date;
  assignedTo?: string;
  priority: 'low' | 'medium' | 'high';
  tags?: string[];
}

export interface BudgetItem {
  id: string;
  category: string;
  description: string;
  budgetedAmount: number;
  actualAmount: number;
  variance: number;
  status: 'pending' | 'confirmed' | 'paid' | 'overbudget';
  vendorId?: string;
  dueDate?: Date;
}

export interface VendorMetric {
  id: string;
  name: string;
  category: string;
  responseTime: number; // in hours
  satisfaction: number; // 1-5 rating
  completionRate: number; // percentage
  onTimeDelivery: number; // percentage
  totalBookings: number;
  revenue: number;
  lastContact: Date;
}

export interface ProgressTimelineData {
  date: string;
  milestonesCompleted: number;
  tasksCompleted: number;
  budgetSpent: number;
  vendorConfirmations: number;
}

export interface ChartData {
  name: string;
  value: number;
  color?: string;
  percentage?: number;
  trend?: 'up' | 'down' | 'stable';
  comparison?: number;
}

export interface ProgressOverview {
  totalMilestones: number;
  completedMilestones: number;
  overdueMilestones: number;
  totalTasks: number;
  completedTasks: number;
  totalBudget: number;
  spentBudget: number;
  daysUntilWedding: number;
  overallProgress: number; // 0-100
  vendorConfirmationRate: number; // 0-100
  onTrack: boolean;
}

export interface ProgressFilter {
  dateRange: {
    start: Date;
    end: Date;
  };
  categories: string[];
  status: string[];
  assignedTo?: string;
}

export interface ChartConfig {
  type: 'line' | 'bar' | 'pie' | 'area' | 'progress' | 'timeline';
  responsive: boolean;
  showLegend: boolean;
  showTooltip: boolean;
  colors: string[];
  height?: number;
  width?: number;
  animations: boolean;
}

export interface ProgressAlerts {
  overdueTasks: TaskProgress[];
  budgetOverruns: BudgetItem[];
  unresponsiveVendors: VendorMetric[];
  upcomingDeadlines: WeddingMilestone[];
  criticalMilestones: WeddingMilestone[];
}

// Tier-based feature access
export interface ProgressFeatureAccess {
  tier: 'free' | 'starter' | 'professional' | 'scale' | 'enterprise';
  features: {
    basicProgress: boolean;
    advancedCharts: boolean;
    budgetAnalytics: boolean;
    vendorMetrics: boolean;
    customReports: boolean;
    realTimeUpdates: boolean;
    dataExport: boolean;
    customDashboard: boolean;
  };
}

// API Response types
export interface ProgressChartsApiResponse {
  overview: ProgressOverview;
  milestones: WeddingMilestone[];
  tasks: TaskProgress[];
  budget: BudgetItem[];
  vendors: VendorMetric[];
  timeline: ProgressTimelineData[];
  alerts: ProgressAlerts;
  lastUpdated: Date;
}

export interface ChartProps {
  data: any;
  config?: ChartConfig;
  loading?: boolean;
  error?: string;
  onDataPointClick?: (data: any) => void;
  onFilterChange?: (filter: ProgressFilter) => void;
  className?: string;
  accessLevel?: ProgressFeatureAccess;
}

// Wedding-specific metrics
export interface WeddingMetrics {
  weddingDate: Date;
  daysRemaining: number;
  planningPhase: 'early' | 'middle' | 'final' | 'week_of';
  guestCount: number;
  venueBooked: boolean;
  budgetUtilization: number;
  vendorBookingRate: number;
  timelineAdherence: number;
  stressLevel: 'low' | 'medium' | 'high';
}