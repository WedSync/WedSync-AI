import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { z } from 'zod'

const updateGuestSchema = z.object({
  first_name: z.string().min(1).max(100).optional(),
  last_name: z.string().min(1).max(100).optional(),
  email: z.string().email().optional().nullable(),
  phone: z.string().max(20).optional().nullable(),
  address: z.record(z.any()).optional(),
  category: z.enum(['family', 'friends', 'work', 'other']).optional(),
  side: z.enum(['partner1', 'partner2', 'mutual']).optional(),
  plus_one: z.boolean().optional(),
  plus_one_name: z.string().max(100).optional().nullable(),
  age_group: z.enum(['adult', 'child', 'infant']).optional(),
  table_number: z.number().int().positive().optional().nullable(),
  helper_role: z.string().max(50).optional().nullable(),
  dietary_restrictions: z.string().optional().nullable(),
  special_needs: z.string().optional().nullable(),
  rsvp_status: z.enum(['pending', 'attending', 'declined', 'maybe']).optional(),
  tags: z.array(z.string()).optional(),
  notes: z.string().optional().nullable(),
  household_id: z.string().uuid().optional().nullable()
})

// GET /api/guests/[id] - Get specific guest
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    const supabase = await createClient()
    const { data: user } = await supabase.auth.getUser()
    
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: guest, error } = await supabase
      .from('guests')
      .select(`
        *,
        households (
          id, name, total_members, adults, children, infants
        )
      `)
      .eq('id', id)
      .single()

    if (error || !guest) {
      return NextResponse.json({ error: 'Guest not found' }, { status: 404 })
    }

    return NextResponse.json({
      success: true,
      data: guest
    })

  } catch (error) {
    console.error('Error in GET /api/guests/[id]:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// PUT /api/guests/[id] - Update guest
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    const supabase = await createClient()
    const { data: user } = await supabase.auth.getUser()
    
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const validatedData = updateGuestSchema.parse(body)

    // Update RSVP date if status is being changed
    if (validatedData.rsvp_status && validatedData.rsvp_status !== 'pending') {
      (validatedData as any).rsvp_date = new Date().toISOString()
    }

    const { data: guest, error } = await supabase
      .from('guests')
      .update(validatedData)
      .eq('id', id)
      .select(`
        *,
        households (
          id, name, total_members, adults, children, infants
        )
      `)
      .single()

    if (error) {
      console.error('Error updating guest:', error)
      return NextResponse.json({ error: 'Failed to update guest' }, { status: 500 })
    }

    if (!guest) {
      return NextResponse.json({ error: 'Guest not found' }, { status: 404 })
    }

    return NextResponse.json({
      success: true,
      data: guest
    })

  } catch (error) {
    console.error('Error in PUT /api/guests/[id]:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({
        error: 'Validation failed',
        details: error.errors
      }, { status: 400 })
    }

    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// DELETE /api/guests/[id] - Delete guest
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    const supabase = await createClient()
    const { data: user } = await supabase.auth.getUser()
    
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // First check if guest exists and get household info
    const { data: guest } = await supabase
      .from('guests')
      .select('id, household_id, households(id, primary_contact_id)')
      .eq('id', id)
      .single()

    if (!guest) {
      return NextResponse.json({ error: 'Guest not found' }, { status: 404 })
    }

    // Delete the guest
    const { error: deleteError } = await supabase
      .from('guests')
      .delete()
      .eq('id', id)

    if (deleteError) {
      console.error('Error deleting guest:', deleteError)
      return NextResponse.json({ error: 'Failed to delete guest' }, { status: 500 })
    }

    // If this guest was a primary contact, update household or delete if empty
    if (guest.household_id && guest.households?.primary_contact_id === guest.id) {
      const { data: remainingGuests } = await supabase
        .from('guests')
        .select('id')
        .eq('household_id', guest.household_id)
        .limit(1)

      if (!remainingGuests || remainingGuests.length === 0) {
        // Delete empty household
        await supabase
          .from('households')
          .delete()
          .eq('id', guest.household_id)
      } else {
        // Update primary contact to first remaining guest
        await supabase
          .from('households')
          .update({ primary_contact_id: remainingGuests[0].id })
          .eq('id', guest.household_id)
      }
    }

    return NextResponse.json({
      success: true,
      message: 'Guest deleted successfully'
    })

  } catch (error) {
    console.error('Error in DELETE /api/guests/[id]:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}