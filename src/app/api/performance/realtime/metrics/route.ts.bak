/**
 * WS-202 Realtime Performance Metrics API
 * Team D - Round 1: Performance monitoring API endpoints
 * 
 * Provides real-time metrics for the performance dashboard
 */

import { NextRequest, NextResponse } from 'next/server';
import { RealtimeConnectionOptimizer } from '@/lib/performance/realtime-connection-optimizer';
import { RealtimeCacheManager } from '@/lib/performance/realtime-cache-manager';
import { RealtimeScalingManager } from '@/lib/infrastructure/realtime-scaling-manager';
import type {
  RealtimePerformanceMetrics,
  CachePerformanceMetrics,
  ConnectionHealthReport,
  ScalingResult,
  WeddingSeasonMetrics,
  PerformanceAlert,
  WeddingDayMode
} from '@/types/realtime-performance';

// Cache for performance metrics to avoid excessive computation
let metricsCache: {
  data: any;
  lastUpdate: number;
} | null = null;

const CACHE_TTL = 10000; // 10 seconds

async function getPerformanceMetrics() {
  // Return cached data if still fresh
  if (metricsCache && Date.now() - metricsCache.lastUpdate < CACHE_TTL) {
    return metricsCache.data;
  }

  try {
    // Get instances of performance managers
    const connectionOptimizer = RealtimeConnectionOptimizer.getInstance();
    const cacheManager = RealtimeCacheManager.getInstance();
    const scalingManager = RealtimeScalingManager.getInstance();

    // Gather metrics in parallel for best performance
    const [
      realtimeMetrics,
      cacheMetrics,
      connectionHealth,
      scalingStatus,
      weddingSeasonMetrics,
      alerts,
      weddingDayStatus
    ] = await Promise.all([
      connectionOptimizer.getRealtimePerformanceMetrics(),
      cacheManager.getCachePerformanceMetrics(),
      connectionOptimizer.monitorConnectionHealth(),
      scalingManager.evaluateScalingNeed(),
      scalingManager.getWeddingSeasonMetrics?.() || Promise.resolve(null),
      scalingManager.getActiveAlerts?.() || Promise.resolve([]),
      scalingManager.getWeddingDayStatus?.() || Promise.resolve(null)
    ]);

    const metrics = {
      realtime: realtimeMetrics,
      cache: cacheMetrics,
      connectionHealth,
      scaling: scalingStatus,
      weddingSeason: weddingSeasonMetrics,
      alerts: alerts || [],
      weddingDay: weddingDayStatus,
      timestamp: Date.now()
    };

    // Update cache
    metricsCache = {
      data: metrics,
      lastUpdate: Date.now()
    };

    return metrics;
  } catch (error) {
    console.error('Error gathering performance metrics:', error);
    
    // Return mock data if services are unavailable (for development)
    const mockMetrics = {
      realtime: {
        connectionMetrics: {
          totalConnections: 147,
          connectionsPerSecond: 2.3,
          averageConnectionLatency: 198,
          connectionReusageRate: 87.2
        },
        subscriptionMetrics: {
          totalSubscriptions: 1247,
          subscriptionsPerConnection: 8.4,
          subscriptionUpdateRate: 94.6
        },
        performanceMetrics: {
          averageMessageLatency: 242,
          messagesThroughput: 967,
          errorRate: 0.08
        },
        resourceMetrics: {
          memoryUsage: { 
            rss: 268435456, 
            heapUsed: 134217728, 
            heapTotal: 201326592, 
            external: 16777216, 
            arrayBuffers: 8388608 
          },
          cpuUsage: 28.4,
          networkUtilization: 35.7
        }
      },
      cache: {
        hitRatio: {
          overall: 92.1,
          local: 95.8,
          redis: 88.4
        },
        performance: {
          averageReadLatency: 3.2,
          averageWriteLatency: 5.4,
          operationsPerSecond: 2134
        },
        memory: {
          localCacheSize: 743,
          localCacheMemory: 52428800,
          redisMemoryUsage: 104857600
        },
        optimization: {
          compressionRatio: 2.8,
          evictionRate: 1.2,
          preloadEffectiveness: 84.3
        }
      },
      connectionHealth: {
        totalConnections: 147,
        healthyConnections: 145,
        unhealthyConnections: 2,
        connectionsByUser: new Map([
          ['photographer-users', 67],
          ['venue-users', 42],
          ['florist-users', 21],
          ['caterer-users', 17]
        ]),
        performanceMetrics: {
          averageLatency: 198,
          messagesThroughput: 967,
          errorRate: 0.08
        }
      },
      scaling: {
        action: 'no_scaling_needed' as const,
        currentCapacity: 1000,
        requiredCapacity: 650,
        scalingActions: [],
        timestamp: Date.now()
      },
      weddingSeason: {
        seasonType: 'peak' as const,
        expectedLoad: 68,
        currentLoad: 52,
        scalingRecommendation: 'maintain' as const,
        capacityUtilization: 52.7,
        costOptimizationScore: 78.9
      },
      alerts: [
        {
          id: 'mock-alert-001',
          type: 'latency' as const,
          severity: 'medium' as const,
          message: 'Message latency slightly elevated during peak hours',
          value: 242,
          threshold: 250,
          timestamp: Date.now() - 300000,
          metadata: { component: 'realtime_messaging', trend: 'stable' }
        }
      ],
      weddingDay: {
        enabled: false,
        weddingIds: [],
        enhancedMonitoring: false,
        priorityChannels: ['timeline', 'emergency', 'coordination'],
        emergencyContacts: [
          { name: 'Site Manager', phone: '+1234567890', role: 'technical', escalationLevel: 1 },
          { name: 'CTO', phone: '+1234567891', role: 'executive', escalationLevel: 2 }
        ],
        fallbackProcedures: ['enable_read_only_mode', 'activate_backup_systems']
      },
      timestamp: Date.now(),
      mock: true
    };

    return mockMetrics;
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const metric = searchParams.get('metric');

    const allMetrics = await getPerformanceMetrics();

    // Return specific metric if requested
    if (metric) {
      const specificMetric = allMetrics[metric as keyof typeof allMetrics];
      if (!specificMetric) {
        return NextResponse.json(
          { error: `Metric '${metric}' not found` },
          { status: 404 }
        );
      }

      return NextResponse.json({
        metric,
        data: specificMetric,
        timestamp: allMetrics.timestamp
      });
    }

    // Return all metrics
    return NextResponse.json(allMetrics);

  } catch (error) {
    console.error('Performance metrics API error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to fetch performance metrics',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { action, config } = body;

    const scalingManager = RealtimeScalingManager.getInstance();

    switch (action) {
      case 'enable_wedding_day_mode':
        const weddingDayConfig = config as WeddingDayMode;
        await scalingManager.enableWeddingDayMode?.(weddingDayConfig);
        break;

      case 'disable_wedding_day_mode':
        await scalingManager.disableWeddingDayMode?.();
        break;

      case 'force_scaling_evaluation':
        const scalingResult = await scalingManager.evaluateScalingNeed();
        return NextResponse.json({ scalingResult });

      case 'clear_alerts':
        await scalingManager.clearAlerts?.();
        break;

      case 'warm_cache':
        const cacheManager = RealtimeCacheManager.getInstance();
        const { weddingIds } = config;
        await cacheManager.warmCacheForWeddingSeason?.(weddingIds);
        break;

      default:
        return NextResponse.json(
          { error: `Unknown action: ${action}` },
          { status: 400 }
        );
    }

    // Clear cache after configuration changes
    metricsCache = null;

    return NextResponse.json({ success: true, action });

  } catch (error) {
    console.error('Performance metrics API POST error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to process performance action',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}