import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { cookies } from 'next/headers'
import { z } from 'zod'

const CreateTransactionSchema = z.object({
  wedding_id: z.string().uuid(),
  organization_id: z.string().uuid(),
  category_id: z.string().uuid(),
  amount: z.number().positive().max(1000000),
  description: z.string().min(1).max(255).trim(),
  transaction_date: z.string().optional(),
  status: z.enum(['PENDING', 'PAID', 'OVERDUE', 'CANCELLED']).default('PAID'),
  payment_method: z.string().max(50).optional(),
  vendor_name: z.string().max(100).optional(),
  receipt_url: z.string().url().optional(),
  receipt_filename: z.string().max(255).optional(),
  reference_number: z.string().max(100).optional(),
  due_date: z.string().optional(),
  paid_date: z.string().optional(),
  notes: z.string().max(1000).optional(),
  tags: z.array(z.string()).optional(),
})

const UpdateTransactionSchema = CreateTransactionSchema.partial()

export async function GET(request: NextRequest) {
  try {
    const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!)
    
    // Get current user
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    if (userError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get query parameters
    const { searchParams } = new URL(request.url)
    const categoryId = searchParams.get('category_id')
    const transactionType = searchParams.get('transaction_type')
    const startDate = searchParams.get('start_date')
    const endDate = searchParams.get('end_date')
    const limit = parseInt(searchParams.get('limit') || '50')
    const offset = parseInt(searchParams.get('offset') || '0')
    const sortBy = searchParams.get('sort_by') || 'transaction_date'
    const sortOrder = searchParams.get('sort_order') || 'desc'

    // Get query parameters
    const weddingId = searchParams.get('wedding_id')
    
    if (!weddingId) {
      return NextResponse.json(
        { error: 'wedding_id parameter is required' },
        { status: 400 }
      )
    }

    // Check user has access to this wedding
    const { data: teamMember, error: teamError } = await supabase
      .from('wedding_team_members')
      .select('role')
      .eq('wedding_id', weddingId)
      .eq('user_id', user.id)
      .single()

    if (teamError || !teamMember) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 })
    }

    // Build query
    let query = supabase
      .from('budget_transactions')
      .select(`
        id,
        wedding_id,
        organization_id,
        category_id,
        amount,
        description,
        transaction_date,
        status,
        payment_method,
        vendor_name,
        receipt_url,
        receipt_filename,
        reference_number,
        due_date,
        paid_date,
        notes,
        tags,
        created_at,
        updated_at,
        budget_categories!inner (
          id,
          name,
          category_type,
          budgeted_amount
        )
      `)
      .eq('wedding_id', weddingId)

    // Apply filters
    if (categoryId) {
      query = query.eq('category_id', categoryId)
    }
    
    if (transactionType) {
      query = query.eq('transaction_type', transactionType)
    }

    if (startDate) {
      query = query.gte('transaction_date', startDate)
    }

    if (endDate) {
      query = query.lte('transaction_date', endDate)
    }

    // Apply sorting
    const ascending = sortOrder === 'asc'
    query = query.order(sortBy, { ascending })

    // Apply pagination
    query = query.range(offset, offset + limit - 1)

    const { data: transactions, error, count } = await query

    if (error) {
      console.error('Error fetching budget transactions:', error)
      return NextResponse.json(
        { error: 'Failed to fetch transactions' },
        { status: 500 }
      )
    }

    // Format transactions with category info
    const formattedTransactions = transactions.map(transaction => ({
      id: transaction.id,
      wedding_id: transaction.wedding_id,
      organization_id: transaction.organization_id,
      category_id: transaction.category_id,
      category_name: transaction.budget_categories.name,
      category_type: transaction.budget_categories.category_type,
      budgeted_amount: transaction.budget_categories.budgeted_amount,
      amount: transaction.amount,
      description: transaction.description,
      transaction_date: transaction.transaction_date,
      status: transaction.status,
      payment_method: transaction.payment_method,
      vendor_name: transaction.vendor_name,
      receipt_url: transaction.receipt_url,
      receipt_filename: transaction.receipt_filename,
      reference_number: transaction.reference_number,
      due_date: transaction.due_date,
      paid_date: transaction.paid_date,
      notes: transaction.notes,
      tags: transaction.tags || [],
      created_at: transaction.created_at,
      updated_at: transaction.updated_at,
    }))

    // Get total count for pagination
    const { count: totalCount } = await supabase
      .from('budget_transactions')
      .select('*', { count: 'exact', head: true })
      .eq('wedding_id', weddingId)

    return NextResponse.json({
      transactions: formattedTransactions,
      pagination: {
        total: totalCount || 0,
        limit,
        offset,
        has_more: (offset + limit) < (totalCount || 0)
      }
    })

  } catch (error) {
    console.error('Unexpected error in GET /api/budget/transactions:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!)
    
    // Get current user
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    if (userError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Parse and validate request body
    const body = await request.json()
    const validatedData = CreateTransactionSchema.parse(body)

    // Check user has access to this wedding
    const { data: teamMember, error: teamError } = await supabase
      .from('wedding_team_members')
      .select('role')
      .eq('wedding_id', validatedData.wedding_id)
      .eq('user_id', user.id)
      .single()

    if (teamError || !teamMember) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 })
    }

    if (!['owner', 'partner', 'planner', 'family'].includes(teamMember.role)) {
      return NextResponse.json({ error: 'Insufficient permissions to add expenses' }, { status: 403 })
    }

    // Verify category exists and belongs to wedding
    const { data: category, error: categoryError } = await supabase
      .from('budget_categories')
      .select('id, name, wedding_id')
      .eq('id', validatedData.category_id)
      .eq('wedding_id', validatedData.wedding_id)
      .eq('is_active', true)
      .single()

    if (categoryError || !category) {
      return NextResponse.json(
        { error: 'Budget category not found or inactive' },
        { status: 404 }
      )
    }

    // Create transaction
    const { data: newTransaction, error } = await supabase
      .from('budget_transactions')
      .insert([{
        ...validatedData,
        transaction_date: validatedData.transaction_date || new Date().toISOString().split('T')[0],
        created_by: user.id,
        updated_by: user.id
      }])
      .select(`
        *,
        budget_categories!inner (
          id,
          name,
          category_type,
          budgeted_amount
        )
      `)
      .single()

    if (error) {
      console.error('Error creating budget transaction:', error)
      return NextResponse.json(
        { error: 'Failed to create transaction' },
        { status: 500 }
      )
    }

    // Format response
    const formattedTransaction = {
      id: newTransaction.id,
      wedding_id: newTransaction.wedding_id,
      organization_id: newTransaction.organization_id,
      category_id: newTransaction.category_id,
      category_name: newTransaction.budget_categories.name,
      category_type: newTransaction.budget_categories.category_type,
      budgeted_amount: newTransaction.budget_categories.budgeted_amount,
      amount: newTransaction.amount,
      description: newTransaction.description,
      transaction_date: newTransaction.transaction_date,
      status: newTransaction.status,
      payment_method: newTransaction.payment_method,
      vendor_name: newTransaction.vendor_name,
      receipt_url: newTransaction.receipt_url,
      receipt_filename: newTransaction.receipt_filename,
      reference_number: newTransaction.reference_number,
      due_date: newTransaction.due_date,
      paid_date: newTransaction.paid_date,
      notes: newTransaction.notes,
      tags: newTransaction.tags || [],
      created_at: newTransaction.created_at,
      updated_at: newTransaction.updated_at,
    }

    // Log activity
    await supabase.from('audit_logs').insert({
      user_id: user.id,
      wedding_id: validatedData.wedding_id,
      action: 'create_budget_transaction',
      resource_type: 'budget_transaction',
      resource_id: newTransaction.id,
      metadata: {
        category_id: newTransaction.category_id,
        amount: newTransaction.amount,
        description: newTransaction.description
      }
    })

    return NextResponse.json({ transaction: formattedTransaction }, { status: 201 })

  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Unexpected error in POST /api/budget/transactions:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function PUT(request: NextRequest) {
  try {
    const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!)
    
    // Get current user
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    if (userError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Parse request body
    const body = await request.json()
    const { transactionId, ...updateData } = body

    if (!transactionId) {
      return NextResponse.json(
        { error: 'Transaction ID is required' },
        { status: 400 }
      )
    }

    // Validate update data
    const validatedData = UpdateTransactionSchema.parse(updateData)

    // Check if transaction exists and get wedding access
    const { data: existingTransaction, error: fetchError } = await supabase
      .from('budget_transactions')
      .select('id, wedding_id, category_id')
      .eq('id', transactionId)
      .single()

    if (fetchError || !existingTransaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      )
    }

    // Check user has access to this wedding
    const { data: teamMember, error: teamError } = await supabase
      .from('wedding_team_members')
      .select('role')
      .eq('wedding_id', existingTransaction.wedding_id)
      .eq('user_id', user.id)
      .single()

    if (teamError || !teamMember) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 })
    }

    if (!['owner', 'partner', 'planner', 'family'].includes(teamMember.role)) {
      return NextResponse.json({ error: 'Insufficient permissions to update expenses' }, { status: 403 })
    }

    // If changing category, verify new category belongs to wedding
    if (validatedData.category_id) {
      const { data: newCategory, error: categoryError } = await supabase
        .from('budget_categories')
        .select('id')
        .eq('id', validatedData.category_id)
        .eq('wedding_id', existingTransaction.wedding_id)
        .eq('is_active', true)
        .single()

      if (categoryError || !newCategory) {
        return NextResponse.json(
          { error: 'New category not found or inactive' },
          { status: 404 }
        )
      }
    }

    // Update transaction
    const { data: updatedTransaction, error } = await supabase
      .from('budget_transactions')
      .update({
        ...validatedData,
        updated_by: user.id,
        updated_at: new Date().toISOString()
      })
      .eq('id', transactionId)
      .select(`
        *,
        budget_categories!inner (
          id,
          name,
          category_type,
          budgeted_amount
        )
      `)
      .single()

    if (error) {
      console.error('Error updating budget transaction:', error)
      return NextResponse.json(
        { error: 'Failed to update transaction' },
        { status: 500 }
      )
    }

    // Format response
    const formattedTransaction = {
      id: updatedTransaction.id,
      wedding_id: updatedTransaction.wedding_id,
      organization_id: updatedTransaction.organization_id,
      category_id: updatedTransaction.category_id,
      category_name: updatedTransaction.budget_categories.name,
      category_type: updatedTransaction.budget_categories.category_type,
      budgeted_amount: updatedTransaction.budget_categories.budgeted_amount,
      amount: updatedTransaction.amount,
      description: updatedTransaction.description,
      transaction_date: updatedTransaction.transaction_date,
      status: updatedTransaction.status,
      payment_method: updatedTransaction.payment_method,
      vendor_name: updatedTransaction.vendor_name,
      receipt_url: updatedTransaction.receipt_url,
      receipt_filename: updatedTransaction.receipt_filename,
      reference_number: updatedTransaction.reference_number,
      due_date: updatedTransaction.due_date,
      paid_date: updatedTransaction.paid_date,
      notes: updatedTransaction.notes,
      tags: updatedTransaction.tags || [],
      created_at: updatedTransaction.created_at,
      updated_at: updatedTransaction.updated_at,
    }

    // Log activity
    await supabase.from('audit_logs').insert({
      user_id: user.id,
      wedding_id: existingTransaction.wedding_id,
      action: 'update_budget_transaction',
      resource_type: 'budget_transaction',
      resource_id: updatedTransaction.id,
      metadata: {
        changes: validatedData,
        transaction_id: transactionId
      }
    })

    return NextResponse.json({ transaction: formattedTransaction })

  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Unexpected error in PUT /api/budget/transactions:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!)
    
    // Get current user
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    if (userError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get transaction ID from query params
    const { searchParams } = new URL(request.url)
    const transactionId = searchParams.get('id')

    if (!transactionId) {
      return NextResponse.json(
        { error: 'Transaction ID is required' },
        { status: 400 }
      )
    }

    // Check if transaction exists and get wedding access
    const { data: existingTransaction, error: fetchError } = await supabase
      .from('budget_transactions')
      .select('id, wedding_id, receipt_url, amount, description')
      .eq('id', transactionId)
      .single()

    if (fetchError || !existingTransaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      )
    }

    // Check user has access to this wedding
    const { data: teamMember, error: teamError } = await supabase
      .from('wedding_team_members')
      .select('role')
      .eq('wedding_id', existingTransaction.wedding_id)
      .eq('user_id', user.id)
      .single()

    if (teamError || !teamMember) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 })
    }

    if (!['owner', 'partner', 'planner'].includes(teamMember.role)) {
      return NextResponse.json({ error: 'Only wedding owners/partners/planners can delete expenses' }, { status: 403 })
    }

    // Delete associated receipts first
    if (existingTransaction.receipt_url) {
      const { error: receiptError } = await supabase
        .from('budget_receipts')
        .delete()
        .eq('transaction_id', transactionId)

      if (receiptError) {
        console.error('Error deleting receipts:', receiptError)
      }
    }

    // Delete transaction
    const { error } = await supabase
      .from('budget_transactions')
      .delete()
      .eq('id', transactionId)

    if (error) {
      console.error('Error deleting budget transaction:', error)
      return NextResponse.json(
        { error: 'Failed to delete transaction' },
        { status: 500 }
      )
    }

    // Log activity
    await supabase.from('audit_logs').insert({
      user_id: user.id,
      wedding_id: existingTransaction.wedding_id,
      action: 'delete_budget_transaction',
      resource_type: 'budget_transaction',
      resource_id: transactionId,
      metadata: {
        amount: existingTransaction.amount,
        description: existingTransaction.description,
        had_receipt: !!existingTransaction.receipt_url
      }
    })

    return NextResponse.json({ 
      success: true,
      message: 'Transaction deleted successfully' 
    })

  } catch (error) {
    console.error('Unexpected error in DELETE /api/budget/transactions:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}