import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { getCurrentUser } from '@/lib/auth/server';
import { JourneyNode, JourneyConnection } from '../canvas/route';

export interface ValidationError {
  type: 'error' | 'warning';
  message: string;
  nodeId?: string;
  connectionId?: string;
}

export interface ValidateJourneyRequest {
  nodes: JourneyNode[];
  connections: JourneyConnection[];
}

export interface ValidateJourneyResponse {
  isValid: boolean;
  errors: ValidationError[];
  warnings: ValidationError[];
}

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const user = await getCurrentUser();
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const supabase = await createClient();
    const journeyId = params.id;
    const body: ValidateJourneyRequest = await request.json();

    // Validate journey exists and user has access
    const { data: journey, error: journeyError } = await supabase
      .from('journeys')
      .select('id')
      .eq('id', journeyId)
      .single();

    if (journeyError || !journey) {
      return NextResponse.json(
        { error: 'Journey not found' },
        { status: 404 }
      );
    }

    // Use the database validation function
    const { data: dbValidation, error: validationError } = await supabase.rpc(
      'validate_journey_canvas',
      {
        p_journey_id: journeyId,
        p_nodes: body.nodes,
        p_connections: body.connections,
      }
    );

    if (validationError) {
      console.error('Database validation error:', validationError);
      return NextResponse.json(
        { error: 'Validation failed' },
        { status: 500 }
      );
    }

    // Additional client-side validations
    const errors: ValidationError[] = [];
    const warnings: ValidationError[] = [];

    // Add database validation results
    if (dbValidation.errors) {
      dbValidation.errors.forEach((error: string) => {
        errors.push({ type: 'error', message: error });
      });
    }

    if (dbValidation.warnings) {
      dbValidation.warnings.forEach((warning: string) => {
        warnings.push({ type: 'warning', message: warning });
      });
    }

    // Check for disconnected nodes
    const nodeIds = new Set(body.nodes.map(n => n.node_id));
    const connectedNodes = new Set();
    
    body.connections.forEach(conn => {
      connectedNodes.add(conn.source_node_id);
      connectedNodes.add(conn.target_node_id);
    });

    body.nodes.forEach(node => {
      if (node.type !== 'start' && node.type !== 'end' && !connectedNodes.has(node.node_id)) {
        warnings.push({
          type: 'warning',
          message: `Node "${node.name}" is not connected to any other nodes`,
          nodeId: node.node_id,
        });
      }
    });

    // Check for invalid connections
    body.connections.forEach(conn => {
      if (!nodeIds.has(conn.source_node_id)) {
        errors.push({
          type: 'error',
          message: `Connection references non-existent source node: ${conn.source_node_id}`,
          connectionId: conn.id,
        });
      }
      if (!nodeIds.has(conn.target_node_id)) {
        errors.push({
          type: 'error',
          message: `Connection references non-existent target node: ${conn.target_node_id}`,
          connectionId: conn.id,
        });
      }
    });

    // Check for timeline anchor configurations
    body.nodes
      .filter(node => node.type === 'timeline')
      .forEach(node => {
        const timelineConfig = node.timeline_config;
        if (!timelineConfig?.anchor_type) {
          errors.push({
            type: 'error',
            message: `Timeline node "${node.name}" missing anchor configuration`,
            nodeId: node.node_id,
          });
        }

        if (timelineConfig?.anchor_type && !timelineConfig?.offset) {
          errors.push({
            type: 'error',
            message: `Timeline node "${node.name}" missing offset configuration`,
            nodeId: node.node_id,
          });
        }

        // Validate business hours format
        if (timelineConfig?.business_hours) {
          const { start, end } = timelineConfig.business_hours;
          const timeRegex = /^\d{2}:\d{2}$/;
          
          if (!timeRegex.test(start)) {
            errors.push({
              type: 'error',
              message: `Timeline node "${node.name}" has invalid start time format. Use HH:MM`,
              nodeId: node.node_id,
            });
          }
          
          if (!timeRegex.test(end)) {
            errors.push({
              type: 'error',
              message: `Timeline node "${node.name}" has invalid end time format. Use HH:MM`,
              nodeId: node.node_id,
            });
          }
          
          if (start >= end) {
            errors.push({
              type: 'error',
              message: `Timeline node "${node.name}" start time must be before end time`,
              nodeId: node.node_id,
            });
          }
        }

        // Check for excessive delays
        if (timelineConfig?.offset?.value > 365 && timelineConfig?.offset?.unit === 'days') {
          warnings.push({
            type: 'warning',
            message: `Timeline node "${node.name}" has offset of more than 365 days`,
            nodeId: node.node_id,
          });
        }
      });

    // Check for action nodes without configuration
    body.nodes
      .filter(node => ['email', 'sms', 'form'].includes(node.type))
      .forEach(node => {
        if (!node.config?.template_id && !node.config?.content) {
          warnings.push({
            type: 'warning',
            message: `${node.type} node "${node.name}" is missing content configuration`,
            nodeId: node.node_id,
          });
        }
      });

    const response: ValidateJourneyResponse = {
      isValid: errors.length === 0,
      errors,
      warnings,
    };

    return NextResponse.json(response);
  } catch (error) {
    console.error('Validation error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}