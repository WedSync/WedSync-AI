import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/database';
import { JourneyStateMachine } from '@/lib/journey-engine/state-machine';

const supabase = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

// POST /api/journeys/[id]/activate - Activate a journey
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const journeyId = params.id;
    const body = await request.json();
    const { user_id } = body;

    // Get current journey
    const { data: journey, error: fetchError } = await supabase
      .from('journeys')
      .select('status, name')
      .eq('id', journeyId)
      .single();

    if (fetchError) {
      return NextResponse.json(
        { error: 'Journey not found' },
        { status: 404 }
      );
    }

    // Validate transition
    const validation = await JourneyStateMachine.validateJourneyTransition(
      journeyId,
      journey.status as any,
      'active'
    );

    if (!validation.valid) {
      return NextResponse.json(
        { error: validation.reason },
        { status: 400 }
      );
    }

    // Perform the activation
    const success = await JourneyStateMachine.transitionJourney(
      journeyId,
      journey.status as any,
      'active',
      user_id,
      'Manual activation'
    );

    if (!success) {
      return NextResponse.json(
        { error: 'Failed to activate journey' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      message: `Journey "${journey.name}" activated successfully`,
      status: 'active'
    });

  } catch (error) {
    console.error('Journey activation error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status: 500 }
    );
  }
}

// POST /api/journeys/[id]/pause - Pause a journey
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const journeyId = params.id;
    const body = await request.json();
    const { user_id } = body;

    // Get current journey
    const { data: journey, error: fetchError } = await supabase
      .from('journeys')
      .select('status, name')
      .eq('id', journeyId)
      .single();

    if (fetchError) {
      return NextResponse.json(
        { error: 'Journey not found' },
        { status: 404 }
      );
    }

    // Perform the pause
    const success = await JourneyStateMachine.transitionJourney(
      journeyId,
      journey.status as any,
      'paused',
      user_id,
      'Manual pause'
    );

    if (!success) {
      return NextResponse.json(
        { error: 'Failed to pause journey' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      message: `Journey "${journey.name}" paused successfully`,
      status: 'paused'
    });

  } catch (error) {
    console.error('Journey pause error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status: 500 }
    );
  }
}