import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';

export async function GET(req: NextRequest) {
  try {
    const cookieStore = cookies();
    const supabase = createClient(cookieStore);
    
    // Get the current session
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError || !session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get supplier profile
    const { data: supplier, error: supplierError } = await supabase
      .from('vendors')
      .select('id')
      .eq('user_id', session.user.id)
      .single();

    if (supplierError || !supplier) {
      return NextResponse.json({ error: 'Supplier not found' }, { status: 404 });
    }

    const today = new Date().toISOString().split('T')[0];
    const weekStart = new Date();
    weekStart.setDate(weekStart.getDate() - weekStart.getDay());
    const weekStartStr = weekStart.toISOString().split('T')[0];

    // Get today's events count
    const { data: todayEvents, error: todayError } = await supabase
      .from('timeline_events')
      .select('id')
      .eq('vendor_id', supplier.id)
      .gte('start_time', today + 'T00:00:00')
      .lt('start_time', today + 'T23:59:59');

    // Get upcoming bookings count (next 30 days)
    const thirtyDaysFromNow = new Date();
    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
    const { data: upcomingBookings, error: bookingsError } = await supabase
      .from('supplier_bookings')
      .select('id')
      .eq('vendor_id', supplier.id)
      .gte('booking_date', today)
      .lte('booking_date', thirtyDaysFromNow.toISOString().split('T')[0])
      .in('status', ['draft', 'confirmed']);

    // Get unread notifications count
    const { data: notifications, error: notificationsError } = await supabase
      .from('communications')
      .select('id')
      .eq('recipient_id', session.user.id)
      .eq('status', 'sent');

    // Get active conflicts count
    // Note: This would need a conflicts table in a real implementation
    const activeConflicts = 0; // Mock data

    // Calculate this week's revenue
    const { data: weekRevenue, error: revenueError } = await supabase
      .from('supplier_bookings')
      .select('total_amount')
      .eq('vendor_id', supplier.id)
      .gte('booking_date', weekStartStr)
      .eq('payment_status', 'paid_in_full');

    const thisWeekRevenue = weekRevenue?.reduce((sum, booking) => sum + (booking.total_amount || 0), 0) || 0;

    // Get pending inquiries count
    const { data: pendingInquiries, error: inquiriesError } = await supabase
      .from('supplier_bookings')
      .select('id')
      .eq('vendor_id', supplier.id)
      .eq('status', 'inquiry');

    // Handle any errors
    if (todayError || bookingsError || notificationsError || revenueError || inquiriesError) {
      console.error('Error fetching dashboard stats:', {
        todayError,
        bookingsError,
        notificationsError,
        revenueError,
        inquiriesError
      });
    }

    const stats = {
      today_events: todayEvents?.length || 0,
      upcoming_bookings: upcomingBookings?.length || 0,
      unread_notifications: notifications?.length || 0,
      active_conflicts: activeConflicts,
      this_week_revenue: thisWeekRevenue,
      pending_inquiries: pendingInquiries?.length || 0,
    };

    return NextResponse.json(stats);
  } catch (error) {
    console.error('Error in supplier dashboard stats API:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}