import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    const supabase = await createClient()

    const { data, error } = await supabase
      .from('vendor_categories')
      .select(`
        id,
        name,
        slug,
        display_name,
        description,
        icon,
        color,
        parent_id,
        category_level,
        full_path,
        sort_order,
        is_active,
        is_featured,
        search_keywords,
        seo_title,
        seo_description,
        created_at,
        updated_at,
        parent:vendor_categories!parent_id(
          id,
          name,
          display_name,
          slug
        ),
        subcategories:vendor_categories!parent_id(
          id,
          name,
          display_name,
          slug,
          sort_order
        )
      `)
      .eq('id', id)
      .single()

    if (error) {
      if (error.code === 'PGRST116') {
        return NextResponse.json({ error: 'Category not found' }, { status: 404 })
      }
      throw error
    }

    return NextResponse.json(data)
  } catch (error) {
    console.error('Error fetching vendor category:', error)
    return NextResponse.json(
      { error: 'Failed to fetch vendor category' },
      { status: 500 }
    )
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    const supabase = await createClient()
    const body = await request.json()

    // Check if user is admin
    const { data: user } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: userProfile } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    if (!userProfile || !['admin', 'super_admin'].includes(userProfile.role)) {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 })
    }

    const { data, error } = await supabase
      .from('vendor_categories')
      .update({
        name: body.name,
        slug: body.slug,
        display_name: body.display_name,
        description: body.description,
        icon: body.icon,
        color: body.color,
        parent_id: body.parent_id || null,
        sort_order: body.sort_order,
        is_active: body.is_active,
        is_featured: body.is_featured,
        search_keywords: body.search_keywords,
        seo_title: body.seo_title,
        seo_description: body.seo_description,
        updated_at: new Date().toISOString()
      })
      .eq('id', id)
      .select()
      .single()

    if (error) {
      if (error.code === 'PGRST116') {
        return NextResponse.json({ error: 'Category not found' }, { status: 404 })
      }
      throw error
    }

    return NextResponse.json(data)
  } catch (error) {
    console.error('Error updating vendor category:', error)
    return NextResponse.json(
      { error: 'Failed to update vendor category' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    const supabase = await createClient()

    // Check if user is admin
    const { data: user } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: userProfile } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    if (!userProfile || !['admin', 'super_admin'].includes(userProfile.role)) {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 })
    }

    // Check if category has subcategories
    const { data: subcategories } = await supabase
      .from('vendor_categories')
      .select('id')
      .eq('parent_id', id)

    if (subcategories && subcategories.length > 0) {
      return NextResponse.json(
        { error: 'Cannot delete category with subcategories. Please delete or reassign subcategories first.' },
        { status: 400 }
      )
    }

    // Check if category is in use by vendors
    const { data: vendorsUsing } = await supabase
      .from('suppliers')
      .select('id')
      .or(`primary_category.eq.${id},secondary_categories.cs.{${id}}`)

    if (vendorsUsing && vendorsUsing.length > 0) {
      return NextResponse.json(
        { error: 'Cannot delete category that is in use by vendors. Please reassign vendors first.' },
        { status: 400 }
      )
    }

    const { error } = await supabase
      .from('vendor_categories')
      .delete()
      .eq('id', id)

    if (error) {
      throw error
    }

    return NextResponse.json({ message: 'Category deleted successfully' })
  } catch (error) {
    console.error('Error deleting vendor category:', error)
    return NextResponse.json(
      { error: 'Failed to delete vendor category' },
      { status: 500 }
    )
  }
}