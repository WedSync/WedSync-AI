// WS-130: AI-Powered Photography Library - Photographers API
// Team C Batch 10 Round 1

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { getCurrentUser } from '@/lib/auth/server';

export async function GET(request: NextRequest) {
  try {
    const supabase = createClient();
    const user = await getCurrentUser();

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const location = searchParams.get('location');
    const radius = parseInt(searchParams.get('radius') || '50');
    const minRating = parseFloat(searchParams.get('minRating') || '0');
    const maxPrice = parseInt(searchParams.get('maxPrice') || '999999');
    const availability = searchParams.get('availability');
    const specialties = searchParams.get('specialties')?.split(',') || [];
    const styles = searchParams.get('styles')?.split(',') || [];
    const limit = parseInt(searchParams.get('limit') || '20');
    const offset = parseInt(searchParams.get('offset') || '0');

    // Build query
    let query = supabase
      .from('photographer_profiles')
      .select(`
        *,
        portfolio_galleries(
          id,
          name,
          gallery_type,
          cover_photo_url,
          photos:portfolio_photos(count)
        )
      `);

    // Apply filters
    if (minRating > 0) {
      query = query.gte('rating', minRating);
    }

    if (maxPrice < 999999) {
      query = query.lte('starting_price', maxPrice);
    }

    if (availability) {
      query = query.eq('availability_status', availability);
    }

    if (specialties.length > 0) {
      query = query.overlaps('specialties', specialties);
    }

    if (styles.length > 0) {
      query = query.overlaps('preferred_styles', styles);
    }

    // Location-based filtering would require more complex geometry operations
    // For now, we'll do a simple text match
    if (location) {
      query = query.ilike('location', `%${location}%`);
    }

    // Apply pagination and ordering
    query = query
      .order('rating', { ascending: false })
      .order('review_count', { ascending: false })
      .range(offset, offset + limit - 1);

    const { data: photographers, error } = await query;

    if (error) {
      console.error('Error fetching photographers:', error);
      return NextResponse.json(
        { error: 'Failed to fetch photographers' },
        { status: 500 }
      );
    }

    // Get total count for pagination
    const { count } = await supabase
      .from('photographer_profiles')
      .select('*', { count: 'exact', head: true });

    return NextResponse.json({
      photographers: photographers || [],
      pagination: {
        total: count || 0,
        limit,
        offset,
        hasMore: (offset + limit) < (count || 0)
      }
    });

  } catch (error) {
    console.error('Photographers API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const supabase = createClient();
    const user = await getCurrentUser();

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const {
      name,
      bio,
      specialties,
      location,
      experience_years,
      starting_price,
      contact_email,
      contact_phone,
      instagram_handle,
      website_url,
      preferred_styles,
      equipment_list,
      travel_radius_km
    } = body;

    // Validate required fields
    if (!name || !bio || !location || !contact_email) {
      return NextResponse.json(
        { error: 'Name, bio, location, and contact email are required' },
        { status: 400 }
      );
    }

    // Get user's organization
    const { data: profile } = await supabase
      .from('user_profiles')
      .select('organization_id')
      .eq('id', user.id)
      .single();

    if (!profile?.organization_id) {
      return NextResponse.json(
        { error: 'User organization not found' },
        { status: 400 }
      );
    }

    // Insert new photographer profile
    const { data: photographer, error } = await supabase
      .from('photographer_profiles')
      .insert([{
        name,
        bio,
        specialties: specialties || [],
        location,
        experience_years: experience_years || 0,
        starting_price: starting_price || 0,
        contact_email,
        contact_phone,
        instagram_handle,
        website_url,
        preferred_styles: preferred_styles || [],
        equipment_list: equipment_list || [],
        travel_radius_km: travel_radius_km || 50,
        organization_id: profile.organization_id,
        created_by: user.id
      }])
      .select()
      .single();

    if (error) {
      console.error('Error creating photographer profile:', error);
      return NextResponse.json(
        { error: 'Failed to create photographer profile' },
        { status: 500 }
      );
    }

    return NextResponse.json({ photographer }, { status: 201 });

  } catch (error) {
    console.error('Photographers POST error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}