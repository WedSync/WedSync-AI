// WS-130: AI-Powered Photography Library - Photographer Galleries API
// Team C Batch 10 Round 1

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { getCurrentUser } from '@/lib/auth/server';

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createClient();
    const user = await getCurrentUser();

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const photographerId = params.id;

    // Get photographer details
    const { data: photographer, error: photographerError } = await supabase
      .from('photographer_profiles')
      .select('*')
      .eq('id', photographerId)
      .single();

    if (photographerError || !photographer) {
      return NextResponse.json(
        { error: 'Photographer not found' },
        { status: 404 }
      );
    }

    // Get photographer's galleries with photo counts and sample photos
    const { data: galleries, error: galleriesError } = await supabase
      .from('portfolio_galleries')
      .select(`
        *,
        photos:portfolio_photos(
          id,
          photo_url,
          thumbnail_url,
          title,
          is_featured,
          display_order,
          style_analysis:photo_style_analyses(
            detected_styles,
            color_analysis,
            mood_analysis,
            technical_analysis
          )
        )
      `)
      .eq('photographer_id', photographerId)
      .eq('is_public', true)
      .order('is_featured', { ascending: false })
      .order('created_at', { ascending: false });

    if (galleriesError) {
      console.error('Error fetching galleries:', galleriesError);
      return NextResponse.json(
        { error: 'Failed to fetch galleries' },
        { status: 500 }
      );
    }

    // Process galleries to include photo counts and featured photos
    const processedGalleries = galleries?.map(gallery => ({
      ...gallery,
      photo_count: gallery.photos?.length || 0,
      featured_photos: gallery.photos
        ?.filter((photo: any) => photo.is_featured)
        .sort((a: any, b: any) => a.display_order - b.display_order)
        .slice(0, 6) || [],
      photos: gallery.photos?.sort((a: any, b: any) => a.display_order - b.display_order) || []
    })) || [];

    return NextResponse.json({
      photographer,
      galleries: processedGalleries,
      total_galleries: processedGalleries.length,
      total_photos: processedGalleries.reduce((sum, gallery) => sum + gallery.photo_count, 0)
    });

  } catch (error) {
    console.error('Photographer galleries API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}