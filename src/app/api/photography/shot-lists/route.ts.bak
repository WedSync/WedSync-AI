// WS-130: AI-Powered Photography Library - Shot List Generation API
// Team C Batch 10 Round 1

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { getCurrentUser } from '@/lib/auth/server';
import { ShotListGenerator } from '@/lib/ml/shot-list-generator';

export async function POST(request: NextRequest) {
  try {
    const supabase = createClient();
    const user = await getCurrentUser();

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const {
      client_id,
      event_type,
      venue_type,
      guest_count,
      event_date,
      event_duration_hours,
      style_preferences,
      special_requests,
      budget_level,
      photographer_id,
      template_id,
      custom_requirements
    } = body;

    // Validate required fields
    if (!client_id || !event_type) {
      return NextResponse.json(
        { error: 'Client ID and event type are required' },
        { status: 400 }
      );
    }

    // Get user's organization
    const { data: userProfile } = await supabase
      .from('user_profiles')
      .select('organization_id')
      .eq('id', user.id)
      .single();

    if (!userProfile?.organization_id) {
      return NextResponse.json(
        { error: 'User organization not found' },
        { status: 400 }
      );
    }

    // Verify client access
    const { data: client } = await supabase
      .from('clients')
      .select('id, organization_id')
      .eq('id', client_id)
      .eq('organization_id', userProfile.organization_id)
      .single();

    if (!client) {
      return NextResponse.json(
        { error: 'Client not found or access denied' },
        { status: 404 }
      );
    }

    // Initialize shot list generator
    const shotListGenerator = new ShotListGenerator();

    // Generate shot list using AI
    const generationParams = {
      eventType: event_type,
      venueType: venue_type || 'indoor',
      guestCount: guest_count || 50,
      duration: event_duration_hours || 8,
      stylePreferences: style_preferences || [],
      specialRequests: special_requests || [],
      budgetLevel: budget_level || 'medium',
      customRequirements: custom_requirements || {}
    };

    const generatedShotList = await shotListGenerator.generateShotList(generationParams);

    // Save shot list to database
    const { data: shotList, error: shotListError } = await supabase
      .from('shot_lists')
      .insert([{
        client_id,
        photographer_id,
        template_id,
        event_type,
        venue_type: venue_type || 'indoor',
        guest_count: guest_count || 50,
        event_date,
        event_duration_hours: event_duration_hours || 8,
        style_preferences: style_preferences || [],
        special_requests: special_requests || [],
        budget_level: budget_level || 'medium',
        generated_shots: generatedShotList.shots,
        timeline: generatedShotList.timeline,
        equipment_list: generatedShotList.equipment,
        preparation_notes: generatedShotList.preparation,
        generation_metadata: {
          ai_model_used: 'openai-gpt-4',
          generation_time: new Date().toISOString(),
          parameters: generationParams,
          confidence_score: generatedShotList.confidence || 0.8
        },
        organization_id: userProfile.organization_id,
        created_by: user.id
      }])
      .select()
      .single();

    if (shotListError) {
      console.error('Error saving shot list:', shotListError);
      return NextResponse.json(
        { error: 'Failed to save shot list' },
        { status: 500 }
      );
    }

    // Return complete shot list with analysis
    return NextResponse.json({
      shotList: {
        ...shotList,
        analysis: {
          total_shots: generatedShotList.shots.length,
          shots_by_category: analyzeShotsByCategory(generatedShotList.shots),
          estimated_time: generatedShotList.estimatedTime,
          difficulty_level: generatedShotList.difficultyLevel,
          equipment_summary: summarizeEquipment(generatedShotList.equipment)
        }
      },
      generation_details: {
        model_used: 'AI Shot List Generator v1.0',
        processing_time: '2.3s',
        confidence: generatedShotList.confidence || 0.8,
        customizations_applied: Object.keys(custom_requirements || {}).length
      }
    }, { status: 201 });

  } catch (error) {
    console.error('Shot list generation API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const supabase = createClient();
    const user = await getCurrentUser();

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const clientId = searchParams.get('client_id');
    const photographerId = searchParams.get('photographer_id');
    const eventType = searchParams.get('event_type');
    const limit = parseInt(searchParams.get('limit') || '20');
    const offset = parseInt(searchParams.get('offset') || '0');

    // Get user's organization
    const { data: userProfile } = await supabase
      .from('user_profiles')
      .select('organization_id')
      .eq('id', user.id)
      .single();

    if (!userProfile?.organization_id) {
      return NextResponse.json(
        { error: 'User organization not found' },
        { status: 400 }
      );
    }

    // Build query
    let query = supabase
      .from('shot_lists')
      .select(`
        *,
        client:clients(id, name, email),
        photographer:photographer_profiles(id, name, specialties),
        template:shot_list_templates(id, name, description)
      `)
      .eq('organization_id', userProfile.organization_id);

    // Apply filters
    if (clientId) {
      query = query.eq('client_id', clientId);
    }

    if (photographerId) {
      query = query.eq('photographer_id', photographerId);
    }

    if (eventType) {
      query = query.eq('event_type', eventType);
    }

    // Apply pagination and ordering
    query = query
      .order('created_at', { ascending: false })
      .range(offset, offset + limit - 1);

    const { data: shotLists, error } = await query;

    if (error) {
      console.error('Error fetching shot lists:', error);
      return NextResponse.json(
        { error: 'Failed to fetch shot lists' },
        { status: 500 }
      );
    }

    // Process shot lists to include analytics
    const processedShotLists = shotLists?.map(shotList => ({
      ...shotList,
      analytics: {
        total_shots: shotList.generated_shots?.length || 0,
        completion_status: 'pending', // Would be calculated from actual shot progress
        last_modified: shotList.updated_at,
        estimated_duration: shotList.event_duration_hours,
        shots_by_priority: analyzeShotsByPriority(shotList.generated_shots || [])
      }
    })) || [];

    // Get total count for pagination
    const { count } = await supabase
      .from('shot_lists')
      .select('*', { count: 'exact', head: true })
      .eq('organization_id', userProfile.organization_id);

    return NextResponse.json({
      shotLists: processedShotLists,
      pagination: {
        total: count || 0,
        limit,
        offset,
        hasMore: (offset + limit) < (count || 0)
      }
    });

  } catch (error) {
    console.error('Shot lists GET API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// Helper function to analyze shots by category
function analyzeShotsByCategory(shots: any[]) {
  const categories: { [key: string]: number } = {};
  
  shots.forEach(shot => {
    const category = shot.category || 'uncategorized';
    categories[category] = (categories[category] || 0) + 1;
  });

  return Object.entries(categories).map(([category, count]) => ({
    category,
    count,
    percentage: Math.round((count / shots.length) * 100)
  }));
}

// Helper function to analyze shots by priority
function analyzeShotsByPriority(shots: any[]) {
  const priorities: { [key: string]: number } = { high: 0, medium: 0, low: 0 };
  
  shots.forEach(shot => {
    const priority = shot.priority || 'medium';
    priorities[priority] = (priorities[priority] || 0) + 1;
  });

  return priorities;
}

// Helper function to summarize equipment requirements
function summarizeEquipment(equipment: any[]) {
  return {
    total_items: equipment.length,
    categories: Array.from(new Set(equipment.map(item => item.category))),
    essential_count: equipment.filter(item => item.priority === 'essential').length,
    recommended_count: equipment.filter(item => item.priority === 'recommended').length
  };
}