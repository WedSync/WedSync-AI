import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { z } from 'zod'
import jwt from 'jsonwebtoken'

// =====================================================
// VALIDATION SCHEMAS
// =====================================================

const scheduleAccessSchema = z.object({
  timeline_id: z.string().uuid().optional(),
  access_token: z.string().optional(),
  format: z.enum(['json', 'pdf', 'ics']).default('json')
})

// =====================================================
// HELPER FUNCTIONS
// =====================================================

async function verifySupplierAccess(
  supabase: any,
  supplierId: string,
  userId: string | null,
  accessToken?: string
) {
  // If access token is provided, verify it
  if (accessToken) {
    try {
      const decoded = jwt.verify(accessToken, process.env.JWT_SECRET!) as any
      if (decoded.supplier_id !== supplierId) {
        throw new Error('FORBIDDEN: Invalid access token for supplier')
      }
      return { 
        supplier_id: supplierId, 
        access_type: 'token',
        timeline_id: decoded.timeline_id 
      }
    } catch (error) {
      throw new Error('FORBIDDEN: Invalid or expired access token')
    }
  }

  // Otherwise require authenticated user
  if (!userId) {
    throw new Error('UNAUTHORIZED: Authentication or access token required')
  }

  const { data: profile, error: profileError } = await supabase
    .from('user_profiles')
    .select('organization_id')
    .eq('user_id', userId)
    .single()

  if (profileError || !profile?.organization_id) {
    throw new Error('UNAUTHORIZED: User organization not found')
  }

  // Verify supplier belongs to user's organization
  const { data: supplier, error: supplierError } = await supabase
    .from('suppliers')
    .select('id, organization_id, business_name')
    .eq('id', supplierId)
    .eq('organization_id', profile.organization_id)
    .single()

  if (supplierError || !supplier) {
    throw new Error('FORBIDDEN: Supplier not found or access denied')
  }

  return { 
    supplier_id: supplierId, 
    access_type: 'authenticated',
    organization_id: profile.organization_id 
  }
}

async function getSupplierSchedules(
  supabase: any,
  supplierId: string,
  timelineId?: string
) {
  let query = supabase
    .from('supplier_schedules')
    .select(`
      id,
      timeline_id,
      schedule_data,
      status,
      confirmation_status,
      confirmed_at,
      confirmed_by,
      generated_at,
      updated_at,
      access_token,
      wedding_timelines:timeline_id (
        id,
        timeline_name,
        wedding_date,
        organization_id
      )
    `)
    .eq('supplier_id', supplierId)

  if (timelineId) {
    query = query.eq('timeline_id', timelineId)
  }

  const { data: schedules, error } = await query.order('generated_at', { ascending: false })

  if (error) {
    throw new Error('Failed to fetch supplier schedules')
  }

  return schedules || []
}

async function generateScheduleExport(
  scheduleData: any,
  format: string,
  supplierInfo: any
) {
  const schedule = scheduleData.schedule_data || scheduleData

  switch (format) {
    case 'ics':
      return generateICSExport(schedule, supplierInfo)
    case 'pdf':
      // TODO: Implement PDF generation
      return { 
        error: 'PDF export not yet implemented',
        fallback_format: 'json',
        data: schedule
      }
    default:
      return schedule
  }
}

function generateICSExport(schedule: any, supplierInfo: any) {
  const events = schedule.schedule_items || []
  
  let icsContent = [
    'BEGIN:VCALENDAR',
    'VERSION:2.0',
    'PRODID:-//WedSync//Supplier Schedule//EN',
    'CALSCALE:GREGORIAN',
    'METHOD:PUBLISH',
    `X-WR-CALNAME:${schedule.supplier_name} - Wedding Schedule`,
    'X-WR-CALDESC:Wedding day schedule for supplier'
  ]

  events.forEach((event: any, index: number) => {
    const startDate = new Date(event.scheduled_arrival)
    const endDate = new Date(event.scheduled_departure)
    
    icsContent.push(
      'BEGIN:VEVENT',
      `UID:wedsync-${schedule.supplier_id}-${event.event_id}-${index}@wedsync.app`,
      `DTSTART:${formatICSDate(startDate)}`,
      `DTEND:${formatICSDate(endDate)}`,
      `SUMMARY:${escapeICS(event.event_title)}`,
      `DESCRIPTION:${escapeICS(event.event_description || event.notes || '')}`,
      `LOCATION:${escapeICS(event.location || '')}`,
      'STATUS:TENTATIVE',
      `CREATED:${formatICSDate(new Date())}`,
      `LAST-MODIFIED:${formatICSDate(new Date())}`,
      'END:VEVENT'
    )
  })

  icsContent.push('END:VCALENDAR')
  
  return {
    content: icsContent.join('\r\n'),
    contentType: 'text/calendar',
    filename: `${schedule.supplier_name.replace(/[^a-zA-Z0-9]/g, '_')}_schedule.ics`
  }
}

function formatICSDate(date: Date): string {
  return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z'
}

function escapeICS(text: string): string {
  return text.replace(/[,;\\]/g, '\\$&').replace(/\n/g, '\\n')
}

// =====================================================
// GET /api/suppliers/[id]/schedule - Get supplier schedule
// =====================================================

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = await createClient()
    
    // Get query parameters
    const searchParams = request.nextUrl.searchParams
    const timelineId = searchParams.get('timeline_id')
    const accessToken = searchParams.get('access_token')
    const format = (searchParams.get('format') || 'json') as 'json' | 'pdf' | 'ics'

    // Get authenticated user (if any)
    const { data: user } = await supabase.auth.getUser()

    // Verify access to supplier schedules
    const accessInfo = await verifySupplierAccess(
      supabase, 
      params.id, 
      user?.id || null, 
      accessToken || undefined
    )

    // Get supplier information
    const { data: supplier, error: supplierError } = await supabase
      .from('suppliers')
      .select('id, business_name, primary_category, email, phone')
      .eq('id', params.id)
      .single()

    if (supplierError || !supplier) {
      throw new Error('Supplier not found')
    }

    // Get supplier schedules
    const schedules = await getSupplierSchedules(
      supabase,
      params.id,
      timelineId || accessInfo.timeline_id
    )

    if (schedules.length === 0) {
      return NextResponse.json({
        success: true,
        data: {
          supplier_id: params.id,
          supplier_name: supplier.business_name,
          schedules: [],
          message: 'No schedules found for this supplier'
        }
      })
    }

    // If specific format requested and single schedule
    if (format !== 'json' && schedules.length === 1) {
      const exportResult = await generateScheduleExport(
        schedules[0],
        format,
        supplier
      )

      if (exportResult.error) {
        return NextResponse.json({
          success: false,
          error: exportResult.error,
          fallback_data: exportResult.data
        })
      }

      if (format === 'ics') {
        return new NextResponse(exportResult.content, {
          status: 200,
          headers: {
            'Content-Type': exportResult.contentType,
            'Content-Disposition': `attachment; filename="${exportResult.filename}"`
          }
        })
      }
    }

    // Return JSON response
    const responseData = schedules.map(schedule => ({
      id: schedule.id,
      timeline_id: schedule.timeline_id,
      timeline_name: schedule.wedding_timelines?.timeline_name,
      wedding_date: schedule.wedding_timelines?.wedding_date,
      schedule_data: schedule.schedule_data,
      status: schedule.status,
      confirmation_status: schedule.confirmation_status,
      confirmed_at: schedule.confirmed_at,
      generated_at: schedule.generated_at,
      updated_at: schedule.updated_at
    }))

    return NextResponse.json({
      success: true,
      data: {
        supplier_id: params.id,
        supplier_name: supplier.business_name,
        supplier_category: supplier.primary_category,
        total_schedules: schedules.length,
        schedules: responseData,
        access_info: {
          type: accessInfo.access_type,
          authenticated_user: !!user
        }
      }
    })

  } catch (error) {
    console.error('Supplier schedule get error:', error)
    const status = error instanceof Error && error.message.startsWith('UNAUTHORIZED') ? 401 :
                   error instanceof Error && error.message.startsWith('FORBIDDEN') ? 403 : 500
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status }
    )
  }
}

// =====================================================
// PATCH /api/suppliers/[id]/schedule - Update schedule status
// =====================================================

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = await createClient()
    const body = await request.json()
    
    const updateSchema = z.object({
      timeline_id: z.string().uuid(),
      status: z.enum(['generated', 'sent', 'viewed', 'confirmed', 'declined']).optional(),
      confirmation_status: z.enum(['pending', 'confirmed', 'declined', 'partial']).optional(),
      supplier_notes: z.string().optional(),
      access_token: z.string().optional()
    })

    const validatedData = updateSchema.parse(body)

    // Get authenticated user (if any)
    const { data: user } = await supabase.auth.getUser()

    // Verify access to supplier schedules
    await verifySupplierAccess(
      supabase, 
      params.id, 
      user?.id || null, 
      validatedData.access_token
    )

    // Update the schedule
    const updateData: any = {
      updated_at: new Date().toISOString()
    }

    if (validatedData.status) {
      updateData.status = validatedData.status
      if (validatedData.status === 'viewed') {
        updateData.viewed_at = new Date().toISOString()
      }
    }

    if (validatedData.confirmation_status) {
      updateData.confirmation_status = validatedData.confirmation_status
      if (validatedData.confirmation_status === 'confirmed') {
        updateData.confirmed_at = new Date().toISOString()
        updateData.confirmed_by = user?.id || 'supplier'
      }
    }

    if (validatedData.supplier_notes) {
      updateData.supplier_notes = validatedData.supplier_notes
    }

    const { data: updatedSchedule, error: updateError } = await supabase
      .from('supplier_schedules')
      .update(updateData)
      .eq('supplier_id', params.id)
      .eq('timeline_id', validatedData.timeline_id)
      .select(`
        *,
        wedding_timelines:timeline_id (
          timeline_name,
          wedding_date
        )
      `)
      .single()

    if (updateError) {
      console.error('Error updating supplier schedule:', updateError)
      return NextResponse.json(
        { error: 'Failed to update schedule' },
        { status: 500 }
      )
    }

    return NextResponse.json({
      success: true,
      data: updatedSchedule,
      message: 'Schedule updated successfully'
    })

  } catch (error) {
    console.error('Supplier schedule update error:', error)
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validation failed', details: error.errors },
        { status: 400 }
      )
    }
    
    const status = error instanceof Error && error.message.startsWith('UNAUTHORIZED') ? 401 :
                   error instanceof Error && error.message.startsWith('FORBIDDEN') ? 403 : 500
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status }
    )
  }
}

export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'