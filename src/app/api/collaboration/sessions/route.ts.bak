import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { rateLimit } from '@/lib/rate-limit';
import { z } from 'zod';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

// Validation schemas
const createSessionSchema = z.object({
  document_id: z.string().uuid(),
  document_type: z.enum(['form', 'timeline', 'questionnaire', 'contract']),
  title: z.string().min(1).max(255),
  permissions: z.object({
    read: z.array(z.string().uuid()).optional(),
    write: z.array(z.string().uuid()).optional(),
    admin: z.array(z.string().uuid()).optional(),
  }).optional(),
});

const updateSessionSchema = z.object({
  status: z.enum(['active', 'paused', 'ended']).optional(),
  title: z.string().min(1).max(255).optional(),
  end_reason: z.string().max(500).optional(),
});

async function getAuthenticatedUser(request: NextRequest) {
  const authorization = request.headers.get('Authorization');
  if (!authorization) {
    throw new Error('Missing authorization header');
  }

  const token = authorization.replace('Bearer ', '');
  const { data, error } = await supabase.auth.getUser(token);
  
  if (error || !data.user) {
    throw new Error('Invalid token');
  }

  return data.user;
}

// POST /api/collaboration/sessions - Create new collaboration session
export async function POST(request: NextRequest) {
  try {
    // Rate limiting
    const identifier = request.ip || 'anonymous';
    const rateLimitResult = await rateLimit(identifier, { windowMs: 60000, max: 10 });
    
    if (!rateLimitResult.success) {
      return NextResponse.json(
        { success: false, error: 'Rate limit exceeded' },
        { status: 429 }
      );
    }

    // Authentication
    const user = await getAuthenticatedUser(request);
    
    // Parse and validate request body
    const body = await request.json();
    const validatedData = createSessionSchema.parse(body);

    // Create collaboration session
    const { data: session, error: sessionError } = await supabase
      .from('collaboration_sessions')
      .insert({
        document_id: validatedData.document_id,
        document_type: validatedData.document_type,
        title: validatedData.title,
        status: 'active',
        created_by: user.id,
        organization_id: user.user_metadata?.organization_id,
        permissions: validatedData.permissions || {
          read: [user.id],
          write: [user.id],
          admin: [user.id],
        },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .select()
      .single();

    if (sessionError) {
      console.error('Session creation error:', sessionError);
      return NextResponse.json(
        { success: false, error: 'Failed to create session' },
        { status: 500 }
      );
    }

    // Add creator as first participant
    await supabase
      .from('collaboration_participants')
      .insert({
        session_id: session.id,
        user_id: user.id,
        role: 'admin',
        joined_at: new Date().toISOString(),
      });

    return NextResponse.json(
      { success: true, data: session },
      { status: 201 }
    );

  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'Validation error',
          details: error.errors 
        },
        { status: 400 }
      );
    }

    if (error instanceof Error && error.message.includes('token')) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    console.error('Session creation error:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// GET /api/collaboration/sessions - Get user's collaboration sessions
export async function GET(request: NextRequest) {
  try {
    // Authentication
    const user = await getAuthenticatedUser(request);
    
    // Parse query parameters
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = Math.min(parseInt(searchParams.get('limit') || '10'), 100);
    const status = searchParams.get('status');
    const documentType = searchParams.get('document_type');
    
    const offset = (page - 1) * limit;

    // Build query
    let query = supabase
      .from('collaboration_sessions')
      .select(`
        id,
        document_id,
        document_type,
        title,
        status,
        created_at,
        updated_at,
        permissions,
        collaboration_participants!inner(user_id)
      `)
      .eq('collaboration_participants.user_id', user.id);

    // Apply filters
    if (status) {
      query = query.eq('status', status);
    }
    
    if (documentType) {
      query = query.eq('document_type', documentType);
    }

    // Execute query with pagination
    const { data: sessions, error, count } = await query
      .range(offset, offset + limit - 1)
      .order('updated_at', { ascending: false });

    if (error) {
      console.error('Sessions fetch error:', error);
      return NextResponse.json(
        { success: false, error: 'Failed to fetch sessions' },
        { status: 500 }
      );
    }

    // Calculate pagination info
    const totalPages = count ? Math.ceil(count / limit) : 0;
    
    return NextResponse.json({
      success: true,
      data: sessions || [],
      pagination: {
        page,
        limit,
        total: count || 0,
        totalPages,
        hasNext: page < totalPages,
        hasPrev: page > 1,
      },
    });

  } catch (error) {
    if (error instanceof Error && error.message.includes('token')) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    console.error('Sessions fetch error:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// PUT /api/collaboration/sessions/[id] - Update session
export async function PUT(request: NextRequest) {
  try {
    // Authentication
    const user = await getAuthenticatedUser(request);
    
    // Extract session ID from URL
    const url = new URL(request.url);
    const sessionId = url.pathname.split('/').pop();
    
    if (!sessionId) {
      return NextResponse.json(
        { success: false, error: 'Session ID is required' },
        { status: 400 }
      );
    }

    // Validate UUID format
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(sessionId)) {
      return NextResponse.json(
        { success: false, error: 'Invalid session ID format' },
        { status: 400 }
      );
    }

    // Parse and validate request body
    const body = await request.json();
    const validatedData = updateSessionSchema.parse(body);

    // Check permissions
    const { data: hasPermission } = await supabase
      .rpc('user_has_session_permission', {
        session_uuid: sessionId,
        user_uuid: user.id,
        required_permission: 'admin'
      });

    if (!hasPermission) {
      return NextResponse.json(
        { success: false, error: 'Insufficient permissions' },
        { status: 403 }
      );
    }

    // Update session
    const { data: session, error: updateError } = await supabase
      .from('collaboration_sessions')
      .update({
        ...validatedData,
        updated_at: new Date().toISOString(),
        ...(validatedData.status === 'ended' && { ended_at: new Date().toISOString() }),
      })
      .eq('id', sessionId)
      .select()
      .single();

    if (updateError) {
      console.error('Session update error:', updateError);
      return NextResponse.json(
        { success: false, error: 'Failed to update session' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      data: session,
    });

  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'Validation error',
          details: error.errors 
        },
        { status: 400 }
      );
    }

    if (error instanceof Error && error.message.includes('token')) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    console.error('Session update error:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// DELETE /api/collaboration/sessions/[id] - Delete session
export async function DELETE(request: NextRequest) {
  try {
    // Authentication
    const user = await getAuthenticatedUser(request);
    
    // Extract session ID from URL
    const url = new URL(request.url);
    const sessionId = url.pathname.split('/').pop();
    
    if (!sessionId) {
      return NextResponse.json(
        { success: false, error: 'Session ID is required' },
        { status: 400 }
      );
    }

    // Check permissions
    const { data: hasPermission } = await supabase
      .rpc('user_has_session_permission', {
        session_uuid: sessionId,
        user_uuid: user.id,
        required_permission: 'admin'
      });

    if (!hasPermission) {
      return NextResponse.json(
        { success: false, error: 'Insufficient permissions' },
        { status: 403 }
      );
    }

    // Soft delete session
    const { error: deleteError } = await supabase
      .from('collaboration_sessions')
      .update({
        status: 'ended',
        ended_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .eq('id', sessionId);

    if (deleteError) {
      console.error('Session deletion error:', deleteError);
      return NextResponse.json(
        { success: false, error: 'Failed to delete session' },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { success: true, message: 'Session deleted successfully' },
      { status: 200 }
    );

  } catch (error) {
    if (error instanceof Error && error.message.includes('token')) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    console.error('Session deletion error:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}