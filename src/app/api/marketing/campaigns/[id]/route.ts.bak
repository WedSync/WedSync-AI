import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { cookies } from 'next/headers';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const supabase = createServerComponentClient({ cookies });
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get user's organization
    const { data: profile } = await supabase
      .from('user_profiles')
      .select('organization_id')
      .eq('id', session.user.id)
      .single();

    if (!profile) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    const { data: campaign, error } = await supabase
      .from('marketing_campaigns')
      .select(`
        *,
        created_by_user:auth.users!marketing_campaigns_created_by_fkey(email),
        campaign_steps:marketing_campaign_steps(*),
        executions:marketing_campaign_executions(
          id,
          status,
          steps_completed,
          total_steps,
          started_at,
          completed_at,
          client:clients(name, email)
        )
      `)
      .eq('id', id)
      .eq('organization_id', profile.organization_id)
      .single();

    if (error) {
      console.error('Error fetching campaign:', error);
      if (error.code === 'PGRST116') {
        return NextResponse.json({ error: 'Campaign not found' }, { status: 404 });
      }
      return NextResponse.json({ error: 'Failed to fetch campaign' }, { status: 500 });
    }

    return NextResponse.json({ campaign });

  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const supabase = createServerComponentClient({ cookies });
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get user's organization
    const { data: profile } = await supabase
      .from('user_profiles')
      .select('organization_id')
      .eq('id', session.user.id)
      .single();

    if (!profile) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    const body = await request.json();
    const {
      name,
      description,
      campaign_type,
      status,
      target_audience,
      segmentation_rules,
      trigger_conditions,
      schedule_settings,
      workflow_config,
      enable_ab_testing
    } = body;

    // Validate campaign type if provided
    if (campaign_type) {
      const validTypes = ['email', 'sms', 'mixed', 'drip', 'trigger'];
      if (!validTypes.includes(campaign_type)) {
        return NextResponse.json(
          { error: 'Invalid campaign type' },
          { status: 400 }
        );
      }
    }

    // Validate status if provided
    if (status) {
      const validStatuses = ['draft', 'active', 'paused', 'completed', 'cancelled'];
      if (!validStatuses.includes(status)) {
        return NextResponse.json(
          { error: 'Invalid status' },
          { status: 400 }
        );
      }
    }

    // Build update object, only including provided fields
    const updateData: any = {};
    if (name !== undefined) updateData.name = name;
    if (description !== undefined) updateData.description = description;
    if (campaign_type !== undefined) updateData.campaign_type = campaign_type;
    if (status !== undefined) updateData.status = status;
    if (target_audience !== undefined) updateData.target_audience = target_audience;
    if (segmentation_rules !== undefined) updateData.segmentation_rules = segmentation_rules;
    if (trigger_conditions !== undefined) updateData.trigger_conditions = trigger_conditions;
    if (schedule_settings !== undefined) updateData.schedule_settings = schedule_settings;
    if (workflow_config !== undefined) updateData.workflow_config = workflow_config;
    if (enable_ab_testing !== undefined) updateData.enable_ab_testing = enable_ab_testing;

    // Set timestamps based on status changes
    if (status === 'active' && updateData.status === 'active') {
      updateData.started_at = new Date().toISOString();
    } else if (['completed', 'cancelled'].includes(status)) {
      updateData.ended_at = new Date().toISOString();
    }

    const { data: campaign, error } = await supabase
      .from('marketing_campaigns')
      .update(updateData)
      .eq('id', id)
      .eq('organization_id', profile.organization_id)
      .select()
      .single();

    if (error) {
      console.error('Error updating campaign:', error);
      if (error.code === 'PGRST116') {
        return NextResponse.json({ error: 'Campaign not found' }, { status: 404 });
      }
      return NextResponse.json({ error: 'Failed to update campaign' }, { status: 500 });
    }

    return NextResponse.json({ campaign });

  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const supabase = createServerComponentClient({ cookies });
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get user's organization
    const { data: profile } = await supabase
      .from('user_profiles')
      .select('organization_id')
      .eq('id', session.user.id)
      .single();

    if (!profile) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });
    }

    // Check if campaign exists and belongs to user's organization
    const { data: campaign, error: fetchError } = await supabase
      .from('marketing_campaigns')
      .select('id, status')
      .eq('id', id)
      .eq('organization_id', profile.organization_id)
      .single();

    if (fetchError || !campaign) {
      return NextResponse.json({ error: 'Campaign not found' }, { status: 404 });
    }

    // Prevent deletion of active campaigns
    if (campaign.status === 'active') {
      return NextResponse.json(
        { error: 'Cannot delete active campaign. Please pause or complete it first.' },
        { status: 400 }
      );
    }

    const { error } = await supabase
      .from('marketing_campaigns')
      .delete()
      .eq('id', id)
      .eq('organization_id', profile.organization_id);

    if (error) {
      console.error('Error deleting campaign:', error);
      return NextResponse.json({ error: 'Failed to delete campaign' }, { status: 500 });
    }

    return NextResponse.json({ message: 'Campaign deleted successfully' });

  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}