import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { Database } from '@/types/database'

type Conversation = Database['public']['Tables']['conversations']['Row']
type ConversationInsert = Database['public']['Tables']['conversations']['Insert']

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient()
    const { searchParams } = new URL(request.url)
    const organizationId = searchParams.get('organization_id')
    const userId = searchParams.get('user_id')
    const userType = searchParams.get('user_type') as 'client' | 'vendor'
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '20')
    const offset = (page - 1) * limit

    if (!organizationId || !userId || !userType) {
      return NextResponse.json(
        { error: 'Missing required parameters' },
        { status: 400 }
      )
    }

    // Get user to verify access
    const { data: user } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // Build query based on user type
    let query = supabase
      .from('conversations')
      .select(`
        *,
        client:clients!conversations_client_id_fkey (
          id,
          first_name,
          last_name,
          email,
          wedding_date
        ),
        vendor:suppliers!conversations_vendor_id_fkey (
          id,
          business_name,
          email,
          primary_category
        )
      `)
      .eq('organization_id', organizationId)
      .order('last_message_at', { ascending: false })
      .range(offset, offset + limit - 1)

    if (userType === 'client') {
      query = query.eq('client_id', userId)
    } else {
      query = query.eq('vendor_id', userId)
    }

    const { data: conversations, error } = await query

    if (error) {
      console.error('Error fetching conversations:', error)
      return NextResponse.json(
        { error: 'Failed to fetch conversations' },
        { status: 500 }
      )
    }

    return NextResponse.json({
      conversations: conversations || [],
      page,
      limit,
      total: conversations?.length || 0
    })
  } catch (error) {
    console.error('Error in conversations GET:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient()
    const body = await request.json()
    
    const {
      client_id,
      vendor_id,
      organization_id,
      subject,
      initial_message
    } = body

    if (!client_id || !vendor_id || !organization_id) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Get user to verify access
    const { data: user } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // Check if conversation already exists
    const { data: existingConversation } = await supabase
      .from('conversations')
      .select('id')
      .eq('client_id', client_id)
      .eq('vendor_id', vendor_id)
      .eq('organization_id', organization_id)
      .single()

    if (existingConversation) {
      return NextResponse.json({
        conversation: existingConversation,
        existed: true
      })
    }

    // Create new conversation
    const conversationData: ConversationInsert = {
      client_id,
      vendor_id,
      organization_id,
      subject,
      status: 'active',
      last_message_at: new Date().toISOString(),
      unread_count_client: 0,
      unread_count_vendor: 0,
      client_typing: false,
      vendor_typing: false,
    }

    const { data: conversation, error: conversationError } = await supabase
      .from('conversations')
      .insert(conversationData)
      .select()
      .single()

    if (conversationError) {
      console.error('Error creating conversation:', conversationError)
      return NextResponse.json(
        { error: 'Failed to create conversation' },
        { status: 500 }
      )
    }

    // If there's an initial message, create it
    if (initial_message && conversation) {
      const { error: messageError } = await supabase
        .from('messages')
        .insert({
          conversation_id: conversation.id,
          sender_id: user.id,
          sender_type: 'vendor', // Assume vendor is creating conversation for now
          sender_name: 'System',
          recipient_id: client_id,
          recipient_type: 'client',
          organization_id,
          message_type: 'text',
          content: initial_message,
          is_read: false,
          is_system_message: false,
        })

      if (messageError) {
        console.error('Error creating initial message:', messageError)
      }
    }

    return NextResponse.json({
      conversation,
      existed: false
    })
  } catch (error) {
    console.error('Error in conversations POST:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}