/**
 * WS-223 Content Template Management API
 * Team B - Template management and replication system
 * 
 * Features:
 * - Create and manage content templates with dynamic schemas
 * - Template replication and customization
 * - System-wide and organization-specific templates
 * - Template marketplace functionality
 * - Variable substitution and content generation
 */

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/database';
import { z } from 'zod';

const supabase = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL || (() => { throw new Error("Missing environment variable: NEXT_PUBLIC_SUPABASE_URL") })(),
  process.env.SUPABASE_SERVICE_ROLE_KEY || (() => { throw new Error("Missing environment variable: SUPABASE_SERVICE_ROLE_KEY") })()
);

// Validation schemas
const TemplateCreateSchema = z.object({
  name: z.string().min(1).max(255),
  description: z.string().optional(),
  content_type: z.enum([
    'article', 'page', 'email_template', 'form_description', 
    'journey_step', 'newsletter', 'landing_page', 'blog_post',
    'faq', 'legal_document', 'privacy_policy', 'terms_of_service'
  ]),
  template_schema: z.record(z.any()),
  default_content: z.record(z.any()),
  category_id: z.string().uuid().optional(),
  tags: z.array(z.string()).optional(),
  is_premium: z.boolean().default(false),
  organization_id: z.string().uuid(),
});

const TemplateReplicateSchema = z.object({
  source_template_id: z.string().uuid(),
  name: z.string().min(1).max(255),
  description: z.string().optional(),
  customizations: z.record(z.any()).optional(),
  organization_id: z.string().uuid(),
});

const TemplateGenerateContentSchema = z.object({
  template_id: z.string().uuid(),
  variables: z.record(z.any()),
  organization_id: z.string().uuid(),
  create_content: z.boolean().default(false),
  content_title: z.string().optional(),
});

// Helper functions
function validateTemplateSchema(schema: any): { valid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  if (!schema || typeof schema !== 'object') {
    errors.push('Template schema must be an object');
    return { valid: false, errors };
  }
  
  if (!schema.fields || !Array.isArray(schema.fields)) {
    errors.push('Template schema must have a fields array');
    return { valid: false, errors };
  }
  
  for (const field of schema.fields) {
    if (!field.name || typeof field.name !== 'string') {
      errors.push(`Field is missing required 'name' property`);
    }
    
    if (!field.type || typeof field.type !== 'string') {
      errors.push(`Field '${field.name}' is missing required 'type' property`);
    }
    
    if (!['text', 'textarea', 'select', 'multiselect', 'checkbox', 'radio', 'date', 'number', 'email', 'url', 'rich_text'].includes(field.type)) {
      errors.push(`Field '${field.name}' has invalid type '${field.type}'`);
    }
  }
  
  return { valid: errors.length === 0, errors };
}

function processTemplateVariables(content: string, variables: Record<string, any>): string {
  let processedContent = content;
  
  // Replace template variables in format {{variable_name}}
  for (const [key, value] of Object.entries(variables)) {
    const regex = new RegExp(`{{\\s*${key}\\s*}}`, 'g');
    processedContent = processedContent.replace(regex, String(value || ''));
  }
  
  // Handle conditional blocks {{#if variable}}...{{/if}}
  processedContent = processedContent.replace(
    /{{#if\s+(\w+)}}(.*?){{\/if}}/gs,
    (match, variable, content) => {
      return variables[variable] ? content : '';
    }
  );
  
  // Handle loops {{#each array}}...{{/each}}
  processedContent = processedContent.replace(
    /{{#each\s+(\w+)}}(.*?){{\/each}}/gs,
    (match, variable, template) => {
      const array = variables[variable];
      if (!Array.isArray(array)) return '';
      
      return array.map((item, index) => {
        let itemContent = template;
        // Replace {{this}} with current item
        itemContent = itemContent.replace(/{{this}}/g, String(item));
        // Replace {{@index}} with current index
        itemContent = itemContent.replace(/{{@index}}/g, String(index));
        // Replace object properties if item is an object
        if (typeof item === 'object' && item !== null) {
          for (const [prop, val] of Object.entries(item)) {
            itemContent = itemContent.replace(
              new RegExp(`{{${prop}}}`, 'g'),
              String(val || '')
            );
          }
        }
        return itemContent;
      }).join('');
    }
  );
  
  return processedContent;
}

/**
 * GET /api/content/templates - List content templates
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    
    const page = parseInt(searchParams.get('page') || '1');
    const limit = Math.min(parseInt(searchParams.get('limit') || '20'), 100);
    const offset = (page - 1) * limit;
    
    const organizationId = searchParams.get('organization_id');
    const contentType = searchParams.get('content_type');
    const categoryId = searchParams.get('category_id');
    const includeSystem = searchParams.get('include_system') !== 'false';
    const isPremium = searchParams.get('is_premium');
    const search = searchParams.get('search');
    
    if (!organizationId) {
      return NextResponse.json(
        { error: 'Organization ID is required' },
        { status: 400 }
      );
    }
    
    // Build query
    let query = supabase
      .from('content_templates')
      .select(`
        *,
        content_categories(name, slug, color_hex)
      `)
      .eq('is_active', true)
      .order('usage_count', { ascending: false })
      .range(offset, offset + limit - 1);
    
    // Filter by organization or include system templates
    if (includeSystem) {
      query = query.or(`organization_id.eq.${organizationId},is_system_template.eq.true`);
    } else {
      query = query.eq('organization_id', organizationId);
    }
    
    // Apply additional filters
    if (contentType) {
      query = query.eq('content_type', contentType);
    }
    
    if (categoryId) {
      query = query.eq('category_id', categoryId);
    }
    
    if (isPremium !== null) {
      query = query.eq('is_premium', isPremium === 'true');
    }
    
    if (search) {
      query = query.or(`name.ilike.%${search}%,description.ilike.%${search}%`);
    }
    
    const { data: templates, error } = await query;
    
    if (error) {
      console.error('Templates fetch error:', error);
      return NextResponse.json(
        { error: 'Failed to fetch templates' },
        { status: 500 }
      );
    }
    
    // Get total count
    const { count } = await supabase
      .from('content_templates')
      .select('*', { count: 'exact', head: true })
      .eq('is_active', true);
    
    return NextResponse.json({
      success: true,
      data: {
        templates: templates || [],
        pagination: {
          page,
          limit,
          total: count || 0,
          total_pages: Math.ceil((count || 0) / limit),
        }
      }
    });
    
  } catch (error) {
    console.error('Templates API GET error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/content/templates - Create new template
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validate input
    const validationResult = TemplateCreateSchema.safeParse(body);
    if (!validationResult.success) {
      return NextResponse.json(
        { 
          error: 'Validation failed', 
          details: validationResult.error.errors 
        },
        { status: 400 }
      );
    }
    
    const {
      name,
      description,
      content_type,
      template_schema,
      default_content,
      category_id,
      tags,
      is_premium,
      organization_id,
    } = validationResult.data;
    
    // Validate template schema
    const schemaValidation = validateTemplateSchema(template_schema);
    if (!schemaValidation.valid) {
      return NextResponse.json(
        { 
          error: 'Invalid template schema',
          details: schemaValidation.errors
        },
        { status: 400 }
      );
    }
    
    // Check for duplicate template name in organization
    const { data: existingTemplate } = await supabase
      .from('content_templates')
      .select('id')
      .eq('organization_id', organization_id)
      .eq('name', name)
      .single();
    
    if (existingTemplate) {
      return NextResponse.json(
        { error: 'Template with this name already exists' },
        { status: 409 }
      );
    }
    
    // Create template
    const templateData = {
      name,
      description,
      content_type,
      template_schema,
      default_content,
      organization_id,
      category_id,
      tags: tags || [],
      is_premium,
      is_active: true,
      is_system_template: false,
      usage_count: 0,
      created_by: organization_id, // Should be user_id from auth
      updated_by: organization_id, // Should be user_id from auth
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };
    
    const { data: template, error: createError } = await supabase
      .from('content_templates')
      .insert(templateData)
      .select()
      .single();
    
    if (createError) {
      console.error('Template creation error:', createError);
      return NextResponse.json(
        { error: 'Failed to create template' },
        { status: 500 }
      );
    }
    
    return NextResponse.json({
      success: true,
      data: {
        template,
        message: 'Template created successfully'
      }
    }, { status: 201 });
    
  } catch (error) {
    console.error('Template API POST error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * PUT /api/content/templates - Update existing template
 */
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json();
    const { id, organization_id, ...updateData } = body;
    
    if (!id || !organization_id) {
      return NextResponse.json(
        { error: 'Template ID and Organization ID are required' },
        { status: 400 }
      );
    }
    
    // Verify ownership
    const { data: template, error: fetchError } = await supabase
      .from('content_templates')
      .select('organization_id, is_system_template')
      .eq('id', id)
      .single();
    
    if (fetchError || !template) {
      return NextResponse.json(
        { error: 'Template not found' },
        { status: 404 }
      );
    }
    
    if (template.organization_id !== organization_id || template.is_system_template) {
      return NextResponse.json(
        { error: 'Cannot modify this template' },
        { status: 403 }
      );
    }
    
    // Validate schema if provided
    if (updateData.template_schema) {
      const schemaValidation = validateTemplateSchema(updateData.template_schema);
      if (!schemaValidation.valid) {
        return NextResponse.json(
          { 
            error: 'Invalid template schema',
            details: schemaValidation.errors
          },
          { status: 400 }
        );
      }
    }
    
    // Update template
    const { data: updatedTemplate, error: updateError } = await supabase
      .from('content_templates')
      .update({
        ...updateData,
        updated_by: organization_id, // Should be user_id from auth
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (updateError) {
      console.error('Template update error:', updateError);
      return NextResponse.json(
        { error: 'Failed to update template' },
        { status: 500 }
      );
    }
    
    return NextResponse.json({
      success: true,
      data: {
        template: updatedTemplate,
        message: 'Template updated successfully'
      }
    });
    
  } catch (error) {
    console.error('Template API PUT error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/content/templates/replicate - Replicate and customize a template
 */
export async function replicate(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validate input
    const validationResult = TemplateReplicateSchema.safeParse(body);
    if (!validationResult.success) {
      return NextResponse.json(
        { 
          error: 'Validation failed', 
          details: validationResult.error.errors 
        },
        { status: 400 }
      );
    }
    
    const {
      source_template_id,
      name,
      description,
      customizations,
      organization_id,
    } = validationResult.data;
    
    // Get source template
    const { data: sourceTemplate, error: sourceError } = await supabase
      .from('content_templates')
      .select('*')
      .eq('id', source_template_id)
      .single();
    
    if (sourceError || !sourceTemplate) {
      return NextResponse.json(
        { error: 'Source template not found' },
        { status: 404 }
      );
    }
    
    // Check if user has access to source template
    if (sourceTemplate.organization_id !== organization_id && !sourceTemplate.is_system_template) {
      return NextResponse.json(
        { error: 'Unauthorized to replicate this template' },
        { status: 403 }
      );
    }
    
    // Check for duplicate name
    const { data: existingTemplate } = await supabase
      .from('content_templates')
      .select('id')
      .eq('organization_id', organization_id)
      .eq('name', name)
      .single();
    
    if (existingTemplate) {
      return NextResponse.json(
        { error: 'Template with this name already exists' },
        { status: 409 }
      );
    }
    
    // Merge customizations with source template
    const replicatedTemplate = {
      name,
      description: description || sourceTemplate.description,
      content_type: sourceTemplate.content_type,
      template_schema: customizations?.template_schema || sourceTemplate.template_schema,
      default_content: {
        ...sourceTemplate.default_content,
        ...(customizations?.default_content || {}),
      },
      organization_id,
      category_id: customizations?.category_id || sourceTemplate.category_id,
      tags: customizations?.tags || sourceTemplate.tags,
      is_premium: false, // Replicated templates are not premium by default
      is_active: true,
      is_system_template: false,
      usage_count: 0,
      created_by: organization_id, // Should be user_id from auth
      updated_by: organization_id, // Should be user_id from auth
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };
    
    const { data: newTemplate, error: createError } = await supabase
      .from('content_templates')
      .insert(replicatedTemplate)
      .select()
      .single();
    
    if (createError) {
      console.error('Template replication error:', createError);
      return NextResponse.json(
        { error: 'Failed to replicate template' },
        { status: 500 }
      );
    }
    
    // Update source template usage count if it's a system template
    if (sourceTemplate.is_system_template) {
      await supabase
        .from('content_templates')
        .update({ 
          usage_count: sourceTemplate.usage_count + 1,
          last_used_at: new Date().toISOString(),
        })
        .eq('id', source_template_id);
    }
    
    return NextResponse.json({
      success: true,
      data: {
        template: newTemplate,
        source_template: {
          id: sourceTemplate.id,
          name: sourceTemplate.name,
        },
        customizations_applied: Object.keys(customizations || {}),
        message: 'Template replicated successfully'
      }
    }, { status: 201 });
    
  } catch (error) {
    console.error('Template replication error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/content/templates/generate - Generate content from template
 */
export async function generate(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validate input
    const validationResult = TemplateGenerateContentSchema.safeParse(body);
    if (!validationResult.success) {
      return NextResponse.json(
        { 
          error: 'Validation failed', 
          details: validationResult.error.errors 
        },
        { status: 400 }
      );
    }
    
    const {
      template_id,
      variables,
      organization_id,
      create_content,
      content_title,
    } = validationResult.data;
    
    // Get template
    const { data: template, error: templateError } = await supabase
      .from('content_templates')
      .select('*')
      .eq('id', template_id)
      .single();
    
    if (templateError || !template) {
      return NextResponse.json(
        { error: 'Template not found' },
        { status: 404 }
      );
    }
    
    // Check access
    if (template.organization_id !== organization_id && !template.is_system_template) {
      return NextResponse.json(
        { error: 'Unauthorized to use this template' },
        { status: 403 }
      );
    }
    
    // Validate variables against template schema
    const requiredFields = template.template_schema.fields?.filter((f: any) => f.required) || [];
    const missingFields = requiredFields
      .map((f: any) => f.name)
      .filter((name: string) => !(name in variables));
    
    if (missingFields.length > 0) {
      return NextResponse.json(
        { 
          error: 'Missing required template variables',
          missing_fields: missingFields
        },
        { status: 400 }
      );
    }
    
    // Generate content from template
    const generatedContent: any = {};
    
    for (const [key, template_content] of Object.entries(template.default_content)) {
      if (typeof template_content === 'string') {
        generatedContent[key] = processTemplateVariables(template_content, variables);
      } else {
        generatedContent[key] = template_content;
      }
    }
    
    // Update template usage
    await supabase
      .from('content_templates')
      .update({ 
        usage_count: template.usage_count + 1,
        last_used_at: new Date().toISOString(),
      })
      .eq('id', template_id);
    
    // Create actual content item if requested
    let createdContent = null;
    if (create_content && content_title) {
      const contentData = {
        title: content_title,
        slug: content_title.toLowerCase()
          .replace(/[^a-z0-9\s-]/g, '')
          .replace(/\s+/g, '-')
          .substring(0, 100),
        content_type: template.content_type,
        rich_content: generatedContent.content || generatedContent.rich_content || '',
        plain_content: generatedContent.plain_content || '',
        excerpt: generatedContent.excerpt || '',
        organization_id,
        category_id: template.category_id,
        tags: [...(template.tags || []), 'generated', 'template'],
        status: 'draft',
        metadata: {
          generated_from_template: template_id,
          template_name: template.name,
          generation_variables: variables,
          generated_at: new Date().toISOString(),
        },
        created_by: organization_id, // Should be user_id from auth
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      };
      
      const { data: content, error: contentError } = await supabase
        .from('content_items')
        .insert(contentData)
        .select()
        .single();
      
      if (contentError) {
        console.error('Content creation error:', contentError);
        // Non-fatal error, continue with generated content
      } else {
        createdContent = content;
        
        // Create initial version
        await supabase
          .from('content_versions')
          .insert({
            content_id: content.id,
            version_number: 1,
            title: content.title,
            rich_content: content.rich_content,
            plain_content: content.plain_content,
            metadata: content.metadata,
            version_note: `Generated from template: ${template.name}`,
            created_by: organization_id, // Should be user_id from auth
            created_at: new Date().toISOString(),
          });
      }
    }
    
    return NextResponse.json({
      success: true,
      data: {
        template: {
          id: template.id,
          name: template.name,
          content_type: template.content_type,
        },
        generated_content: generatedContent,
        variables_used: variables,
        created_content: createdContent,
        message: create_content ? 
          'Content generated and created successfully' : 
          'Content generated successfully'
      }
    }, { status: 201 });
    
  } catch (error) {
    console.error('Template generation error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/content/templates - Delete template
 */
export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const templateId = searchParams.get('id');
    const organizationId = searchParams.get('organization_id');
    
    if (!templateId || !organizationId) {
      return NextResponse.json(
        { error: 'Template ID and Organization ID are required' },
        { status: 400 }
      );
    }
    
    // Get template
    const { data: template, error: fetchError } = await supabase
      .from('content_templates')
      .select('organization_id, is_system_template, usage_count')
      .eq('id', templateId)
      .single();
    
    if (fetchError || !template) {
      return NextResponse.json(
        { error: 'Template not found' },
        { status: 404 }
      );
    }
    
    if (template.organization_id !== organizationId || template.is_system_template) {
      return NextResponse.json(
        { error: 'Cannot delete this template' },
        { status: 403 }
      );
    }
    
    if (template.usage_count > 0) {
      // Soft delete for templates that have been used
      const { error: softDeleteError } = await supabase
        .from('content_templates')
        .update({
          is_active: false,
          updated_at: new Date().toISOString(),
        })
        .eq('id', templateId);
      
      if (softDeleteError) {
        console.error('Template soft delete error:', softDeleteError);
        return NextResponse.json(
          { error: 'Failed to delete template' },
          { status: 500 }
        );
      }
      
      return NextResponse.json({
        success: true,
        message: 'Template archived successfully (soft delete due to usage history)'
      });
    } else {
      // Hard delete for unused templates
      const { error: deleteError } = await supabase
        .from('content_templates')
        .delete()
        .eq('id', templateId);
      
      if (deleteError) {
        console.error('Template delete error:', deleteError);
        return NextResponse.json(
          { error: 'Failed to delete template' },
          { status: 500 }
        );
      }
      
      return NextResponse.json({
        success: true,
        message: 'Template deleted successfully'
      });
    }
    
  } catch (error) {
    console.error('Template API DELETE error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}