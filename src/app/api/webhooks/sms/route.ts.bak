import { NextRequest, NextResponse } from 'next/server';
import { smsServiceConnector } from '@/lib/services/sms-connector';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Handle Twilio webhook for SMS status updates
    if (body.MessageSid && body.MessageStatus) {
      await smsServiceConnector.handleTwilioWebhook({
        MessageSid: body.MessageSid,
        MessageStatus: body.MessageStatus,
        ErrorCode: body.ErrorCode,
        ErrorMessage: body.ErrorMessage,
        From: body.From,
        To: body.To,
        Body: body.Body,
        NumSegments: body.NumSegments,
        Price: body.Price,
        PriceUnit: body.PriceUnit
      });

      return NextResponse.json({ success: true });
    }

    // Handle incoming SMS messages
    if (body.From && body.To && body.Body) {
      const response = await smsServiceConnector.handleIncomingSMS({
        MessageSid: body.MessageSid,
        From: body.From,
        To: body.To,
        Body: body.Body,
        NumMedia: body.NumMedia,
        MediaUrl0: body.MediaUrl0
      });

      // Return TwiML response if auto-response is needed
      if (response.response_message) {
        return new NextResponse(
          `<?xml version="1.0" encoding="UTF-8"?>
           <Response>
             <Message>${response.response_message}</Message>
           </Response>`,
          {
            status: 200,
            headers: {
              'Content-Type': 'text/xml',
            },
          }
        );
      }

      return NextResponse.json({ success: true });
    }

    return NextResponse.json(
      { error: 'Invalid webhook payload' },
      { status: 400 }
    );

  } catch (error) {
    console.error('SMS webhook error:', error);
    
    return NextResponse.json(
      { error: 'Webhook processing failed' },
      { status: 500 }
    );
  }
}