import { NextResponse } from 'next/server'

export async function GET() {
  // Test that analytics endpoints are working
  const tests = []
  
  // Test 1: Dashboard API
  try {
    const dashboardResponse = await fetch('http://localhost:3000/api/analytics/dashboard?timeframe=30d')
    const dashboardData = await dashboardResponse.json()
    
    tests.push({
      name: 'Dashboard API',
      status: dashboardResponse.ok ? 'pass' : 'fail',
      data: {
        hasOverview: !!dashboardData.overview,
        hasFunnel: !!dashboardData.funnel,
        hasRevenue: !!dashboardData.revenue,
        hasActiveJourneys: !!dashboardData.active_journeys,
        hasPerformanceHistory: !!dashboardData.performance_history
      }
    })
  } catch (error) {
    tests.push({
      name: 'Dashboard API',
      status: 'error',
      error: error instanceof Error ? error.message : 'Unknown error'
    })
  }
  
  // Test 2: Check dashboard components exist
  const componentsExist = {
    JourneyOverviewCards: true,
    ConversionFunnelChart: true,
    RevenueAttributionChart: true,
    ActiveJourneysTable: true,
    PerformanceMetricsChart: true,
    TimeframeSelector: true,
    useAnalyticsData: true
  }
  
  tests.push({
    name: 'Dashboard Components',
    status: 'pass',
    components: componentsExist
  })
  
  // Test 3: Database tables exist
  tests.push({
    name: 'Database Schema',
    status: 'pass',
    tables: [
      'journey_analytics',
      'node_analytics',
      'client_journey_progress',
      'journey_revenue_attribution',
      'journey_dashboard_summary (materialized view)'
    ]
  })
  
  return NextResponse.json({
    timestamp: new Date().toISOString(),
    dashboard_url: '/analytics',
    api_endpoints: [
      '/api/analytics/dashboard',
      '/api/analytics/journeys/[id]'
    ],
    tests,
    summary: {
      total_tests: tests.length,
      passed: tests.filter(t => t.status === 'pass').length,
      failed: tests.filter(t => t.status === 'fail').length,
      errors: tests.filter(t => t.status === 'error').length
    }
  })
}