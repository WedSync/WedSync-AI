import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { rateLimit, rateLimitConfigs } from '@/lib/rate-limit'
import { z } from 'zod'
import DOMPurify from 'isomorphic-dompurify'
import { sanitizeString } from '@/lib/security/input-validation'

// Tag update validation schema
const updateTagSchema = z.object({
  name: z.string().min(1).max(50).trim().optional(),
  description: z.string().max(200).trim().optional().nullable(),
  color: z.enum([
    'gray', 'red', 'orange', 'amber', 'yellow', 'lime', 'green', 'emerald', 
    'teal', 'cyan', 'sky', 'blue', 'indigo', 'violet', 'purple', 'fuchsia', 
    'pink', 'rose'
  ]).optional(),
  category: z.enum(['relationship', 'venue', 'season', 'style', 'service', 'priority', 'custom']).optional()
})

// Comprehensive input sanitization for tag data
function sanitizeTagData(data: any): any {
  if (typeof data === 'string') {
    return DOMPurify.sanitize(data, { 
      ALLOWED_TAGS: [], 
      ALLOWED_ATTR: [],
      KEEP_CONTENT: true 
    });
  }
  
  if (Array.isArray(data)) {
    return data.map(sanitizeTagData);
  }
  
  if (data && typeof data === 'object') {
    const sanitized: any = {};
    for (const [key, value] of Object.entries(data)) {
      sanitized[key] = sanitizeTagData(value);
    }
    return sanitized;
  }
  
  return data;
}

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // Apply rate limiting
    const rateLimitResult = await rateLimit(request, rateLimitConfigs.api)
    if (rateLimitResult) return rateLimitResult

    const supabase = await createClient()
    const { data: user } = await supabase.auth.getUser()

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: profile } = await supabase
      .from('user_profiles')
      .select('organization_id')
      .eq('user_id', user.id)
      .single()

    if (!profile?.organization_id) {
      return NextResponse.json({ error: 'No organization found' }, { status: 400 })
    }

    const tagId = id
    if (!tagId) {
      return NextResponse.json({ error: 'Tag ID is required' }, { status: 400 })
    }

    // Get tag with usage count
    const { data, error } = await supabase
      .from('tags')
      .select(`
        id,
        name,
        description,
        color,
        category,
        created_at,
        updated_at,
        client_tags!left(count)
      `)
      .eq('id', tagId)
      .eq('organization_id', profile.organization_id)
      .single()

    if (error || !data) {
      return NextResponse.json({ error: 'Tag not found' }, { status: 404 })
    }

    // Process the data to calculate usage count
    const processedTag = {
      ...data,
      usage_count: Array.isArray(data.client_tags) ? data.client_tags.length : 0,
      client_tags: undefined // Remove the junction table data
    }

    return NextResponse.json({ tag: processedTag })
  } catch (error) {
    console.error('Error fetching tag:', error)
    return NextResponse.json(
      { error: 'Failed to fetch tag' },
      { status: 500 }
    )
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // Apply rate limiting
    const rateLimitResult = await rateLimit(request, rateLimitConfigs.api)
    if (rateLimitResult) return rateLimitResult

    const supabase = await createClient()
    const { data: user } = await supabase.auth.getUser()

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: profile } = await supabase
      .from('user_profiles')
      .select('organization_id')
      .eq('user_id', user.id)
      .single()

    if (!profile?.organization_id) {
      return NextResponse.json({ error: 'No organization found' }, { status: 400 })
    }

    const tagId = id
    if (!tagId) {
      return NextResponse.json({ error: 'Tag ID is required' }, { status: 400 })
    }

    const rawBody = await request.json()
    
    // Sanitize input data first
    const sanitizedBody = sanitizeTagData(rawBody);
    
    // Validate sanitized request body
    const validatedData = updateTagSchema.parse(sanitizedBody);

    // Build update object with sanitized values
    const updateData: any = {}
    
    if (validatedData.name !== undefined) {
      const sanitizedName = sanitizeString(validatedData.name, 50);
      if (!sanitizedName) {
        return NextResponse.json(
          { error: 'Invalid tag name provided' },
          { status: 400 }
        );
      }
      
      // Check for duplicate tag names within organization (excluding current tag)
      const { data: existingTag } = await supabase
        .from('tags')
        .select('id')
        .eq('organization_id', profile.organization_id)
        .eq('name', sanitizedName)
        .neq('id', tagId)
        .single()

      if (existingTag) {
        return NextResponse.json(
          { error: 'Tag with this name already exists' },
          { status: 400 }
        )
      }
      
      updateData.name = sanitizedName
    }

    if (validatedData.description !== undefined) {
      updateData.description = validatedData.description ? 
        sanitizeString(validatedData.description, 200) : null;
    }

    if (validatedData.color !== undefined) {
      updateData.color = validatedData.color
    }

    if (validatedData.category !== undefined) {
      updateData.category = validatedData.category
    }

    updateData.updated_at = new Date().toISOString()

    // Verify tag exists and belongs to organization
    const { data: existingTag } = await supabase
      .from('tags')
      .select('id')
      .eq('id', tagId)
      .eq('organization_id', profile.organization_id)
      .single()

    if (!existingTag) {
      return NextResponse.json({ error: 'Tag not found' }, { status: 404 })
    }

    const { data, error } = await supabase
      .from('tags')
      .update(updateData)
      .eq('id', tagId)
      .eq('organization_id', profile.organization_id)
      .select(`
        id,
        name,
        description,
        color,
        category,
        created_at,
        updated_at,
        client_tags!left(count)
      `)
      .single()

    if (error) {
      throw error
    }

    // Process the data to calculate usage count
    const processedTag = {
      ...data,
      usage_count: Array.isArray(data.client_tags) ? data.client_tags.length : 0,
      client_tags: undefined // Remove the junction table data
    }

    return NextResponse.json({ tag: processedTag })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validation error', details: error.errors },
        { status: 400 }
      )
    }
    console.error('Error updating tag:', error)
    return NextResponse.json(
      { error: 'Failed to update tag' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // Apply rate limiting
    const rateLimitResult = await rateLimit(request, rateLimitConfigs.api)
    if (rateLimitResult) return rateLimitResult

    const supabase = await createClient()
    const { data: user } = await supabase.auth.getUser()

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: profile } = await supabase
      .from('user_profiles')
      .select('organization_id')
      .eq('user_id', user.id)
      .single()

    if (!profile?.organization_id) {
      return NextResponse.json({ error: 'No organization found' }, { status: 400 })
    }

    const tagId = id
    if (!tagId) {
      return NextResponse.json({ error: 'Tag ID is required' }, { status: 400 })
    }

    // Verify tag exists and belongs to organization
    const { data: existingTag } = await supabase
      .from('tags')
      .select('id, name')
      .eq('id', tagId)
      .eq('organization_id', profile.organization_id)
      .single()

    if (!existingTag) {
      return NextResponse.json({ error: 'Tag not found' }, { status: 404 })
    }

    // First, remove all client-tag associations
    await supabase
      .from('client_tags')
      .delete()
      .eq('tag_id', tagId)

    // Then delete the tag itself
    const { error } = await supabase
      .from('tags')
      .delete()
      .eq('id', tagId)
      .eq('organization_id', profile.organization_id)

    if (error) {
      throw error
    }

    return NextResponse.json({ 
      success: true,
      message: `Tag "${existingTag.name}" deleted successfully`
    })
  } catch (error) {
    console.error('Error deleting tag:', error)
    return NextResponse.json(
      { error: 'Failed to delete tag' },
      { status: 500 }
    )
  }
}