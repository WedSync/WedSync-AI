import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { SendMessageRequest } from '@/types/chat'

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient()
    
    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { searchParams } = new URL(request.url)
    const roomId = searchParams.get('room_id')
    const limit = parseInt(searchParams.get('limit') || '50')
    const before = searchParams.get('before')
    const after = searchParams.get('after')

    if (!roomId) {
      return NextResponse.json({ error: 'Missing room_id parameter' }, { status: 400 })
    }

    // Verify user is participant in the room
    const { data: participant } = await supabase
      .from('chat_room_participants')
      .select('id')
      .eq('room_id', roomId)
      .eq('user_id', user.id)
      .eq('status', 'active')
      .single()

    if (!participant) {
      return NextResponse.json({ error: 'Access denied to this room' }, { status: 403 })
    }

    let query = supabase
      .from('chat_messages')
      .select(`
        *,
        sender:sender_id(*),
        attachments:chat_attachments(*),
        parent_message:parent_message_id(
          *,
          sender:sender_id(*)
        )
      `)
      .eq('room_id', roomId)
      .eq('is_deleted', false)
      .order('created_at', { ascending: false })
      .limit(limit)

    if (before) {
      query = query.lt('created_at', before)
    }
    if (after) {
      query = query.gt('created_at', after)
    }

    const { data: messages, error } = await query

    if (error) {
      console.error('Error fetching messages:', error)
      return NextResponse.json({ error: 'Failed to fetch messages' }, { status: 500 })
    }

    // Return messages in chronological order
    const sortedMessages = messages?.reverse() || []

    return NextResponse.json({ messages: sortedMessages })
  } catch (error) {
    console.error('Unexpected error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient()
    
    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body: SendMessageRequest = await request.json()
    
    // Validate required fields
    if (!body.room_id || !body.content) {
      return NextResponse.json(
        { error: 'Missing required fields: room_id, content' },
        { status: 400 }
      )
    }

    // Verify user can send messages in this room
    const { data: participant } = await supabase
      .from('chat_room_participants')
      .select('can_send_messages')
      .eq('room_id', body.room_id)
      .eq('user_id', user.id)
      .eq('status', 'active')
      .single()

    if (!participant || !participant.can_send_messages) {
      return NextResponse.json({ error: 'Cannot send messages to this room' }, { status: 403 })
    }

    // Create the message
    const { data: message, error } = await supabase
      .from('chat_messages')
      .insert({
        room_id: body.room_id,
        sender_id: user.id,
        message_type: body.message_type || 'text',
        content: body.content,
        parent_message_id: body.parent_message_id,
        mentions: body.mentions,
        metadata: body.metadata
      })
      .select(`
        *,
        sender:sender_id(*),
        attachments:chat_attachments(*),
        parent_message:parent_message_id(
          *,
          sender:sender_id(*)
        )
      `)
      .single()

    if (error) {
      console.error('Error creating message:', error)
      return NextResponse.json({ error: 'Failed to send message' }, { status: 500 })
    }

    // Handle file attachments if provided
    if (body.attachments && body.attachments.length > 0) {
      const { error: attachError } = await supabase
        .from('chat_attachments')
        .update({ message_id: message.id })
        .in('id', body.attachments)
        .eq('room_id', body.room_id)

      if (attachError) {
        console.error('Error attaching files:', attachError)
        // Message was sent successfully, but attachments failed
      }
    }

    return NextResponse.json({ message }, { status: 201 })
  } catch (error) {
    console.error('Unexpected error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function PUT(request: NextRequest) {
  try {
    const supabase = await createClient()
    
    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { message_id, content } = body
    
    if (!message_id || !content) {
      return NextResponse.json(
        { error: 'Missing required fields: message_id, content' },
        { status: 400 }
      )
    }

    // Update the message (only if sender is the current user)
    const { data: message, error } = await supabase
      .from('chat_messages')
      .update({
        content,
        is_edited: true,
        edited_at: new Date().toISOString()
      })
      .eq('id', message_id)
      .eq('sender_id', user.id)
      .eq('is_deleted', false)
      .select()
      .single()

    if (error) {
      console.error('Error editing message:', error)
      return NextResponse.json({ error: 'Failed to edit message' }, { status: 500 })
    }

    return NextResponse.json({ message })
  } catch (error) {
    console.error('Unexpected error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const supabase = await createClient()
    
    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { searchParams } = new URL(request.url)
    const messageId = searchParams.get('message_id')
    
    if (!messageId) {
      return NextResponse.json({ error: 'Missing message_id parameter' }, { status: 400 })
    }

    // Soft delete the message (only if sender is the current user)
    const { error } = await supabase
      .from('chat_messages')
      .update({
        is_deleted: true,
        deleted_at: new Date().toISOString(),
        deleted_by: user.id
      })
      .eq('id', messageId)
      .eq('sender_id', user.id)

    if (error) {
      console.error('Error deleting message:', error)
      return NextResponse.json({ error: 'Failed to delete message' }, { status: 500 })
    }

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Unexpected error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}