/**
 * WS-115: Purchase Receipt Generation API Endpoint
 * Generates and serves purchase receipts
 * 
 * Team C - Batch 9 - Round 1
 */

import { NextRequest, NextResponse } from 'next/server';
import { MarketplacePurchaseService } from '@/lib/services/marketplace-purchase-service';
import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';

/**
 * GET /api/marketplace/purchase/[id]/receipt
 * Generate purchase receipt
 */
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const supabase = await createClient(cookies());

  try {
    // Authenticate user
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const purchaseId = params.id;

    if (!purchaseId) {
      return NextResponse.json(
        { error: 'Purchase ID is required' },
        { status: 400 }
      );
    }

    // Verify user has access to this purchase
    const { data: purchase, error: purchaseError } = await supabase
      .from('marketplace_purchases')
      .select('buyer_id, seller_id')
      .eq('id', purchaseId)
      .single();

    if (purchaseError || !purchase) {
      return NextResponse.json(
        { error: 'Purchase not found' },
        { status: 404 }
      );
    }

    // Get user's supplier ID
    const { data: supplier, error: supplierError } = await supabase
      .from('suppliers')
      .select('id')
      .eq('user_id', user.id)
      .single();

    if (supplierError || !supplier) {
      return NextResponse.json(
        { error: 'Supplier profile not found' },
        { status: 404 }
      );
    }

    // Check if user is buyer or seller
    if (purchase.buyer_id !== supplier.id && purchase.seller_id !== supplier.id) {
      return NextResponse.json(
        { error: 'Unauthorized to view this receipt' },
        { status: 403 }
      );
    }

    // Generate receipt
    const receipt = await MarketplacePurchaseService.generateReceipt(purchaseId);

    return NextResponse.json(receipt, { status: 200 });
  } catch (error: any) {
    console.error('Error generating receipt:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to generate receipt' },
      { status: 500 }
    );
  }
}