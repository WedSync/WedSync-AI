/**
 * AI Knowledge Base API - Main endpoints for search, index, and retrieval
 * Team B - WS-210 Implementation
 * 
 * Provides REST API endpoints for the AI Knowledge Base system
 * Handles semantic search, content indexing, and document management
 */

import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import { KnowledgeBaseEngine, SearchQuerySchema, KnowledgeDocumentSchema } from '@/lib/ai/knowledge-base-engine';
import { createClient } from '@supabase/supabase-js';
import { logger } from '@/lib/logger';
import { ratelimit } from '@/lib/ratelimit';

// Initialize Knowledge Base Engine
const knowledgeEngine = new KnowledgeBaseEngine(
  process.env.NEXT_PUBLIC_SUPABASE_URL || (() => { throw new Error("Missing environment variable: NEXT_PUBLIC_SUPABASE_URL") })(),
  process.env.SUPABASE_SERVICE_ROLE_KEY || (() => { throw new Error("Missing environment variable: SUPABASE_SERVICE_ROLE_KEY") })(),
  process.env.OPENAI_API_KEY || (() => { throw new Error("Missing environment variable: OPENAI_API_KEY") })()
);

// Request validation schemas
const IndexRequestSchema = z.object({
  documents: z.array(KnowledgeDocumentSchema.omit({ id: true, created_at: true, updated_at: true }))
    .min(1)
    .max(10), // Limit batch size
});

const SearchRequestSchema = SearchQuerySchema;

const UpdateRequestSchema = z.object({
  document_id: z.string().uuid(),
  updates: z.object({
    title: z.string().min(1).max(500).optional(),
    content: z.string().min(10).max(50000).optional(),
    category: z.string().optional(),
    metadata: z.record(z.any()).optional(),
  }).refine(data => Object.keys(data).length > 0, {
    message: "At least one field must be provided for update",
  }),
});

const DeleteRequestSchema = z.object({
  document_id: z.string().uuid(),
  organization_id: z.string().uuid(),
});

/**
 * GET /api/ai/knowledge - Search the knowledge base
 */
export async function GET(req: NextRequest) {
  try {
    // Extract query parameters
    const { searchParams } = new URL(req.url);
    const query = searchParams.get('query');
    const organization_id = searchParams.get('organization_id');
    const category_filter = searchParams.get('category_filter');
    const source_type_filter = searchParams.get('source_type_filter');
    const limit = parseInt(searchParams.get('limit') || '10');
    const similarity_threshold = parseFloat(searchParams.get('similarity_threshold') || '0.7');
    const include_metadata = searchParams.get('include_metadata') === 'true';

    // Validate required parameters
    if (!query || !organization_id) {
      return NextResponse.json(
        { error: 'Missing required parameters: query and organization_id' },
        { status: 400 }
      );
    }

    // Rate limiting
    const rateLimitResult = await ratelimit.limit(organization_id);
    if (!rateLimitResult.success) {
      return NextResponse.json(
        { 
          error: 'Rate limit exceeded',
          reset: rateLimitResult.reset,
          remaining: rateLimitResult.remaining 
        },
        { status: 429 }
      );
    }

    // Build search query
    const searchQuery = {
      query,
      organization_id,
      category_filter: category_filter || undefined,
      source_type_filter: source_type_filter as any || undefined,
      limit,
      similarity_threshold,
      include_metadata,
    };

    // Validate search query
    const validatedQuery = SearchRequestSchema.parse(searchQuery);

    logger.info('Knowledge base search initiated', {
      organization_id,
      query: query.substring(0, 50) + '...',
      category_filter,
      source_type_filter,
      limit,
    });

    // Perform search
    const results = await knowledgeEngine.search(validatedQuery);

    // Return results
    return NextResponse.json({
      success: true,
      query: validatedQuery,
      results,
      total: results.length,
      timestamp: new Date().toISOString(),
    });

  } catch (error) {
    logger.error('Knowledge base search failed:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Invalid search parameters',
          details: error.errors 
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { 
        error: 'Search operation failed',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

/**
 * POST /api/ai/knowledge - Index new documents
 */
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    
    // Handle single document or batch
    let documents = [];
    if (Array.isArray(body.documents)) {
      documents = body.documents;
    } else if (body.title && body.content && body.organization_id) {
      // Single document format
      documents = [body];
    } else {
      return NextResponse.json(
        { error: 'Invalid request format. Provide either "documents" array or single document fields.' },
        { status: 400 }
      );
    }

    // Validate request
    const validatedRequest = IndexRequestSchema.parse({ documents });

    // Extract organization_id for rate limiting
    const organization_id = documents[0]?.organization_id;
    if (!organization_id) {
      return NextResponse.json(
        { error: 'organization_id is required' },
        { status: 400 }
      );
    }

    // Rate limiting
    const rateLimitResult = await ratelimit.limit(organization_id);
    if (!rateLimitResult.success) {
      return NextResponse.json(
        { 
          error: 'Rate limit exceeded',
          reset: rateLimitResult.reset,
          remaining: rateLimitResult.remaining 
        },
        { status: 429 }
      );
    }

    logger.info('Knowledge base indexing initiated', {
      organization_id,
      document_count: documents.length,
    });

    // Index documents
    let results;
    if (documents.length === 1) {
      // Single document
      results = [await knowledgeEngine.indexDocument(documents[0])];
    } else {
      // Batch processing
      results = await knowledgeEngine.batchIndexDocuments(documents);
    }

    // Calculate success metrics
    const successCount = results.filter(r => r.success).length;
    const failedCount = results.length - successCount;

    logger.info('Knowledge base indexing completed', {
      organization_id,
      total: results.length,
      success: successCount,
      failed: failedCount,
    });

    return NextResponse.json({
      success: failedCount === 0,
      results,
      summary: {
        total: results.length,
        successful: successCount,
        failed: failedCount,
      },
      timestamp: new Date().toISOString(),
    });

  } catch (error) {
    logger.error('Knowledge base indexing failed:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Invalid request data',
          details: error.errors 
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { 
        error: 'Indexing operation failed',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

/**
 * PUT /api/ai/knowledge - Update existing document
 */
export async function PUT(req: NextRequest) {
  try {
    const body = await req.json();
    
    // Validate request
    const validatedRequest = UpdateRequestSchema.parse(body);
    const { document_id, updates } = validatedRequest;

    logger.info('Knowledge base document update initiated', {
      document_id,
      fields_updated: Object.keys(updates),
    });

    // Update document
    const result = await knowledgeEngine.updateDocument(document_id, updates);

    if (!result.success) {
      return NextResponse.json(
        { 
          error: 'Document update failed',
          details: result.error 
        },
        { status: 400 }
      );
    }

    logger.info('Knowledge base document updated successfully', {
      document_id,
      category: result.category,
      embedding_updated: result.embedding_created,
    });

    return NextResponse.json({
      success: true,
      result,
      timestamp: new Date().toISOString(),
    });

  } catch (error) {
    logger.error('Knowledge base update failed:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Invalid update data',
          details: error.errors 
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { 
        error: 'Update operation failed',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/ai/knowledge - Remove document from knowledge base
 */
export async function DELETE(req: NextRequest) {
  try {
    const body = await req.json();
    
    // Validate request
    const validatedRequest = DeleteRequestSchema.parse(body);
    const { document_id, organization_id } = validatedRequest;

    // Rate limiting
    const rateLimitResult = await ratelimit.limit(organization_id);
    if (!rateLimitResult.success) {
      return NextResponse.json(
        { 
          error: 'Rate limit exceeded',
          reset: rateLimitResult.reset,
          remaining: rateLimitResult.remaining 
        },
        { status: 429 }
      );
    }

    logger.info('Knowledge base document deletion initiated', {
      document_id,
      organization_id,
    });

    // Delete document
    const success = await knowledgeEngine.deleteDocument(document_id, organization_id);

    if (!success) {
      return NextResponse.json(
        { error: 'Document deletion failed' },
        { status: 400 }
      );
    }

    logger.info('Knowledge base document deleted successfully', {
      document_id,
      organization_id,
    });

    return NextResponse.json({
      success: true,
      message: 'Document deleted successfully',
      timestamp: new Date().toISOString(),
    });

  } catch (error) {
    logger.error('Knowledge base deletion failed:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Invalid deletion request',
          details: error.errors 
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { 
        error: 'Deletion operation failed',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}