import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { ViralCoefficientTracker } from '@/lib/metrics/viral-coefficient-tracker';
import { z } from 'zod';

const viralQuerySchema = z.object({
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  supplierType: z.string().optional(),
  includeReferralChains: z.boolean().optional().default(false),
});

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient();
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Check for executive/admin role access
    const { data: profile } = await supabase
      .from('user_profiles')
      .select('role, organization_id')
      .eq('user_id', user.id)
      .single();

    if (!profile || !['admin', 'owner', 'executive'].includes(profile.role)) {
      return NextResponse.json(
        { error: 'Unauthorized - Executive access required' },
        { status: 403 }
      );
    }

    const url = new URL(request.url);
    const queryParams = {
      startDate: url.searchParams.get('startDate') || undefined,
      endDate: url.searchParams.get('endDate') || undefined,
      supplierType: url.searchParams.get('supplierType') || undefined,
      includeReferralChains: url.searchParams.get('includeReferralChains') === 'true',
    };

    const validatedData = viralQuerySchema.parse(queryParams);

    const tracker = new ViralCoefficientTracker(supabase);
    const viralMetrics = await tracker.calculateViralCoefficient({
      startDate: validatedData.startDate 
        ? new Date(validatedData.startDate)
        : new Date(Date.now() - 90 * 24 * 60 * 60 * 1000), // 90 days ago
      endDate: validatedData.endDate
        ? new Date(validatedData.endDate)
        : new Date(),
      supplierType: validatedData.supplierType,
      includeReferralChains: validatedData.includeReferralChains,
    });
    
    return NextResponse.json({
      success: true,
      data: {
        ...viralMetrics,
        calculatedAt: new Date().toISOString(),
      },
    });

  } catch (error) {
    console.error('Viral coefficient API error:', error);
    return NextResponse.json(
      { error: 'Failed to calculate viral coefficient metrics' },
      { status: 500 }
    );
  }
}