'use client';

import { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { Suspense } from 'react';

// Dynamic imports for charts
const LineChart = dynamic(() => import('recharts').then(mod => mod.LineChart), { ssr: false });
const AreaChart = dynamic(() => import('recharts').then(mod => mod.AreaChart), { ssr: false });
const BarChart = dynamic(() => import('recharts').then(mod => mod.BarChart), { ssr: false });
const ResponsiveContainer = dynamic(() => import('recharts').then(mod => mod.ResponsiveContainer), { ssr: false });
const Line = dynamic(() => import('recharts').then(mod => mod.Line), { ssr: false });
const Area = dynamic(() => import('recharts').then(mod => mod.Area), { ssr: false });
const Bar = dynamic(() => import('recharts').then(mod => mod.Bar), { ssr: false });
const XAxis = dynamic(() => import('recharts').then(mod => mod.XAxis), { ssr: false });
const YAxis = dynamic(() => import('recharts').then(mod => mod.YAxis), { ssr: false });
const CartesianGrid = dynamic(() => import('recharts').then(mod => mod.CartesianGrid), { ssr: false });
const Tooltip = dynamic(() => import('recharts').then(mod => mod.Tooltip), { ssr: false });
const Legend = dynamic(() => import('recharts').then(mod => ({ default: mod.Legend })), { ssr: false });

// Import components
import { HealthDashboard } from '@/components/monitoring/HealthDashboard';

interface SystemHealthMetrics {
  timestamp: string;
  cpu: number;
  memory: number;
  disk: number;
  responseTime: number;
  errorRate: number;
  activeConnections: number;
}

interface EnvironmentHealth {
  environment: string;
  status: 'healthy' | 'degraded' | 'unhealthy';
  metrics: SystemHealthMetrics;
  services: {
    name: string;
    status: 'up' | 'down' | 'degraded';
    responseTime: number;
    errorRate: number;
  }[];
}

interface HealthTrend {
  timestamp: string;
  cpu: number;
  memory: number;
  responseTime: number;
  errorRate: number;
  requestCount: number;
}

interface AlertConfig {
  id: string;
  name: string;
  type: 'threshold' | 'anomaly' | 'pattern';
  metric: string;
  condition: string;
  threshold: number;
  enabled: boolean;
  severity: 'low' | 'medium' | 'high' | 'critical';
  notifications: string[];
}

export default function SystemHealthPage() {
  const [selectedEnvironment, setSelectedEnvironment] = useState<string>('production');
  const [healthData, setHealthData] = useState<EnvironmentHealth[]>([]);
  const [healthTrends, setHealthTrends] = useState<HealthTrend[]>([]);
  const [alerts, setAlerts] = useState<AlertConfig[]>([]);
  const [loading, setLoading] = useState(true);
  const [autoRefresh, setAutoRefresh] = useState(true);
  const [refreshInterval, setRefreshInterval] = useState(30000); // 30 seconds
  const [timeRange, setTimeRange] = useState('1h'); // 1h, 6h, 24h, 7d, 30d
  const [activeView, setActiveView] = useState<'overview' | 'trends' | 'alerts' | 'executive'>('overview');

  // Fetch comprehensive health data
  const fetchHealthData = async () => {
    try {
      const [envHealthRes, trendsRes, alertsRes] = await Promise.all([
        fetch('/api/health/complete'),
        fetch(`/api/health/trends?range=${timeRange}`),
        fetch('/api/health/alerts')
      ]);

      if (envHealthRes.ok) {
        const envData = await envHealthRes.json();
        setHealthData(envData.environments || []);
      }

      if (trendsRes.ok) {
        const trendsData = await trendsRes.json();
        setHealthTrends(trendsData.trends || []);
      }

      if (alertsRes.ok) {
        const alertsData = await alertsRes.json();
        setAlerts(alertsData.alerts || []);
      }
    } catch (error) {
      console.error('Failed to fetch health data:', error);
    } finally {
      setLoading(false);
    }
  };

  // Auto-refresh effect
  useEffect(() => {
    fetchHealthData();
    
    if (autoRefresh) {
      const interval = setInterval(fetchHealthData, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [autoRefresh, refreshInterval, timeRange]);

  // Get environment-specific data
  const currentEnvironment = healthData.find(env => env.environment === selectedEnvironment);
  
  // Calculate health score
  const calculateHealthScore = (env: EnvironmentHealth): number => {
    if (!env) return 0;
    
    const metrics = env.metrics;
    let score = 100;
    
    // Deduct points based on metrics
    if (metrics.cpu > 80) score -= 20;
    else if (metrics.cpu > 60) score -= 10;
    
    if (metrics.memory > 80) score -= 20;
    else if (metrics.memory > 60) score -= 10;
    
    if (metrics.responseTime > 1000) score -= 15;
    else if (metrics.responseTime > 500) score -= 7;
    
    if (metrics.errorRate > 5) score -= 25;
    else if (metrics.errorRate > 1) score -= 10;
    
    // Check service health
    const unhealthyServices = env.services.filter(s => s.status !== 'up').length;
    score -= unhealthyServices * 10;
    
    return Math.max(0, score);
  };

  // Format trend data for charts
  const formatTrendData = () => {
    return healthTrends.map(trend => ({
      time: new Date(trend.timestamp).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),
      cpu: trend.cpu,
      memory: trend.memory,
      responseTime: trend.responseTime,
      errorRate: trend.errorRate,
      requests: trend.requestCount
    }));
  };

  // Calculate predictions
  const calculatePredictions = () => {
    if (healthTrends.length < 10) return null;
    
    // Simple linear regression for prediction
    const recentTrends = healthTrends.slice(-10);
    const avgCpuGrowth = recentTrends.reduce((acc, trend, idx) => {
      if (idx === 0) return 0;
      return acc + (trend.cpu - recentTrends[idx - 1].cpu);
    }, 0) / (recentTrends.length - 1);
    
    const avgMemGrowth = recentTrends.reduce((acc, trend, idx) => {
      if (idx === 0) return 0;
      return acc + (trend.memory - recentTrends[idx - 1].memory);
    }, 0) / (recentTrends.length - 1);
    
    const lastTrend = recentTrends[recentTrends.length - 1];
    
    return {
      cpuIn1Hour: Math.min(100, Math.max(0, lastTrend.cpu + avgCpuGrowth * 12)),
      memoryIn1Hour: Math.min(100, Math.max(0, lastTrend.memory + avgMemGrowth * 12)),
      criticalIn: avgCpuGrowth > 2 || avgMemGrowth > 2 ? 
        Math.round((80 - Math.max(lastTrend.cpu, lastTrend.memory)) / Math.max(avgCpuGrowth, avgMemGrowth)) : 
        null
    };
  };

  const predictions = calculatePredictions();
  const trendData = formatTrendData();

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">System Health Monitoring</h1>
            <p className="text-sm text-gray-500 mt-1">Complete system health visibility and management</p>
          </div>
          
          {/* Controls */}
          <div className="flex items-center space-x-4">
            {/* Environment Selector */}
            <select
              value={selectedEnvironment}
              onChange={(e) => setSelectedEnvironment(e.target.value)}
              className="px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <option value="production">Production</option>
              <option value="staging">Staging</option>
              <option value="development">Development</option>
            </select>

            {/* Time Range Selector */}
            <select
              value={timeRange}
              onChange={(e) => setTimeRange(e.target.value)}
              className="px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <option value="1h">Last 1 Hour</option>
              <option value="6h">Last 6 Hours</option>
              <option value="24h">Last 24 Hours</option>
              <option value="7d">Last 7 Days</option>
              <option value="30d">Last 30 Days</option>
            </select>

            {/* Auto Refresh Toggle */}
            <button
              onClick={() => setAutoRefresh(!autoRefresh)}
              className={`flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-all ${
                autoRefresh 
                  ? 'bg-success-50 text-success-700 border border-success-200' 
                  : 'bg-gray-50 text-gray-700 border border-gray-300'
              }`}
            >
              <svg className={`w-4 h-4 mr-2 ${autoRefresh ? 'animate-spin' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              {autoRefresh ? 'Auto Refresh On' : 'Auto Refresh Off'}
            </button>
          </div>
        </div>

        {/* View Tabs */}
        <div className="flex space-x-1 mt-6">
          {['overview', 'trends', 'alerts', 'executive'].map((view) => (
            <button
              key={view}
              onClick={() => setActiveView(view as any)}
              className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
                activeView === view
                  ? 'bg-primary-600 text-white'
                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
              }`}
            >
              {view.charAt(0).toUpperCase() + view.slice(1)}
            </button>
          ))}
        </div>
      </div>

      {/* Main Content */}
      <div className="p-6">
        {loading ? (
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
          </div>
        ) : (
          <>
            {/* Overview View */}
            {activeView === 'overview' && (
              <div className="space-y-6">
                {/* Health Score Card */}
                <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-xs">
                  <div className="flex items-center justify-between">
                    <div>
                      <h2 className="text-lg font-semibold text-gray-900">Overall Health Score</h2>
                      <p className="text-sm text-gray-500 mt-1">{selectedEnvironment} Environment</p>
                    </div>
                    <div className="text-right">
                      <div className="text-4xl font-bold">
                        {currentEnvironment ? calculateHealthScore(currentEnvironment) : 0}%
                      </div>
                      <div className={`text-sm font-medium ${
                        currentEnvironment?.status === 'healthy' ? 'text-success-600' :
                        currentEnvironment?.status === 'degraded' ? 'text-warning-600' :
                        'text-error-600'
                      }`}>
                        {currentEnvironment?.status || 'Unknown'}
                      </div>
                    </div>
                  </div>

                  {/* Metric Bars */}
                  <div className="mt-6 space-y-4">
                    {currentEnvironment && [
                      { label: 'CPU Usage', value: currentEnvironment.metrics.cpu, color: 'blue' },
                      { label: 'Memory Usage', value: currentEnvironment.metrics.memory, color: 'purple' },
                      { label: 'Disk Usage', value: currentEnvironment.metrics.disk, color: 'orange' },
                    ].map((metric) => (
                      <div key={metric.label}>
                        <div className="flex justify-between text-sm mb-1">
                          <span className="text-gray-600">{metric.label}</span>
                          <span className="font-medium">{metric.value}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className={`h-2 rounded-full transition-all duration-300 ${
                              metric.value > 80 ? 'bg-error-600' :
                              metric.value > 60 ? 'bg-warning-600' :
                              `bg-${metric.color}-600`
                            }`}
                            style={{ width: `${metric.value}%` }}
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Predictions Card */}
                {predictions && (
                  <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-xs">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Predictive Analysis</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="p-4 bg-blue-50 rounded-lg">
                        <p className="text-sm text-blue-600 font-medium">CPU in 1 Hour</p>
                        <p className="text-2xl font-bold text-blue-900 mt-1">
                          {predictions.cpuIn1Hour.toFixed(1)}%
                        </p>
                      </div>
                      <div className="p-4 bg-purple-50 rounded-lg">
                        <p className="text-sm text-purple-600 font-medium">Memory in 1 Hour</p>
                        <p className="text-2xl font-bold text-purple-900 mt-1">
                          {predictions.memoryIn1Hour.toFixed(1)}%
                        </p>
                      </div>
                      {predictions.criticalIn && (
                        <div className="p-4 bg-error-50 rounded-lg">
                          <p className="text-sm text-error-600 font-medium">Critical Threshold</p>
                          <p className="text-2xl font-bold text-error-900 mt-1">
                            {predictions.criticalIn} intervals
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Services Grid */}
                <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-xs">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Service Status</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {currentEnvironment?.services.map((service) => (
                      <div 
                        key={service.name}
                        className="p-4 border border-gray-200 rounded-lg hover:shadow-md transition-all"
                      >
                        <div className="flex items-center justify-between">
                          <span className="text-sm font-medium text-gray-900">{service.name}</span>
                          <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                            service.status === 'up' ? 'bg-success-100 text-success-800' :
                            service.status === 'degraded' ? 'bg-warning-100 text-warning-800' :
                            'bg-error-100 text-error-800'
                          }`}>
                            {service.status}
                          </span>
                        </div>
                        <div className="mt-2 text-xs text-gray-500">
                          <div>Response: {service.responseTime}ms</div>
                          <div>Error Rate: {service.errorRate}%</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Standard Health Dashboard Component */}
                <HealthDashboard />
              </div>
            )}

            {/* Trends View */}
            {activeView === 'trends' && (
              <div className="space-y-6">
                {/* Performance Trends Chart */}
                <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-xs">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Performance Trends</h3>
                  <div className="h-80">
                    <Suspense fallback={<div>Loading chart...</div>}>
                      <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={trendData}>
                          <CartesianGrid strokeDasharray="3 3" stroke="#E5E7EB" />
                          <XAxis dataKey="time" stroke="#6B7280" />
                          <YAxis stroke="#6B7280" />
                          <Tooltip />
                          <Legend />
                          <Line type="monotone" dataKey="cpu" stroke="#3B82F6" strokeWidth={2} dot={false} />
                          <Line type="monotone" dataKey="memory" stroke="#8B5CF6" strokeWidth={2} dot={false} />
                          <Line type="monotone" dataKey="responseTime" stroke="#F59E0B" strokeWidth={2} dot={false} />
                        </LineChart>
                      </ResponsiveContainer>
                    </Suspense>
                  </div>
                </div>

                {/* Error Rate Trends */}
                <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-xs">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Error Rate Analysis</h3>
                  <div className="h-80">
                    <Suspense fallback={<div>Loading chart...</div>}>
                      <ResponsiveContainer width="100%" height="100%">
                        <AreaChart data={trendData}>
                          <CartesianGrid strokeDasharray="3 3" stroke="#E5E7EB" />
                          <XAxis dataKey="time" stroke="#6B7280" />
                          <YAxis stroke="#6B7280" />
                          <Tooltip />
                          <Legend />
                          <Area type="monotone" dataKey="errorRate" stroke="#EF4444" fill="#FEE2E2" strokeWidth={2} />
                        </AreaChart>
                      </ResponsiveContainer>
                    </Suspense>
                  </div>
                </div>

                {/* Request Volume */}
                <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-xs">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Request Volume</h3>
                  <div className="h-80">
                    <Suspense fallback={<div>Loading chart...</div>}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart data={trendData}>
                          <CartesianGrid strokeDasharray="3 3" stroke="#E5E7EB" />
                          <XAxis dataKey="time" stroke="#6B7280" />
                          <YAxis stroke="#6B7280" />
                          <Tooltip />
                          <Legend />
                          <Bar dataKey="requests" fill="#10B981" />
                        </BarChart>
                      </ResponsiveContainer>
                    </Suspense>
                  </div>
                </div>
              </div>
            )}

            {/* Alerts View */}
            {activeView === 'alerts' && (
              <div className="space-y-6">
                <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-xs">
                  <div className="flex items-center justify-between mb-6">
                    <h3 className="text-lg font-semibold text-gray-900">Alert Configuration</h3>
                    <button className="px-4 py-2 bg-primary-600 text-white text-sm font-medium rounded-lg hover:bg-primary-700 transition-all">
                      Add Alert Rule
                    </button>
                  </div>

                  <div className="space-y-4">
                    {alerts.map((alert) => (
                      <div key={alert.id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                        <div className="flex-1">
                          <div className="flex items-center space-x-2">
                            <h4 className="font-medium text-gray-900">{alert.name}</h4>
                            <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                              alert.severity === 'critical' ? 'bg-error-100 text-error-800' :
                              alert.severity === 'high' ? 'bg-orange-100 text-orange-800' :
                              alert.severity === 'medium' ? 'bg-warning-100 text-warning-800' :
                              'bg-blue-100 text-blue-800'
                            }`}>
                              {alert.severity}
                            </span>
                          </div>
                          <p className="text-sm text-gray-500 mt-1">
                            {alert.metric} {alert.condition} {alert.threshold}
                          </p>
                          <p className="text-xs text-gray-400 mt-1">
                            Notifications: {alert.notifications.join(', ')}
                          </p>
                        </div>
                        <div className="flex items-center space-x-2">
                          <button
                            className={`relative inline-flex h-6 w-11 items-center rounded-full ${
                              alert.enabled ? 'bg-primary-600' : 'bg-gray-200'
                            } transition-colors`}
                          >
                            <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                              alert.enabled ? 'translate-x-6' : 'translate-x-1'
                            }`} />
                          </button>
                          <button className="p-2 text-gray-400 hover:text-gray-600">
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                            </svg>
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Recent Alerts */}
                <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-xs">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Alerts</h3>
                  <div className="space-y-3">
                    {/* Alert items would go here */}
                    <div className="text-center py-8 text-gray-500">
                      No recent alerts
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Executive View */}
            {activeView === 'executive' && (
              <div className="space-y-6">
                {/* Executive Summary */}
                <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-xs">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Executive Summary</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <p className="text-sm text-gray-600">System Uptime</p>
                      <p className="text-2xl font-bold text-gray-900 mt-1">99.95%</p>
                      <p className="text-xs text-success-600 mt-1">↑ 0.05% from last month</p>
                    </div>
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <p className="text-sm text-gray-600">Avg Response Time</p>
                      <p className="text-2xl font-bold text-gray-900 mt-1">245ms</p>
                      <p className="text-xs text-success-600 mt-1">↓ 15ms from last month</p>
                    </div>
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <p className="text-sm text-gray-600">Total Incidents</p>
                      <p className="text-2xl font-bold text-gray-900 mt-1">3</p>
                      <p className="text-xs text-warning-600 mt-1">↑ 1 from last month</p>
                    </div>
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <p className="text-sm text-gray-600">SLA Compliance</p>
                      <p className="text-2xl font-bold text-gray-900 mt-1">100%</p>
                      <p className="text-xs text-success-600 mt-1">Meeting all targets</p>
                    </div>
                  </div>

                  {/* SLA Status */}
                  <div className="border-t border-gray-200 pt-6">
                    <h4 className="font-medium text-gray-900 mb-3">SLA Performance</h4>
                    <div className="space-y-3">
                      {[
                        { metric: 'Uptime', target: '99.9%', actual: '99.95%', status: 'met' },
                        { metric: 'Response Time', target: '<500ms', actual: '245ms', status: 'met' },
                        { metric: 'Error Rate', target: '<1%', actual: '0.3%', status: 'met' },
                        { metric: 'Resolution Time', target: '<4hrs', actual: '2.5hrs', status: 'met' },
                      ].map((sla) => (
                        <div key={sla.metric} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <span className="text-sm font-medium text-gray-700">{sla.metric}</span>
                          <div className="flex items-center space-x-4">
                            <span className="text-sm text-gray-500">Target: {sla.target}</span>
                            <span className="text-sm font-medium text-gray-900">Actual: {sla.actual}</span>
                            <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                              sla.status === 'met' ? 'bg-success-100 text-success-800' : 'bg-error-100 text-error-800'
                            }`}>
                              {sla.status === 'met' ? 'Met' : 'Missed'}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Cost Analysis */}
                <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-xs">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Infrastructure Cost Analysis</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <p className="text-sm text-gray-600 mb-2">Monthly Cost Breakdown</p>
                      <div className="space-y-2">
                        {[
                          { service: 'Database', cost: 2450, percentage: 35 },
                          { service: 'Compute', cost: 1890, percentage: 27 },
                          { service: 'Storage', cost: 1120, percentage: 16 },
                          { service: 'Network', cost: 840, percentage: 12 },
                          { service: 'Other', cost: 700, percentage: 10 },
                        ].map((item) => (
                          <div key={item.service}>
                            <div className="flex justify-between text-sm mb-1">
                              <span className="text-gray-600">{item.service}</span>
                              <span className="font-medium">${item.cost}</span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-primary-600 h-2 rounded-full"
                                style={{ width: `${item.percentage}%` }}
                              />
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600 mb-2">Cost Optimization Opportunities</p>
                      <div className="space-y-2">
                        <div className="p-3 bg-success-50 border border-success-200 rounded-lg">
                          <p className="text-sm font-medium text-success-900">Unused Resources</p>
                          <p className="text-xs text-success-700 mt-1">3 idle instances detected - potential savings $340/month</p>
                        </div>
                        <div className="p-3 bg-warning-50 border border-warning-200 rounded-lg">
                          <p className="text-sm font-medium text-warning-900">Right-sizing Opportunity</p>
                          <p className="text-xs text-warning-700 mt-1">5 over-provisioned instances - potential savings $520/month</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
}