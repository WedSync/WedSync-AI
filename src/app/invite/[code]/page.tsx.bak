import { Metadata } from 'next'
import { notFound } from 'next/navigation'
import { Suspense } from 'react'
import InvitationLanding from '@/components/wedme/InvitationLanding'
import { LoadingSkeleton } from '@/components/ui/LoadingSkeleton'

interface PageProps {
  params: Promise<{ code: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

// Extract async params - Next.js 15 requirement
async function getParams(params: Promise<{ code: string }>) {
  return await params
}

async function getSearchParams(searchParams: Promise<{ [key: string]: string | string[] | undefined }>) {
  return await searchParams
}

// Fetch invitation data
async function getInvitationData(code: string, searchParams: any) {
  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'
  
  // Build URL with UTM parameters
  const url = new URL(`${baseUrl}/api/invite/${code}`)
  
  // Add UTM parameters from search params
  if (searchParams.utm_source) url.searchParams.set('utm_source', String(searchParams.utm_source))
  if (searchParams.utm_medium) url.searchParams.set('utm_medium', String(searchParams.utm_medium))
  if (searchParams.utm_campaign) url.searchParams.set('utm_campaign', String(searchParams.utm_campaign))
  if (searchParams.session_id) url.searchParams.set('session_id', String(searchParams.session_id))

  try {
    const response = await fetch(url.toString(), {
      headers: {
        'User-Agent': 'WedSync-InvitationPage/1.0',
      },
      // Add cache revalidation for dynamic content
      next: { revalidate: 300 } // 5 minutes cache
    })

    if (!response.ok) {
      if (response.status === 404) {
        return null // Will trigger notFound()
      }
      throw new Error('Failed to fetch invitation')
    }

    const data = await response.json()
    return data
  } catch (error) {
    console.error('Error fetching invitation:', error)
    return null
  }
}

// Generate metadata for SEO and social sharing
export async function generateMetadata({ params }: PageProps): Promise<Metadata> {
  const { code } = await getParams(params)
  
  // Try to get invitation data for metadata
  const data = await getInvitationData(code, {})
  
  if (!data?.success) {
    return {
      title: 'Invitation Not Found - WedMe',
      description: 'This wedding invitation could not be found.',
      robots: 'noindex, nofollow'
    }
  }

  const { invitation } = data
  const supplierName = invitation.supplier_name || 'Wedding Professional'
  const coupleNames = invitation.couple_names || 'Happy Couple'
  
  const title = `${supplierName} invites you to join ${coupleNames}'s Wedding Dashboard - WedMe`
  const description = invitation.personalized_message || 
    `${supplierName} has set up a personalized wedding dashboard for ${coupleNames}. Join now to access your wedding planning tools.`
  
  const inviteUrl = `${process.env.NEXT_PUBLIC_APP_URL || 'https://wedme.app'}/invite/${code}`
  
  return {
    title,
    description,
    openGraph: {
      title,
      description,
      url: inviteUrl,
      type: 'website',
      images: invitation.supplier_logo_url ? [
        {
          url: invitation.supplier_logo_url,
          width: 1200,
          height: 630,
          alt: `${supplierName} Logo`
        }
      ] : undefined,
    },
    twitter: {
      card: 'summary_large_image',
      title,
      description,
      images: invitation.supplier_logo_url ? [invitation.supplier_logo_url] : undefined,
    },
    alternates: {
      canonical: inviteUrl
    },
    other: {
      // Add supplier brand color as theme color
      'theme-color': invitation.supplier_brand_color || '#000000'
    }
  }
}

// Loading component for the invitation page
function InvitationPageSkeleton() {
  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      {/* Header skeleton */}
      <div className="text-center mb-8">
        <LoadingSkeleton className="h-48 w-full mb-6 rounded-lg" />
        <LoadingSkeleton className="h-8 w-3/4 mx-auto mb-4" />
        <LoadingSkeleton className="h-6 w-1/2 mx-auto" />
      </div>

      {/* Value props skeleton */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
        {[1, 2, 3, 4].map((i) => (
          <div key={i} className="p-6">
            <LoadingSkeleton className="h-12 w-12 rounded-lg mx-auto mb-4" />
            <LoadingSkeleton className="h-4 w-24 mx-auto" />
          </div>
        ))}
      </div>

      {/* Signup form skeleton */}
      <div className="max-w-md mx-auto">
        <div className="p-8 border rounded-lg">
          <LoadingSkeleton className="h-6 w-48 mx-auto mb-6" />
          <div className="space-y-4">
            <LoadingSkeleton className="h-12 w-full" />
            <LoadingSkeleton className="h-12 w-full" />
            <LoadingSkeleton className="h-12 w-full" />
          </div>
        </div>
      </div>
    </div>
  )
}

// Main page component
export default async function InvitationPage({ params, searchParams }: PageProps) {
  const { code } = await getParams(params)
  const search = await getSearchParams(searchParams)
  
  // Validate code format before making API call
  if (!/^[A-Z0-9]{6,12}$/.test(code)) {
    notFound()
  }

  const data = await getInvitationData(code, search)
  
  if (!data?.success) {
    notFound()
  }

  const { invitation, supplier_settings, visit_id, tracking } = data

  return (
    <>
      {/* Analytics Integration */}
      {supplier_settings?.google_analytics_id && (
        <>
          <script
            async
            src={`https://www.googletagmanager.com/gtag/js?id=${supplier_settings.google_analytics_id}`}
          />
          <script
            dangerouslySetInnerHTML={{
              __html: `
                window.dataLayer = window.dataLayer || [];
                function gtag(){dataLayer.push(arguments);}
                gtag('js', new Date());
                gtag('config', '${supplier_settings.google_analytics_id}');
                
                // Track invitation view
                gtag('event', 'invitation_view', {
                  'supplier_id': '${invitation.supplier_id || 'unknown'}',
                  'supplier_type': '${invitation.supplier_type || 'unknown'}',
                  'invitation_code': '${invitation.code}',
                  'utm_source': '${tracking?.utm_source || ''}',
                  'utm_medium': '${tracking?.utm_medium || ''}',
                  'utm_campaign': '${tracking?.utm_campaign || ''}'
                });
              `
            }}
          />
        </>
      )}

      {/* Facebook Pixel */}
      {supplier_settings?.facebook_pixel_id && (
        <>
          <script
            dangerouslySetInnerHTML={{
              __html: `
                !function(f,b,e,v,n,t,s)
                {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
                n.callMethod.apply(n,arguments):n.queue.push(arguments)};
                if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
                n.queue=[];t=b.createElement(e);t.async=!0;
                t.src=v;s=b.getElementsByTagName(e)[0];
                s.parentNode.insertBefore(t,s)}(window, document,'script',
                'https://connect.facebook.net/en_US/fbevents.js');
                fbq('init', '${supplier_settings.facebook_pixel_id}');
                fbq('track', 'PageView');
                fbq('track', 'ViewContent', {
                  content_type: 'wedding_invitation',
                  content_ids: ['${invitation.code}'],
                  content_name: 'Wedding Invitation View'
                });
              `
            }}
          />
          <noscript>
            <img
              height="1"
              width="1"
              style={{ display: 'none' }}
              src={`https://www.facebook.com/tr?id=${supplier_settings.facebook_pixel_id}&ev=PageView&noscript=1`}
            />
          </noscript>
        </>
      )}

      {/* Main Content */}
      <Suspense fallback={<InvitationPageSkeleton />}>
        <InvitationLanding
          invitation={invitation}
          supplierSettings={supplier_settings}
          visitId={visit_id}
          tracking={tracking}
        />
      </Suspense>

      {/* Schema.org structured data for SEO */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify({
            "@context": "https://schema.org",
            "@type": "WebPage",
            "name": `Wedding Dashboard Invitation - ${invitation.supplier_name}`,
            "description": invitation.personalized_message || "Join your personalized wedding dashboard",
            "url": `${process.env.NEXT_PUBLIC_APP_URL || 'https://wedme.app'}/invite/${code}`,
            "provider": {
              "@type": "Organization", 
              "name": invitation.supplier_name,
              "description": `Professional ${invitation.supplier_type} service`
            },
            "about": {
              "@type": "Event",
              "name": `${invitation.couple_names || 'Wedding'} Planning Dashboard`,
              "eventStatus": "https://schema.org/EventScheduled",
              ...(invitation.wedding_date && {
                "startDate": invitation.wedding_date
              })
            }
          })
        }}
      />
    </>
  )
}

// Configure page settings
export const runtime = 'nodejs'
export const dynamic = 'force-dynamic' // Always run on the server for fresh data
export const revalidate = false // Don't cache this page