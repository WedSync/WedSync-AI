import { render, screen, waitFor, fireEvent } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { jest } from '@jest/globals'
import { CategoryManager } from '@/components/wedme/budget/CategoryManager'

// Mock fetch globally
global.fetch = jest.fn()

const mockCategories = [
  {
    id: '1',
    name: 'Venue',
    budgeted_amount: 10000,
    spent_amount: 8000,
    percentage_of_total: 40,
    color: '#9E77ED'
  },
  {
    id: '2',
    name: 'Catering', 
    budgeted_amount: 6250,
    spent_amount: 3000,
    percentage_of_total: 25,
    color: '#2E90FA'
  }
]

const defaultProps = {
  clientId: 'client-123',
  totalBudget: 25000,
  onCategoriesChange: jest.fn()
}

describe('CategoryManager', () => {
  beforeEach(() => {
    jest.clearAllMocks()
    
    ;(global.fetch as jest.Mock).mockImplementation((url: string) => {
      if (url.includes('/api/budget/categories') && !url.includes('/bulk')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve({ categories: mockCategories })
        })
      }
      return Promise.resolve({ ok: true, json: () => Promise.resolve({}) })
    })
  })

  it('renders loading state initially', () => {
    render(<CategoryManager {...defaultProps} />)
    
    expect(screen.getByText('Budget Categories')).toBeInTheDocument()
    expect(document.querySelector('.animate-pulse')).toBeInTheDocument()
  })

  it('displays budget summary after loading', async () => {
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      expect(screen.getByText('Total Budget')).toBeInTheDocument()
      expect(screen.getByText('$25,000')).toBeInTheDocument()
      expect(screen.getByText('Allocated')).toBeInTheDocument()
      expect(screen.getByText('$16,250')).toBeInTheDocument() // 10000 + 6250
      expect(screen.getByText('Remaining')).toBeInTheDocument()
      expect(screen.getByText('$8,750')).toBeInTheDocument() // 25000 - 16250
    })
  })

  it('displays categories list correctly', async () => {
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      expect(screen.getByText('Venue')).toBeInTheDocument()
      expect(screen.getByText('Catering')).toBeInTheDocument()
      expect(screen.getByText('40.0%')).toBeInTheDocument()
      expect(screen.getByText('25.0%')).toBeInTheDocument()
      expect(screen.getByText('$8,000 / $10,000')).toBeInTheDocument()
      expect(screen.getByText('$3,000 / $6,250')).toBeInTheDocument()
    })
  })

  it('shows empty state when no categories exist', async () => {
    ;(global.fetch as jest.Mock).mockImplementation((url: string) => {
      if (url.includes('/api/budget/categories')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve({ categories: [] })
        })
      }
      return Promise.resolve({ ok: true })
    })
    
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      expect(screen.getByText('No budget categories yet')).toBeInTheDocument()
      expect(screen.getByText('Add categories to organize your wedding budget')).toBeInTheDocument()
    })
  })

  it('opens add category form when Add Category is clicked', async () => {
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Add Category'))
    })
    
    expect(screen.getByText('Add Category')).toBeInTheDocument()
    expect(screen.getByPlaceholderText('e.g., Venue, Catering, Photography')).toBeInTheDocument()
  })

  it('shows default categories modal when Use Defaults is clicked', async () => {
    ;(global.fetch as jest.Mock).mockImplementation((url: string) => {
      if (url.includes('/api/budget/categories')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve({ categories: [] })
        })
      }
      return Promise.resolve({ ok: true })
    })
    
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Use Defaults'))
    })
    
    expect(screen.getByText('Set Up Default Categories')).toBeInTheDocument()
    expect(screen.getByText('Venue')).toBeInTheDocument()
    expect(screen.getByText('40%')).toBeInTheDocument() // Default venue percentage
  })

  it('validates form input correctly', async () => {
    const user = userEvent.setup()
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Add Category'))
    })
    
    // Try to submit empty form
    await user.click(screen.getByText('Add Category'))
    
    await waitFor(() => {
      expect(screen.getByText('Category name is required')).toBeInTheDocument()
      expect(screen.getByText('Budget amount must be greater than 0')).toBeInTheDocument()
    })
  })

  it('prevents duplicate category names', async () => {
    const user = userEvent.setup()
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Add Category'))
    })
    
    // Try to add duplicate name
    await user.type(screen.getByPlaceholderText('e.g., Venue, Catering, Photography'), 'Venue')
    await user.type(screen.getByPlaceholderText('0.0'), '10')
    await user.click(screen.getByText('Add Category'))
    
    await waitFor(() => {
      expect(screen.getByText('Category name already exists')).toBeInTheDocument()
    })
  })

  it('validates percentage not exceeding 100%', async () => {
    const user = userEvent.setup()
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Add Category'))
    })
    
    // Set percentage to over 100%
    await user.type(screen.getByPlaceholderText('e.g., Venue, Catering, Photography'), 'Music')
    await user.type(screen.getByPlaceholderText('0.0'), '150')
    await user.click(screen.getByText('Add Category'))
    
    await waitFor(() => {
      expect(screen.getByText('Percentage cannot exceed 100%')).toBeInTheDocument()
    })
  })

  it('switches between amount and percentage input modes', async () => {
    const user = userEvent.setup()
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Add Category'))
    })
    
    // Should default to percentage mode
    expect(screen.getByPlaceholderText('0.0')).toBeInTheDocument()
    
    // Switch to amount mode
    await user.click(screen.getByText('Amount'))
    
    expect(screen.getByPlaceholderText('0')).toBeInTheDocument()
    expect(screen.getByText('$')).toBeInTheDocument()
  })

  it('converts between percentage and amount correctly', async () => {
    const user = userEvent.setup()
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Add Category'))
    })
    
    // Enter 20% (should be $5000 of $25000 budget)
    await user.type(screen.getByPlaceholderText('0.0'), '20')
    
    expect(screen.getByText('= $5,000')).toBeInTheDocument()
    
    // Switch to amount mode
    await user.click(screen.getByText('Amount'))
    
    // Should auto-convert to $5000
    expect(screen.getByDisplayValue('5000')).toBeInTheDocument()
  })

  it('allows color selection', async () => {
    const user = userEvent.setup()
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Add Category'))
    })
    
    // Check that color options are available
    const colorButtons = document.querySelectorAll('button[style*="background-color"]')
    expect(colorButtons.length).toBeGreaterThan(0)
    
    // Click a color
    await user.click(colorButtons[1])
    
    // Should update selection (border change)
    expect(colorButtons[1]).toHaveClass('border-gray-900')
  })

  it('submits new category successfully', async () => {
    const user = userEvent.setup()
    
    ;(global.fetch as jest.Mock).mockImplementation((url: string, options: any) => {
      if (options?.method === 'POST') {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve({ success: true })
        })
      }
      return Promise.resolve({
        ok: true,
        json: () => Promise.resolve({ categories: mockCategories })
      })
    })
    
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Add Category'))
    })
    
    await user.type(screen.getByPlaceholderText('e.g., Venue, Catering, Photography'), 'Photography')
    await user.type(screen.getByPlaceholderText('0.0'), '15')
    await user.click(screen.getByText('Add Category'))
    
    await waitFor(() => {
      expect(fetch).toHaveBeenCalledWith('/api/budget/categories', expect.objectContaining({
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: expect.stringContaining('Photography')
      }))
    })
  })

  it('edits existing category', async () => {
    const user = userEvent.setup()
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      // Click edit button for first category
      const editButtons = screen.getAllByRole('button')
      const editButton = editButtons.find(btn => 
        btn.querySelector('svg') && btn.getAttribute('title') === null
      )
      if (editButton) fireEvent.click(editButton)
    })
    
    expect(screen.getByText('Edit Category')).toBeInTheDocument()
    expect(screen.getByDisplayValue('Venue')).toBeInTheDocument()
  })

  it('deletes category with confirmation', async () => {
    const user = userEvent.setup()
    
    // Mock window.confirm
    const confirmSpy = jest.spyOn(window, 'confirm').mockImplementation(() => true)
    
    ;(global.fetch as jest.Mock).mockImplementation((url: string, options: any) => {
      if (options?.method === 'DELETE') {
        return Promise.resolve({ ok: true })
      }
      return Promise.resolve({
        ok: true,
        json: () => Promise.resolve({ categories: mockCategories })
      })
    })
    
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      // Click delete button
      const deleteButtons = screen.getAllByRole('button')
      const deleteButton = deleteButtons.find(btn => 
        btn.querySelector('svg') && btn.classList.contains('hover:text-error-600')
      )
      if (deleteButton) fireEvent.click(deleteButton)
    })
    
    expect(confirmSpy).toHaveBeenCalledWith(
      expect.stringContaining('Are you sure you want to delete this category?')
    )
    
    await waitFor(() => {
      expect(fetch).toHaveBeenCalledWith(
        expect.stringContaining('/api/budget/categories/'),
        expect.objectContaining({ method: 'DELETE' })
      )
    })
    
    confirmSpy.mockRestore()
  })

  it('creates default categories when requested', async () => {
    ;(global.fetch as jest.Mock).mockImplementation((url: string, options: any) => {
      if (url.includes('/bulk') && options?.method === 'POST') {
        return Promise.resolve({ ok: true })
      }
      if (url.includes('/api/budget/categories')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve({ categories: [] })
        })
      }
      return Promise.resolve({ ok: true })
    })
    
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Use Defaults'))
    })
    
    fireEvent.click(screen.getByText('Create Categories'))
    
    await waitFor(() => {
      expect(fetch).toHaveBeenCalledWith('/api/budget/categories/bulk', expect.objectContaining({
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: expect.stringContaining('Venue')
      }))
    })
  })

  it('shows over-allocation warning', async () => {
    const overAllocatedCategories = [
      {
        id: '1',
        name: 'Venue',
        budgeted_amount: 15000,
        spent_amount: 8000,
        percentage_of_total: 60,
        color: '#9E77ED'
      },
      {
        id: '2',
        name: 'Catering',
        budgeted_amount: 12500,
        spent_amount: 3000,
        percentage_of_total: 50,
        color: '#2E90FA'
      }
    ]
    
    ;(global.fetch as jest.Mock).mockImplementation((url: string) => {
      if (url.includes('/api/budget/categories')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve({ categories: overAllocatedCategories })
        })
      }
      return Promise.resolve({ ok: true })
    })
    
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      expect(screen.getByText('Budget allocation exceeds 100%')).toBeInTheDocument()
      expect(screen.getByText('110.0%')).toBeInTheDocument() // 60% + 50%
    })
  })

  it('handles API errors gracefully', async () => {
    ;(global.fetch as jest.Mock).mockImplementation(() => 
      Promise.resolve({ ok: false })
    )
    
    render(<CategoryManager {...defaultProps} />)
    
    // Should still render the component structure
    expect(screen.getByText('Budget Categories')).toBeInTheDocument()
  })

  it('calls onCategoriesChange when categories are updated', async () => {
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      expect(defaultProps.onCategoriesChange).toHaveBeenCalledWith(mockCategories)
    })
  })

  it('displays category progress bars correctly', async () => {
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      // Progress bars should be rendered for each category
      const progressBars = document.querySelectorAll('.w-full.bg-gray-200.rounded-full.h-2')
      expect(progressBars).toHaveLength(2) // One for each category
    })
  })

  it('handles form cancellation', async () => {
    render(<CategoryManager {...defaultProps} />)
    
    await waitFor(() => {
      fireEvent.click(screen.getByText('Add Category'))
    })
    
    expect(screen.getByText('Add Category')).toBeInTheDocument()
    
    fireEvent.click(screen.getByText('Cancel'))
    
    expect(screen.queryByText('Category Name')).not.toBeInTheDocument()
  })
})