import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { createClient } from '@supabase/supabase-js';
import CreatorAnalyticsService from '@/lib/services/creator-analytics-service';

// Mock Supabase client
vi.mock('@/lib/supabase/client', () => ({
  createClient: vi.fn(() => ({
    from: vi.fn(() => ({
      insert: vi.fn(() => Promise.resolve({ error: null })),
      select: vi.fn(() => ({
        eq: vi.fn(() => ({
          gte: vi.fn(() => ({
            order: vi.fn(() => Promise.resolve({ data: [], error: null }))
          }))
        })),
        single: vi.fn(() => Promise.resolve({ data: null, error: null }))
      }))
    })),
    rpc: vi.fn(() => Promise.resolve({ data: null, error: null })),
    channel: vi.fn(() => ({
      send: vi.fn(() => Promise.resolve())
    })),
    auth: {
      getUser: vi.fn(() => Promise.resolve({ 
        data: { user: { id: 'test-user-id' } }, 
        error: null 
      }))
    }
  }))
}));

describe('Creator Analytics Integration Tests', () => {
  let analyticsService: CreatorAnalyticsService;

  beforeEach(() => {
    analyticsService = new CreatorAnalyticsService({
      enableBatching: false, // Disable batching for tests
      enableRealtime: false
    });
  });

  afterEach(() => {
    analyticsService.destroy();
    vi.clearAllMocks();
  });

  describe('Event Tracking', () => {
    it('should track template view events', async () => {
      const creatorId = 'creator-123';
      const templateId = 'template-456';

      await analyticsService.trackTemplateView(creatorId, templateId, {
        source: 'marketplace_browse'
      });

      // Verify the event was tracked (in real test, would check database)
      expect(true).toBe(true);
    });

    it('should track purchase events with revenue', async () => {
      const creatorId = 'creator-123';
      const templateId = 'template-456';
      const revenue = 2500; // $25.00 in cents

      await analyticsService.trackPurchase(
        creatorId,
        templateId,
        revenue,
        'buyer-789',
        { paymentMethod: 'stripe' }
      );

      // Verify purchase was tracked
      expect(true).toBe(true);
    });

    it('should batch events when batching is enabled', async () => {
      const batchingService = new CreatorAnalyticsService({
        enableBatching: true,
        batchSize: 3,
        enableRealtime: false
      });

      const creatorId = 'creator-123';
      const templateId = 'template-456';

      // Track 3 events (should trigger batch flush)
      await batchingService.trackTemplateView(creatorId, templateId);
      await batchingService.trackTemplateClick(creatorId, templateId);
      await batchingService.trackTemplateView(creatorId, templateId);

      // Verify batch was sent
      expect(true).toBe(true);

      batchingService.destroy();
    });
  });

  describe('Insights Generation', () => {
    it('should generate conversion rate insights', async () => {
      const creatorId = 'creator-123';
      
      // Mock low conversion rate data
      const mockMetrics = [
        { conversion_rate: 0.01, gross_revenue: 1000, metric_date: '2024-01-20' },
        { conversion_rate: 0.015, gross_revenue: 1500, metric_date: '2024-01-21' },
        { conversion_rate: 0.01, gross_revenue: 1200, metric_date: '2024-01-22' }
      ];

      vi.mocked(createClient).mockReturnValueOnce({
        from: vi.fn(() => ({
          select: vi.fn(() => ({
            eq: vi.fn(() => ({
              gte: vi.fn(() => ({
                order: vi.fn(() => Promise.resolve({ 
                  data: mockMetrics, 
                  error: null 
                }))
              }))
            }))
          }))
        })),
        rpc: vi.fn(() => Promise.resolve({ data: [], error: null }))
      } as any);

      const insights = await analyticsService.generateInsights(creatorId);

      expect(insights.insights).toBeDefined();
      expect(insights.insights.length).toBeGreaterThan(0);
      
      const conversionInsight = insights.insights.find((i: any) => i.type === 'pricing');
      expect(conversionInsight).toBeDefined();
      expect(conversionInsight?.severity).toBe('high');
    });

    it('should detect revenue decline trends', async () => {
      const creatorId = 'creator-123';
      
      // Mock declining revenue data
      const mockMetrics = Array.from({ length: 14 }, (_, i) => ({
        conversion_rate: 0.025,
        gross_revenue: i < 7 ? 5000 : 1000, // Recent week has lower revenue
        metric_date: new Date(Date.now() - (13 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
      }));

      vi.mocked(createClient).mockReturnValueOnce({
        from: vi.fn(() => ({
          select: vi.fn(() => ({
            eq: vi.fn(() => ({
              gte: vi.fn(() => ({
                order: vi.fn(() => Promise.resolve({ 
                  data: mockMetrics, 
                  error: null 
                }))
              }))
            }))
          }))
        })),
        rpc: vi.fn(() => Promise.resolve({ data: [], error: null }))
      } as any);

      const insights = await analyticsService.generateInsights(creatorId);

      const revenueInsight = insights.insights.find((i: any) => i.type === 'performance');
      expect(revenueInsight).toBeDefined();
      expect(revenueInsight?.title).toContain('Revenue Decline');
    });
  });

  describe('A/B Testing', () => {
    it('should determine A/B test variant for template', async () => {
      const templateId = 'template-456';
      
      // Mock active A/B test
      vi.mocked(createClient).mockReturnValueOnce({
        from: vi.fn(() => ({
          select: vi.fn(() => ({
            eq: vi.fn(() => ({
              eq: vi.fn(() => ({
                single: vi.fn(() => Promise.resolve({
                  data: {
                    id: 'test-123',
                    traffic_allocation: 0.5,
                    control_variant: { price: 2500 },
                    test_variant: { price: 2000 },
                    status: 'running'
                  },
                  error: null
                }))
              }))
            }))
          }))
        }))
      } as any);

      const abTest = await analyticsService.getActiveABTest(templateId);

      expect(abTest).toBeDefined();
      expect(abTest?.testId).toBe('test-123');
      expect(['control', 'test']).toContain(abTest?.variant);
    });

    it('should record A/B test conversions', async () => {
      const testId = 'test-123';
      const variant = 'test';

      await analyticsService.recordABTestConversion(testId, variant);

      // Verify conversion was recorded
      expect(true).toBe(true);
    });
  });

  describe('Seasonal Analysis', () => {
    it('should identify seasonal performance patterns', async () => {
      const creatorId = 'creator-123';
      
      // Mock seasonal data with summer performing best
      const mockMetrics = Array.from({ length: 30 }, (_, i) => ({
        conversion_rate: 0.025,
        gross_revenue: 2000,
        wedding_season_breakdown: {
          spring: { revenue: 1000 },
          summer: { revenue: 3000 }, // Highest
          fall: { revenue: 1500 },
          winter: { revenue: 800 }
        },
        metric_date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
      }));

      vi.mocked(createClient).mockReturnValueOnce({
        from: vi.fn(() => ({
          select: vi.fn(() => ({
            eq: vi.fn(() => ({
              gte: vi.fn(() => ({
                order: vi.fn(() => Promise.resolve({ 
                  data: mockMetrics, 
                  error: null 
                }))
              }))
            }))
          }))
        })),
        rpc: vi.fn(() => Promise.resolve({ data: [], error: null }))
      } as any);

      const insights = await analyticsService.generateInsights(creatorId);

      const seasonalInsight = insights.insights.find((i: any) => i.type === 'seasonality');
      expect(seasonalInsight).toBeDefined();
      expect(seasonalInsight?.description).toContain('summer');
    });
  });
});

describe('Creator Analytics API Tests', () => {
  describe('Dashboard API', () => {
    it('should return analytics dashboard data', async () => {
      const response = await fetch('/api/marketplace/creator/analytics/dashboard?timeframe=month', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      // In real test, would check actual response
      expect(response).toBeDefined();
    });

    it('should filter by wedding season', async () => {
      const response = await fetch('/api/marketplace/creator/analytics/dashboard?timeframe=month&weddingSeasons=summer', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      expect(response).toBeDefined();
    });
  });

  describe('Export API', () => {
    it('should export analytics data as CSV', async () => {
      const response = await fetch('/api/marketplace/creator/analytics/export?format=csv&type=overview', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      expect(response).toBeDefined();
      // In real test, would check CSV format
    });

    it('should export revenue report as JSON', async () => {
      const response = await fetch('/api/marketplace/creator/analytics/export?format=json&type=revenue', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      expect(response).toBeDefined();
      // In real test, would check JSON structure
    });
  });

  describe('A/B Test API', () => {
    it('should create new A/B test', async () => {
      const testData = {
        templateId: 'template-456',
        testName: 'Price Reduction Test',
        testType: 'pricing',
        controlVariant: { price: 2500 },
        testVariant: { price: 2000 },
        trafficAllocation: 0.5,
        duration: 14,
        minimumSampleSize: 100
      };

      const response = await fetch('/api/marketplace/creator/analytics/ab-tests', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testData)
      });

      expect(response).toBeDefined();
    });

    it('should update A/B test status', async () => {
      const updateData = {
        testId: 'test-123',
        action: 'start'
      };

      const response = await fetch('/api/marketplace/creator/analytics/ab-tests', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData)
      });

      expect(response).toBeDefined();
    });
  });
});