'use client';

// WS-130: AI-Powered Photography Library - Style Filter Component
// Team C Batch 10 Round 1

import React, { useState, useEffect, useCallback } from 'react';
import { 
  Filter, 
  Search, 
  X, 
  Palette, 
  Camera, 
  Heart, 
  Star, 
  MapPin, 
  DollarSign,
  Calendar,
  Clock,
  Users,
  Sliders,
  RefreshCw,
  ChevronDown,
  ChevronUp,
  Settings,
  Save,
  RotateCcw,
  Eye,
  TrendingUp
} from 'lucide-react';
import { Button } from '@/components/ui/button-untitled';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Slider } from '@/components/ui/slider';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import type { PhotographyStyle } from './PhotographerPortfolioGallery';

export interface FilterCriteria {
  // Style filters
  styles: string[];
  styleConfidence: number;
  colorPalette: string[];
  moodTags: string[];

  // Photographer filters
  photographerIds: string[];
  location: string;
  radius: number;
  experience: [number, number];
  rating: number;
  priceRange: [number, number];
  availability: string[];

  // Photo attributes
  eventTypes: string[];
  dateRange: [Date | null, Date | null];
  technical: {
    lightingQuality: string[];
    focusQuality: string[];
    compositionScore: number;
  };

  // Search and sorting
  searchQuery: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

interface PhotographyStyleFilterProps {
  initialCriteria?: Partial<FilterCriteria>;
  availableStyles?: PhotographyStyle[];
  onFilterChange?: (criteria: FilterCriteria) => void;
  onApplyFilters?: (criteria: FilterCriteria) => void;
  onClearFilters?: () => void;
  showAdvanced?: boolean;
  isLoading?: boolean;
  resultCount?: number;
  className?: string;
}

const DEFAULT_CRITERIA: FilterCriteria = {
  styles: [],
  styleConfidence: 0.5,
  colorPalette: [],
  moodTags: [],
  photographerIds: [],
  location: '',
  radius: 50,
  experience: [0, 20],
  rating: 0,
  priceRange: [0, 20000],
  availability: [],
  eventTypes: [],
  dateRange: [null, null],
  technical: {
    lightingQuality: [],
    focusQuality: [],
    compositionScore: 0
  },
  searchQuery: '',
  sortBy: 'relevance',
  sortOrder: 'desc'
};

export function PhotographyStyleFilter({
  initialCriteria = {},
  availableStyles = [],
  onFilterChange,
  onApplyFilters,
  onClearFilters,
  showAdvanced = true,
  isLoading = false,
  resultCount,
  className = ''
}: PhotographyStyleFilterProps) {
  // State management
  const [criteria, setCriteria] = useState<FilterCriteria>({
    ...DEFAULT_CRITERIA,
    ...initialCriteria
  });
  
  const [expandedSections, setExpandedSections] = useState<Set<string>>(
    new Set(['styles', 'search'])
  );
  
  const [isAdvancedMode, setIsAdvancedMode] = useState(false);
  const [savedFilters, setSavedFilters] = useState<FilterCriteria[]>([]);

  // Common options
  const availabilityOptions = ['available', 'busy', 'booked'];
  const eventTypeOptions = [
    'wedding', 'engagement', 'portrait', 'commercial', 
    'event', 'lifestyle', 'maternity', 'family'
  ];
  
  const lightingOptions = ['excellent', 'good', 'fair', 'poor'];
  const focusOptions = ['sharp', 'soft', 'artistic blur'];
  
  const sortOptions = [
    { value: 'relevance', label: 'Relevance' },
    { value: 'rating', label: 'Rating' },
    { value: 'price', label: 'Price' },
    { value: 'experience', label: 'Experience' },
    { value: 'recent', label: 'Recently Added' },
    { value: 'popular', label: 'Most Popular' }
  ];

  // Color palette options
  const colorPaletteOptions = [
    { name: 'Warm', colors: ['#FF6B35', '#F7931E', '#FFD23F'] },
    { name: 'Cool', colors: ['#4ECDC4', '#44A08D', '#093637'] },
    { name: 'Monochrome', colors: ['#000000', '#666666', '#FFFFFF'] },
    { name: 'Earth', colors: ['#8B4513', '#D2691E', '#228B22'] },
    { name: 'Pastel', colors: ['#FFB6C1', '#FFEFD5', '#E6E6FA'] },
    { name: 'Vibrant', colors: ['#FF1493', '#00CED1', '#32CD32'] }
  ];

  // Mood options
  const moodOptions = [
    'romantic', 'elegant', 'dramatic', 'natural', 'vintage', 
    'modern', 'artistic', 'candid', 'traditional', 'creative',
    'intimate', 'joyful', 'serene', 'energetic', 'timeless'
  ];

  // Update criteria and notify parent
  const updateCriteria = useCallback((updates: Partial<FilterCriteria>) => {
    const newCriteria = { ...criteria, ...updates };
    setCriteria(newCriteria);
    onFilterChange?.(newCriteria);
  }, [criteria, onFilterChange]);

  // Toggle expanded sections
  const toggleSection = (section: string) => {
    const newExpanded = new Set(expandedSections);
    if (newExpanded.has(section)) {
      newExpanded.delete(section);
    } else {
      newExpanded.add(section);
    }
    setExpandedSections(newExpanded);
  };

  // Handle style selection
  const handleStyleToggle = (styleName: string) => {
    const newStyles = criteria.styles.includes(styleName)
      ? criteria.styles.filter(s => s !== styleName)
      : [...criteria.styles, styleName];
    
    updateCriteria({ styles: newStyles });
  };

  // Handle multi-select toggles
  const handleMultiSelectToggle = (
    value: string, 
    currentValues: string[], 
    key: keyof FilterCriteria
  ) => {
    const newValues = currentValues.includes(value)
      ? currentValues.filter(v => v !== value)
      : [...currentValues, value];
    
    updateCriteria({ [key]: newValues });
  };

  // Apply filters
  const handleApplyFilters = () => {
    onApplyFilters?.(criteria);
  };

  // Clear all filters
  const handleClearFilters = () => {
    setCriteria(DEFAULT_CRITERIA);
    onClearFilters?.(criteria);
  };

  // Save current filter
  const handleSaveFilter = () => {
    const newSavedFilters = [...savedFilters, criteria];
    setSavedFilters(newSavedFilters);
    // Could save to localStorage or backend here
  };

  // Load saved filter
  const handleLoadFilter = (savedCriteria: FilterCriteria) => {
    setCriteria(savedCriteria);
    onFilterChange?.(savedCriteria);
  };

  const FilterSection = ({ 
    title, 
    icon: Icon, 
    id, 
    children 
  }: { 
    title: string; 
    icon: any; 
    id: string; 
    children: React.ReactNode; 
  }) => {
    const isExpanded = expandedSections.has(id);
    
    return (
      <Card>
        <CardHeader className="pb-3">
          <button
            onClick={() => toggleSection(id)}
            className="flex items-center justify-between w-full text-left"
          >
            <CardTitle className="text-base flex items-center gap-2">
              <Icon className="h-4 w-4" />
              {title}
            </CardTitle>
            {isExpanded ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
          </button>
        </CardHeader>
        
        {isExpanded && (
          <CardContent className="pt-0">
            {children}
          </CardContent>
        )}
      </Card>
    );
  };

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Photography Filters
          </h3>
          
          {resultCount !== undefined && (
            <Badge variant="secondary">
              {resultCount} result{resultCount !== 1 ? 's' : ''}
            </Badge>
          )}
        </div>

        <div className="flex items-center gap-2">
          {showAdvanced && (
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsAdvancedMode(!isAdvancedMode)}
            >
              <Settings className="h-4 w-4 mr-1" />
              {isAdvancedMode ? 'Simple' : 'Advanced'}
            </Button>
          )}
          
          <Button
            variant="outline"
            size="sm"
            onClick={handleSaveFilter}
            disabled={criteria.styles.length === 0}
          >
            <Save className="h-4 w-4 mr-1" />
            Save
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={handleClearFilters}
          >
            <RotateCcw className="h-4 w-4 mr-1" />
            Clear
          </Button>
        </div>
      </div>

      {/* Search */}
      <FilterSection title="Search" icon={Search} id="search">
        <div className="space-y-3">
          <Input
            placeholder="Search photographers, styles, locations..."
            value={criteria.searchQuery}
            onChange={(e) => updateCriteria({ searchQuery: e.target.value })}
            className="w-full"
          />
          
          <div className="flex items-center gap-4">
            <div className="flex-1">
              <Label className="text-sm">Sort by</Label>
              <select
                value={criteria.sortBy}
                onChange={(e) => updateCriteria({ sortBy: e.target.value })}
                className="w-full mt-1 px-3 py-2 border border-gray-300 rounded-lg text-sm"
              >
                {sortOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>
            
            <div className="pt-6">
              <Button
                variant="outline"
                size="sm"
                onClick={() => updateCriteria({ 
                  sortOrder: criteria.sortOrder === 'asc' ? 'desc' : 'asc' 
                })}
              >
                {criteria.sortOrder === 'asc' ? <TrendingUp className="h-4 w-4" /> : <TrendingUp className="h-4 w-4 rotate-180" />}
              </Button>
            </div>
          </div>
        </div>
      </FilterSection>

      {/* Photography Styles */}
      <FilterSection title="Photography Styles" icon={Palette} id="styles">
        <div className="space-y-4">
          <div className="flex flex-wrap gap-2">
            {availableStyles.map(style => (
              <Button
                key={style.id}
                variant={criteria.styles.includes(style.name) ? "primary" : "outline"}
                size="sm"
                onClick={() => handleStyleToggle(style.name)}
                className="flex items-center gap-1"
              >
                {style.name}
                {criteria.styles.includes(style.name) && <X className="h-3 w-3 ml-1" />}
              </Button>
            ))}
          </div>

          <div>
            <Label className="text-sm">Minimum Style Confidence: {Math.round(criteria.styleConfidence * 100)}%</Label>
            <Slider
              value={[criteria.styleConfidence]}
              onValueChange={(value) => updateCriteria({ styleConfidence: value[0] })}
              min={0}
              max={1}
              step={0.1}
              className="w-full mt-2"
            />
          </div>
        </div>
      </FilterSection>

      {/* Color & Mood (if advanced) */}
      {isAdvancedMode && (
        <>
          <FilterSection title="Color Palette" icon={Palette} id="colors">
            <div className="flex flex-wrap gap-2">
              {colorPaletteOptions.map(palette => (
                <Button
                  key={palette.name}
                  variant={criteria.colorPalette.includes(palette.name) ? "primary" : "outline"}
                  size="sm"
                  onClick={() => handleMultiSelectToggle(
                    palette.name, 
                    criteria.colorPalette, 
                    'colorPalette'
                  )}
                  className="flex items-center gap-2"
                >
                  <div className="flex gap-1">
                    {palette.colors.map((color, idx) => (
                      <div 
                        key={idx}
                        className="w-3 h-3 rounded-full border border-gray-300"
                        style={{ backgroundColor: color }}
                      />
                    ))}
                  </div>
                  {palette.name}
                </Button>
              ))}
            </div>
          </FilterSection>

          <FilterSection title="Mood & Atmosphere" icon={Heart} id="mood">
            <div className="flex flex-wrap gap-2">
              {moodOptions.map(mood => (
                <Button
                  key={mood}
                  variant={criteria.moodTags.includes(mood) ? "primary" : "outline"}
                  size="sm"
                  onClick={() => handleMultiSelectToggle(mood, criteria.moodTags, 'moodTags')}
                >
                  {mood}
                </Button>
              ))}
            </div>
          </FilterSection>
        </>
      )}

      {/* Photographer Criteria */}
      <FilterSection title="Photographer Criteria" icon={Camera} id="photographer">
        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm">Location</Label>
              <Input
                placeholder="City, state, or region"
                value={criteria.location}
                onChange={(e) => updateCriteria({ location: e.target.value })}
                className="mt-1"
              />
            </div>
            
            <div>
              <Label className="text-sm">Search Radius: {criteria.radius} km</Label>
              <Slider
                value={[criteria.radius]}
                onValueChange={(value) => updateCriteria({ radius: value[0] })}
                min={10}
                max={500}
                step={10}
                className="w-full mt-2"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm">
                Price Range: ${criteria.priceRange[0]} - ${criteria.priceRange[1]}
              </Label>
              <Slider
                value={criteria.priceRange}
                onValueChange={(value) => updateCriteria({ priceRange: [value[0], value[1]] })}
                min={0}
                max={50000}
                step={500}
                className="w-full mt-2"
              />
            </div>
            
            <div>
              <Label className="text-sm">Minimum Rating</Label>
              <div className="flex items-center gap-2 mt-2">
                <Slider
                  value={[criteria.rating]}
                  onValueChange={(value) => updateCriteria({ rating: value[0] })}
                  min={0}
                  max={5}
                  step={0.5}
                  className="flex-1"
                />
                <div className="flex items-center gap-1 text-sm">
                  <Star className="h-4 w-4 fill-current text-yellow-400" />
                  {criteria.rating}+
                </div>
              </div>
            </div>
          </div>

          <div>
            <Label className="text-sm mb-2 block">Availability Status</Label>
            <div className="flex flex-wrap gap-2">
              {availabilityOptions.map(status => (
                <Button
                  key={status}
                  variant={criteria.availability.includes(status) ? "primary" : "outline"}
                  size="sm"
                  onClick={() => handleMultiSelectToggle(status, criteria.availability, 'availability')}
                >
                  {status}
                </Button>
              ))}
            </div>
          </div>
        </div>
      </FilterSection>

      {/* Event Types */}
      <FilterSection title="Event Types" icon={Calendar} id="events">
        <div className="flex flex-wrap gap-2">
          {eventTypeOptions.map(eventType => (
            <Button
              key={eventType}
              variant={criteria.eventTypes.includes(eventType) ? "primary" : "outline"}
              size="sm"
              onClick={() => handleMultiSelectToggle(eventType, criteria.eventTypes, 'eventTypes')}
            >
              {eventType}
            </Button>
          ))}
        </div>
      </FilterSection>

      {/* Technical Quality (Advanced) */}
      {isAdvancedMode && (
        <FilterSection title="Technical Quality" icon={Settings} id="technical">
          <div className="space-y-4">
            <div>
              <Label className="text-sm mb-2 block">Lighting Quality</Label>
              <div className="flex flex-wrap gap-2">
                {lightingOptions.map(quality => (
                  <Button
                    key={quality}
                    variant={criteria.technical.lightingQuality.includes(quality) ? "primary" : "outline"}
                    size="sm"
                    onClick={() => {
                      const newLighting = criteria.technical.lightingQuality.includes(quality)
                        ? criteria.technical.lightingQuality.filter(q => q !== quality)
                        : [...criteria.technical.lightingQuality, quality];
                      
                      updateCriteria({
                        technical: { ...criteria.technical, lightingQuality: newLighting }
                      });
                    }}
                  >
                    {quality}
                  </Button>
                ))}
              </div>
            </div>

            <div>
              <Label className="text-sm mb-2 block">Focus Quality</Label>
              <div className="flex flex-wrap gap-2">
                {focusOptions.map(focus => (
                  <Button
                    key={focus}
                    variant={criteria.technical.focusQuality.includes(focus) ? "primary" : "outline"}
                    size="sm"
                    onClick={() => {
                      const newFocus = criteria.technical.focusQuality.includes(focus)
                        ? criteria.technical.focusQuality.filter(f => f !== focus)
                        : [...criteria.technical.focusQuality, focus];
                      
                      updateCriteria({
                        technical: { ...criteria.technical, focusQuality: newFocus }
                      });
                    }}
                  >
                    {focus}
                  </Button>
                ))}
              </div>
            </div>

            <div>
              <Label className="text-sm">
                Minimum Composition Score: {criteria.technical.compositionScore}/10
              </Label>
              <Slider
                value={[criteria.technical.compositionScore]}
                onValueChange={(value) => updateCriteria({
                  technical: { ...criteria.technical, compositionScore: value[0] }
                })}
                min={0}
                max={10}
                step={0.5}
                className="w-full mt-2"
              />
            </div>
          </div>
        </FilterSection>
      )}

      {/* Apply Filters Button */}
      <div className="flex items-center justify-between pt-4">
        <div className="text-sm text-gray-600">
          {criteria.styles.length > 0 && (
            <span>{criteria.styles.length} style{criteria.styles.length !== 1 ? 's' : ''} selected</span>
          )}
        </div>
        
        <Button
          onClick={handleApplyFilters}
          disabled={isLoading}
          className="flex items-center gap-2"
        >
          {isLoading ? (
            <RefreshCw className="h-4 w-4 animate-spin" />
          ) : (
            <Filter className="h-4 w-4" />
          )}
          Apply Filters
        </Button>
      </div>

      {/* Saved Filters */}
      {savedFilters.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Saved Filters</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              {savedFilters.map((savedCriteria, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={() => handleLoadFilter(savedCriteria)}
                  className="flex items-center gap-1"
                >
                  <Eye className="h-3 w-3" />
                  Filter {index + 1}
                  <X 
                    className="h-3 w-3 ml-1 hover:bg-gray-200 rounded-full"
                    onClick={(e) => {
                      e.stopPropagation();
                      setSavedFilters(prev => prev.filter((_, i) => i !== index));
                    }}
                  />
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}