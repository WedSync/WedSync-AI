'use client'

import { useState, useEffect, useRef } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Shield, AlertCircle, RefreshCw, Key } from 'lucide-react'
import { mfaService } from '@/lib/auth/mfa'

interface MFAVerificationProps {
  userId: string
  factorId: string
  challengeId?: string
  onSuccess: (data: any) => void
  onCancel?: () => void
  method?: 'totp' | 'sms' | 'backup'
}

export function MFAVerification({ 
  userId, 
  factorId, 
  challengeId: initialChallengeId,
  onSuccess, 
  onCancel,
  method = 'totp'
}: MFAVerificationProps) {
  const [code, setCode] = useState('')
  const [error, setError] = useState<string | null>(null)
  const [isVerifying, setIsVerifying] = useState(false)
  const [challengeId, setChallengeId] = useState(initialChallengeId)
  const [resendCountdown, setResendCountdown] = useState(0)
  const [attempts, setAttempts] = useState(0)
  const inputRefs = useRef<(HTMLInputElement | null)[]>([])

  useEffect(() => {
    if (!challengeId && method === 'sms') {
      createChallenge()
    }
  }, [])

  useEffect(() => {
    if (resendCountdown > 0) {
      const timer = setTimeout(() => setResendCountdown(resendCountdown - 1), 1000)
      return () => clearTimeout(timer)
    }
  }, [resendCountdown])

  const createChallenge = async () => {
    try {
      const result = await mfaService.challenge(factorId, userId)
      if (result.error) {
        setError(result.error.message)
      } else if (result.data) {
        setChallengeId(result.data.id)
        setResendCountdown(30)
      }
    } catch (err) {
      setError('Failed to send verification code')
    }
  }

  const handleVerify = async () => {
    if (code.length !== 6) {
      setError('Please enter a 6-digit code')
      return
    }

    setIsVerifying(true)
    setError(null)

    try {
      let currentChallengeId = challengeId

      if (!currentChallengeId) {
        const challengeResult = await mfaService.challenge(factorId, userId)
        if (challengeResult.error) {
          setError(challengeResult.error.message)
          return
        }
        currentChallengeId = challengeResult.data!.id
      }

      const result = await mfaService.verify(factorId, currentChallengeId, code, userId)

      if (result.error) {
        setAttempts(attempts + 1)
        if (attempts >= 4) {
          setError('Too many failed attempts. Your account has been locked for security.')
        } else {
          setError(`Invalid code. ${5 - attempts - 1} attempts remaining.`)
        }
        setCode('')
        inputRefs.current[0]?.focus()
      } else if (result.data) {
        onSuccess(result.data)
      }
    } catch (err) {
      setError('Verification failed. Please try again.')
    } finally {
      setIsVerifying(false)
    }
  }

  const handleResend = async () => {
    if (resendCountdown > 0) return
    
    setError(null)
    await createChallenge()
  }

  const handleCodeChange = (value: string, index: number) => {
    const newValue = value.replace(/\D/g, '')
    
    if (newValue.length <= 1) {
      const newCode = code.split('')
      newCode[index] = newValue
      setCode(newCode.join(''))
      
      if (newValue && index < 5) {
        inputRefs.current[index + 1]?.focus()
      }
    } else if (newValue.length === 6) {
      setCode(newValue)
      inputRefs.current[5]?.focus()
    }
  }

  const handleKeyDown = (e: React.KeyboardEvent, index: number) => {
    if (e.key === 'Backspace' && !code[index] && index > 0) {
      inputRefs.current[index - 1]?.focus()
    } else if (e.key === 'Enter' && code.length === 6) {
      handleVerify()
    }
  }

  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault()
    const pastedData = e.clipboardData.getData('text').replace(/\D/g, '').slice(0, 6)
    setCode(pastedData)
    if (pastedData.length === 6) {
      inputRefs.current[5]?.focus()
    }
  }

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Shield className="w-5 h-5" />
          Two-Factor Authentication
        </CardTitle>
        <CardDescription>
          {method === 'totp' && 'Enter the code from your authenticator app'}
          {method === 'sms' && 'Enter the code sent to your phone'}
          {method === 'backup' && 'Enter one of your backup codes'}
        </CardDescription>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="space-y-2">
          <label className="text-sm font-medium">
            {method === 'backup' ? 'Backup Code' : 'Verification Code'}
          </label>
          <div className="flex gap-2 justify-center">
            {[...Array(6)].map((_, index) => (
              <Input
                key={index}
                ref={(el) => (inputRefs.current[index] = el)}
                type="text"
                inputMode="numeric"
                maxLength={1}
                value={code[index] || ''}
                onChange={(e) => handleCodeChange(e.target.value, index)}
                onKeyDown={(e) => handleKeyDown(e, index)}
                onPaste={index === 0 ? handlePaste : undefined}
                className="w-12 h-12 text-center text-lg font-mono"
                disabled={isVerifying}
              />
            ))}
          </div>
        </div>

        {method === 'sms' && (
          <div className="text-center">
            <Button
              variant="ghost"
              size="sm"
              onClick={handleResend}
              disabled={resendCountdown > 0}
              className="text-sm"
            >
              <RefreshCw className="w-3 h-3 mr-2" />
              {resendCountdown > 0 
                ? `Resend code in ${resendCountdown}s` 
                : 'Resend code'}
            </Button>
          </div>
        )}

        {method === 'totp' && (
          <Button
            variant="ghost"
            size="sm"
            onClick={() => onCancel?.()}
            className="w-full"
          >
            <Key className="w-3 h-3 mr-2" />
            Use backup code instead
          </Button>
        )}

        <div className="flex gap-2">
          {onCancel && (
            <Button 
              variant="outline" 
              onClick={onCancel}
              disabled={isVerifying}
              className="flex-1"
            >
              Cancel
            </Button>
          )}
          <Button 
            onClick={handleVerify}
            disabled={isVerifying || code.length !== 6}
            className="flex-1"
          >
            {isVerifying ? 'Verifying...' : 'Verify'}
          </Button>
        </div>
      </CardContent>

      {attempts > 0 && attempts < 5 && (
        <CardFooter>
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription className="text-xs">
              After 5 failed attempts, your account will be locked for 30 minutes for security.
            </AlertDescription>
          </Alert>
        </CardFooter>
      )}
    </Card>
  )
}