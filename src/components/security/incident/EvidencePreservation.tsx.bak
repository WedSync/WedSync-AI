'use client';

import React, { useState } from 'react';
import { 
  FileText, 
  Image, 
  Video, 
  Database, 
  Download, 
  Lock, 
  Shield,
  Clock,
  CheckCircle,
  AlertTriangle,
  Archive,
  Hash,
  Eye,
  Upload
} from 'lucide-react';

export interface EvidenceItem {
  id: string;
  name: string;
  type: 'log' | 'screenshot' | 'video' | 'database_snapshot' | 'network_capture' | 'system_state' | 'document';
  size: number;
  capturedAt: Date;
  capturedBy: string;
  description: string;
  integrity: {
    hash: string;
    algorithm: 'SHA-256' | 'SHA-512' | 'MD5';
    verified: boolean;
    verifiedAt?: Date;
  };
  classification: 'public' | 'internal' | 'confidential' | 'restricted';
  retention: {
    minimumDays: number;
    maximumDays: number;
    legalHold: boolean;
    gdprImpact: boolean;
  };
  weddingContext?: {
    weddingId: string;
    couple: string;
    venue: string;
    date: string;
    dataTypes: string[];
  };
  chainOfCustody: {
    events: Array<{
      timestamp: Date;
      action: 'captured' | 'accessed' | 'transferred' | 'analyzed' | 'exported';
      user: string;
      details: string;
    }>;
  };
  analysis?: {
    status: 'pending' | 'in_progress' | 'completed' | 'failed';
    findings: string[];
    analyst: string;
    completedAt?: Date;
  };
}

interface EvidencePreservationProps {
  incidentId: string;
  evidence: EvidenceItem[];
  onCaptureEvidence: (type: EvidenceItem['type']) => void;
  onDownloadEvidence: (evidenceId: string) => void;
  onAnalyzeEvidence: (evidenceId: string) => void;
  onExportPackage: (evidenceIds: string[]) => void;
  isWeddingDay?: boolean;
  className?: string;
}

const EvidencePreservation: React.FC<EvidencePreservationProps> = ({
  incidentId,
  evidence,
  onCaptureEvidence,
  onDownloadEvidence,
  onAnalyzeEvidence,
  onExportPackage,
  isWeddingDay = false,
  className = ''
}) => {
  const [selectedEvidence, setSelectedEvidence] = useState<string[]>([]);
  const [filterType, setFilterType] = useState<'all' | EvidenceItem['type']>('all');
  const [showCaptureModal, setShowCaptureModal] = useState(false);

  const typeConfig = {
    log: {
      icon: FileText,
      color: 'text-blue-600',
      bgColor: 'bg-blue-50',
      borderColor: 'border-blue-200',
      label: 'System Logs'
    },
    screenshot: {
      icon: Image,
      color: 'text-green-600',
      bgColor: 'bg-green-50',
      borderColor: 'border-green-200',
      label: 'Screenshots'
    },
    video: {
      icon: Video,
      color: 'text-purple-600',
      bgColor: 'bg-purple-50',
      borderColor: 'border-purple-200',
      label: 'Video Recording'
    },
    database_snapshot: {
      icon: Database,
      color: 'text-indigo-600',
      bgColor: 'bg-indigo-50',
      borderColor: 'border-indigo-200',
      label: 'Database Snapshot'
    },
    network_capture: {
      icon: Shield,
      color: 'text-red-600',
      bgColor: 'bg-red-50',
      borderColor: 'border-red-200',
      label: 'Network Capture'
    },
    system_state: {
      icon: Archive,
      color: 'text-orange-600',
      bgColor: 'bg-orange-50',
      borderColor: 'border-orange-200',
      label: 'System State'
    },
    document: {
      icon: FileText,
      color: 'text-gray-600',
      bgColor: 'bg-gray-50',
      borderColor: 'border-gray-200',
      label: 'Documentation'
    }
  };

  const classificationConfig = {
    public: { color: 'text-green-600', bg: 'bg-green-100', label: 'Public' },
    internal: { color: 'text-blue-600', bg: 'bg-blue-100', label: 'Internal' },
    confidential: { color: 'text-orange-600', bg: 'bg-orange-100', label: 'Confidential' },
    restricted: { color: 'text-red-600', bg: 'bg-red-100', label: 'Restricted' }
  };

  const filteredEvidence = evidence.filter(item => 
    filterType === 'all' || item.type === filterType
  );

  const formatSize = (bytes: number): string => {
    const sizes = ['B', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 B';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;
  };

  const formatDate = (date: Date): string => {
    return new Intl.DateTimeFormat('en-GB', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  const handleSelectEvidence = (evidenceId: string) => {
    setSelectedEvidence(prev =>
      prev.includes(evidenceId)
        ? prev.filter(id => id !== evidenceId)
        : [...prev, evidenceId]
    );
  };

  const captureOptions: Array<{ type: EvidenceItem['type']; priority: 'high' | 'medium' | 'low' }> = [
    { type: 'log', priority: 'high' },
    { type: 'screenshot', priority: 'high' },
    { type: 'database_snapshot', priority: 'medium' },
    { type: 'system_state', priority: 'high' },
    { type: 'network_capture', priority: 'medium' },
    { type: 'video', priority: 'low' },
    { type: 'document', priority: 'medium' }
  ];

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Header with Capture Button */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold text-gray-800 flex items-center">
            <Archive className="w-5 h-5 mr-2" />
            Evidence Preservation
          </h3>
          <p className="text-sm text-gray-600 mt-1">
            {evidence.length} items collected â€¢ {selectedEvidence.length} selected
          </p>
        </div>
        
        <div className="flex items-center space-x-3">
          {selectedEvidence.length > 0 && (
            <button
              onClick={() => onExportPackage(selectedEvidence)}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center text-sm font-medium"
            >
              <Download className="w-4 h-4 mr-2" />
              Export Package ({selectedEvidence.length})
            </button>
          )}
          
          <button
            onClick={() => setShowCaptureModal(true)}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center text-sm font-medium"
          >
            <Upload className="w-4 h-4 mr-2" />
            Capture Evidence
          </button>
        </div>
      </div>

      {/* GDPR Notice for Wedding Day */}
      {isWeddingDay && evidence.some(e => e.retention.gdprImpact) && (
        <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
          <div className="flex items-center text-purple-800 font-medium mb-2">
            <Shield className="w-5 h-5 mr-2" />
            GDPR Impact Notice
          </div>
          <p className="text-purple-700 text-sm">
            Evidence contains personal data from active weddings. Ensure proper data handling procedures 
            and notify couples within 72 hours if breach affects their data.
          </p>
        </div>
      )}

      {/* Filter Tabs */}
      <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
        <button
          onClick={() => setFilterType('all')}
          className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
            filterType === 'all' 
              ? 'bg-white text-gray-900 shadow-sm' 
              : 'text-gray-600 hover:text-gray-900'
          }`}
        >
          All ({evidence.length})
        </button>
        {Object.entries(typeConfig).map(([type, config]) => {
          const count = evidence.filter(e => e.type === type).length;
          if (count === 0) return null;
          
          return (
            <button
              key={type}
              onClick={() => setFilterType(type as EvidenceItem['type'])}
              className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                filterType === type 
                  ? 'bg-white text-gray-900 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              {config.label} ({count})
            </button>
          );
        })}
      </div>

      {/* Evidence Items */}
      <div className="space-y-3">
        {filteredEvidence.map((item) => {
          const config = typeConfig[item.type];
          const Icon = config.icon;
          const classification = classificationConfig[item.classification];
          const isSelected = selectedEvidence.includes(item.id);

          return (
            <div
              key={item.id}
              className={`
                p-4 rounded-lg border transition-all cursor-pointer
                ${config.bgColor} ${config.borderColor}
                ${isSelected ? 'ring-2 ring-blue-500' : ''}
              `}
              onClick={() => handleSelectEvidence(item.id)}
            >
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3 flex-1">
                  <input
                    type="checkbox"
                    checked={isSelected}
                    onChange={() => handleSelectEvidence(item.id)}
                    className="mt-1"
                    onClick={(e) => e.stopPropagation()}
                  />
                  
                  <div className={`p-2 rounded-lg ${config.bgColor} border ${config.borderColor}`}>
                    <Icon className={`w-5 h-5 ${config.color}`} />
                  </div>
                  
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <h4 className="font-medium text-gray-800">{item.name}</h4>
                      <span className={`
                        px-2 py-1 rounded-full text-xs font-medium
                        ${classification.bg} ${classification.color}
                      `}>
                        {classification.label}
                      </span>
                      {item.retention.legalHold && (
                        <span className="px-2 py-1 bg-red-100 text-red-700 rounded-full text-xs font-medium">
                          Legal Hold
                        </span>
                      )}
                    </div>
                    
                    <p className="text-sm text-gray-600 mb-3">{item.description}</p>
                    
                    {/* Wedding Context */}
                    {item.weddingContext && (
                      <div className="mb-3 p-2 bg-white bg-opacity-60 rounded border">
                        <div className="text-xs font-medium text-gray-700 mb-1">Wedding Context</div>
                        <div className="grid grid-cols-2 gap-2 text-xs text-gray-600">
                          <div>{item.weddingContext.couple}</div>
                          <div>{item.weddingContext.date}</div>
                          <div>{item.weddingContext.venue}</div>
                          <div>{item.weddingContext.dataTypes.join(', ')}</div>
                        </div>
                      </div>
                    )}

                    {/* Metadata */}
                    <div className="flex items-center space-x-4 text-xs text-gray-500">
                      <div className="flex items-center">
                        <Clock className="w-3 h-3 mr-1" />
                        {formatDate(item.capturedAt)}
                      </div>
                      <div>{formatSize(item.size)}</div>
                      <div className="flex items-center">
                        <Hash className="w-3 h-3 mr-1" />
                        {item.integrity.algorithm}
                      </div>
                      {item.integrity.verified && (
                        <div className="flex items-center text-green-600">
                          <CheckCircle className="w-3 h-3 mr-1" />
                          Verified
                        </div>
                      )}
                    </div>

                    {/* Chain of Custody Preview */}
                    <div className="mt-2 text-xs text-gray-500">
                      Last accessed by {item.chainOfCustody.events[item.chainOfCustody.events.length - 1]?.user || 'N/A'}
                    </div>
                  </div>
                </div>

                {/* Actions */}
                <div className="flex items-center space-x-2 ml-4">
                  {item.analysis?.status === 'pending' && (
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        onAnalyzeEvidence(item.id);
                      }}
                      className="px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs font-medium hover:bg-blue-200 transition-colors"
                    >
                      Analyze
                    </button>
                  )}
                  
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onDownloadEvidence(item.id);
                    }}
                    className="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs font-medium hover:bg-gray-200 transition-colors flex items-center"
                  >
                    <Download className="w-3 h-3 mr-1" />
                    Download
                  </button>
                  
                  <button
                    onClick={(e) => e.stopPropagation()}
                    className="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs font-medium hover:bg-gray-200 transition-colors flex items-center"
                  >
                    <Eye className="w-3 h-3 mr-1" />
                    Details
                  </button>
                </div>
              </div>
            </div>
          );
        })}

        {filteredEvidence.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            <Archive className="w-12 h-12 mx-auto mb-3 text-gray-400" />
            <p>No evidence items found for the selected filter.</p>
            <button
              onClick={() => setShowCaptureModal(true)}
              className="mt-2 text-blue-600 hover:text-blue-800 underline text-sm"
            >
              Capture first evidence item
            </button>
          </div>
        )}
      </div>

      {/* Capture Evidence Modal */}
      {showCaptureModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-lg w-full mx-4">
            <div className="flex items-center mb-4">
              <Upload className="w-6 h-6 mr-2 text-blue-600" />
              <h3 className="text-lg font-semibold">Capture Evidence</h3>
            </div>
            
            <p className="text-gray-600 mb-4">
              Select the type of evidence to capture. High priority items are recommended for incident analysis.
            </p>

            <div className="space-y-2">
              {captureOptions.map(({ type, priority }) => {
                const config = typeConfig[type];
                const Icon = config.icon;
                
                return (
                  <button
                    key={type}
                    onClick={() => {
                      onCaptureEvidence(type);
                      setShowCaptureModal(false);
                    }}
                    className={`
                      w-full p-3 rounded-lg border text-left transition-all hover:shadow-sm
                      ${config.bgColor} ${config.borderColor}
                    `}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Icon className={`w-5 h-5 ${config.color}`} />
                        <span className="font-medium">{config.label}</span>
                      </div>
                      <span className={`
                        px-2 py-1 rounded text-xs font-medium
                        ${priority === 'high' ? 'bg-red-100 text-red-700' :
                          priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-gray-100 text-gray-600'}
                      `}>
                        {priority} priority
                      </span>
                    </div>
                  </button>
                );
              })}
            </div>

            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setShowCaptureModal(false)}
                className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EvidencePreservation;