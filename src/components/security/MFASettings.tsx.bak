'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Switch } from '@/components/ui/switch'
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Shield, Smartphone, QrCode, Key, CheckCircle, AlertCircle, Trash2, Plus, Settings } from 'lucide-react'
import { mfaService, MFAFactor, MFAFactorType, MFAFactorStatus } from '@/lib/auth/mfa'
import { MFASetup } from './MFASetup'
import { MFAVerification } from './MFAVerification'

interface MFASettingsProps {
  userId: string
}

export function MFASettings({ userId }: MFASettingsProps) {
  const [factors, setFactors] = useState<{ totp: MFAFactor[], phone: MFAFactor[] }>({ totp: [], phone: [] })
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [showSetup, setShowSetup] = useState(false)
  const [showRemoveDialog, setShowRemoveDialog] = useState(false)
  const [factorToRemove, setFactorToRemove] = useState<MFAFactor | null>(null)
  const [isRemoving, setIsRemoving] = useState(false)
  const [showVerification, setShowVerification] = useState(false)
  const [mfaRequired, setMfaRequired] = useState(false)
  const [backupCodes, setBackupCodes] = useState<string[]>([])
  const [showBackupCodes, setShowBackupCodes] = useState(false)

  useEffect(() => {
    loadFactors()
  }, [])

  const loadFactors = async () => {
    setIsLoading(true)
    try {
      const result = await mfaService.listFactors(userId)
      if (result.data) {
        setFactors(result.data)
        const isRequired = await mfaService.isMFARequired(userId)
        setMfaRequired(isRequired)
      }
      if (result.error) {
        setError(result.error.message)
      }
    } catch (err) {
      setError('Failed to load MFA settings')
    } finally {
      setIsLoading(false)
    }
  }

  const handleRemoveFactor = async () => {
    if (!factorToRemove) return

    setIsRemoving(true)
    setError(null)

    try {
      const result = await mfaService.unenroll(factorToRemove.id, userId)
      
      if (result.error) {
        setError(result.error.message)
      } else {
        await loadFactors()
        setShowRemoveDialog(false)
        setFactorToRemove(null)
      }
    } catch (err) {
      setError('Failed to remove authentication method')
    } finally {
      setIsRemoving(false)
    }
  }

  const generateNewBackupCodes = () => {
    const codes = []
    for (let i = 0; i < 10; i++) {
      codes.push(
        Math.random().toString(36).substring(2, 10).toUpperCase()
      )
    }
    setBackupCodes(codes)
    setShowBackupCodes(true)
  }

  const copyBackupCodes = () => {
    const codesText = backupCodes.join('\n')
    navigator.clipboard.writeText(codesText)
  }

  const getFactorIcon = (type: MFAFactorType) => {
    switch (type) {
      case MFAFactorType.TOTP:
        return <QrCode className="w-4 h-4" />
      case MFAFactorType.SMS:
        return <Smartphone className="w-4 h-4" />
      default:
        return <Key className="w-4 h-4" />
    }
  }

  const getFactorName = (type: MFAFactorType) => {
    switch (type) {
      case MFAFactorType.TOTP:
        return 'Authenticator App'
      case MFAFactorType.SMS:
        return 'SMS'
      default:
        return 'Unknown'
    }
  }

  const allFactors = [...factors.totp, ...factors.phone]
  const hasVerifiedFactors = allFactors.some(f => f.status === MFAFactorStatus.VERIFIED)

  if (isLoading) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="text-center text-muted-foreground">Loading MFA settings...</div>
        </CardContent>
      </Card>
    )
  }

  if (showSetup) {
    return (
      <MFASetup 
        userId={userId} 
        onComplete={() => {
          setShowSetup(false)
          loadFactors()
        }}
      />
    )
  }

  return (
    <>
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Shield className="w-5 h-5" />
                Two-Factor Authentication
              </CardTitle>
              <CardDescription>
                Protect your wedding vendor contracts and client data with an extra layer of security
              </CardDescription>
            </div>
            <Badge variant={hasVerifiedFactors ? 'default' : 'secondary'}>
              {hasVerifiedFactors ? 'Enabled' : 'Disabled'}
            </Badge>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {!hasVerifiedFactors && (
            <Alert>
              <Shield className="h-4 w-4" />
              <AlertDescription>
                <strong>Protect $500K+ in vendor contracts!</strong> Enable two-factor authentication to secure your wedding planning data, vendor payments, and private client information.
              </AlertDescription>
            </Alert>
          )}

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <div className="text-sm font-medium">Require MFA for all logins</div>
                <div className="text-xs text-muted-foreground">
                  Enforce two-factor authentication for maximum security
                </div>
              </div>
              <Switch 
                checked={mfaRequired}
                onCheckedChange={setMfaRequired}
                disabled={!hasVerifiedFactors}
              />
            </div>

            <div className="border-t pt-4">
              <h4 className="text-sm font-medium mb-3">Authentication Methods</h4>
              
              {allFactors.length === 0 ? (
                <div className="text-center py-8 bg-muted rounded-lg">
                  <Shield className="w-12 h-12 mx-auto mb-3 text-muted-foreground" />
                  <p className="text-sm text-muted-foreground mb-4">
                    No authentication methods configured
                  </p>
                  <Button onClick={() => setShowSetup(true)}>
                    <Plus className="w-4 h-4 mr-2" />
                    Add Authentication Method
                  </Button>
                </div>
              ) : (
                <div className="space-y-2">
                  {allFactors.map((factor) => (
                    <div 
                      key={factor.id}
                      className="flex items-center justify-between p-3 border rounded-lg"
                    >
                      <div className="flex items-center gap-3">
                        {getFactorIcon(factor.factorType)}
                        <div>
                          <div className="font-medium text-sm">
                            {factor.friendlyName || getFactorName(factor.factorType)}
                          </div>
                          {factor.phone && (
                            <div className="text-xs text-muted-foreground">{factor.phone}</div>
                          )}
                        </div>
                        {factor.status === MFAFactorStatus.VERIFIED ? (
                          <Badge variant="outline" className="text-green-600">
                            <CheckCircle className="w-3 h-3 mr-1" />
                            Verified
                          </Badge>
                        ) : (
                          <Badge variant="outline" className="text-yellow-600">
                            Unverified
                          </Badge>
                        )}
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          setFactorToRemove(factor)
                          setShowRemoveDialog(true)
                        }}
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  ))}
                  
                  <Button 
                    variant="outline" 
                    className="w-full mt-2"
                    onClick={() => setShowSetup(true)}
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Add Another Method
                  </Button>
                </div>
              )}
            </div>

            {hasVerifiedFactors && (
              <div className="border-t pt-4">
                <h4 className="text-sm font-medium mb-3">Backup Codes</h4>
                <p className="text-xs text-muted-foreground mb-3">
                  Generate backup codes to access your account if you lose your phone
                </p>
                <Button 
                  variant="outline"
                  onClick={generateNewBackupCodes}
                >
                  <Key className="w-4 h-4 mr-2" />
                  Generate New Backup Codes
                </Button>
              </div>
            )}

            <div className="border-t pt-4">
              <h4 className="text-sm font-medium mb-3">Security Settings</h4>
              <div className="space-y-3 text-sm">
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Account lockout after failed attempts</span>
                  <Badge variant="outline">5 attempts</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Lockout duration</span>
                  <Badge variant="outline">30 minutes</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Session timeout</span>
                  <Badge variant="outline">30 minutes</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Password requirements</span>
                  <Badge variant="outline">12+ chars, complex</Badge>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Dialog open={showRemoveDialog} onOpenChange={setShowRemoveDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Remove Authentication Method</DialogTitle>
            <DialogDescription>
              Are you sure you want to remove this authentication method? You'll need to set it up again if you want to use it in the future.
            </DialogDescription>
          </DialogHeader>
          {factorToRemove && (
            <div className="py-4">
              <div className="flex items-center gap-3 p-3 bg-muted rounded-lg">
                {getFactorIcon(factorToRemove.factorType)}
                <div>
                  <div className="font-medium text-sm">
                    {factorToRemove.friendlyName || getFactorName(factorToRemove.factorType)}
                  </div>
                  {factorToRemove.phone && (
                    <div className="text-xs text-muted-foreground">{factorToRemove.phone}</div>
                  )}
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setShowRemoveDialog(false)}
              disabled={isRemoving}
            >
              Cancel
            </Button>
            <Button
              variant="destructive"
              onClick={handleRemoveFactor}
              disabled={isRemoving}
            >
              {isRemoving ? 'Removing...' : 'Remove'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={showBackupCodes} onOpenChange={setShowBackupCodes}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Backup Codes</DialogTitle>
            <DialogDescription>
              Save these codes in a safe place. Each code can only be used once.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <div className="bg-muted p-4 rounded-lg">
              <div className="grid grid-cols-2 gap-2 font-mono text-sm">
                {backupCodes.map((code, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <span className="text-muted-foreground">{index + 1}.</span>
                    <span>{code}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={copyBackupCodes}
            >
              Copy Codes
            </Button>
            <Button
              onClick={() => setShowBackupCodes(false)}
            >
              I've Saved My Codes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  )
}