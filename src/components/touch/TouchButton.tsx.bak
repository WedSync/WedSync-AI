'use client'

import React, { forwardRef } from 'react'
import { cn } from '@/lib/utils'
import { useHaptic } from '@/hooks/useTouch'

interface TouchButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger'
  size?: 'sm' | 'md' | 'lg' | 'xl'
  haptic?: boolean
  hapticType?: 'light' | 'medium' | 'heavy' | 'success' | 'error'
  fullWidth?: boolean
  loading?: boolean
  icon?: React.ReactNode
  iconPosition?: 'left' | 'right'
}

export const TouchButton = forwardRef<HTMLButtonElement, TouchButtonProps>(
  ({ 
    className,
    variant = 'primary',
    size = 'md',
    haptic = true,
    hapticType = 'light',
    fullWidth = false,
    loading = false,
    icon,
    iconPosition = 'left',
    children,
    onClick,
    disabled,
    ...props 
  }, ref) => {
    const haptics = useHaptic()

    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
      if (haptic && !disabled) {
        haptics[hapticType]()
      }
      onClick?.(e)
    }

    const baseStyles = 'inline-flex items-center justify-center font-semibold transition-all duration-200 focus:outline-none focus:ring-4 disabled:opacity-50 disabled:cursor-not-allowed'
    
    const sizeStyles = {
      sm: 'min-h-[44px] px-4 py-2 text-sm rounded-lg',
      md: 'min-h-[48px] px-5 py-2.5 text-base rounded-lg',
      lg: 'min-h-[52px] px-6 py-3 text-base rounded-xl',
      xl: 'min-h-[56px] px-8 py-4 text-lg rounded-xl'
    }

    const variantStyles = {
      primary: 'bg-primary-600 hover:bg-primary-700 active:bg-primary-800 text-white shadow-xs hover:shadow-sm focus:ring-primary-100',
      secondary: 'bg-gray-100 hover:bg-gray-200 active:bg-gray-300 text-gray-700 shadow-xs hover:shadow-sm focus:ring-gray-100',
      outline: 'bg-white border-2 border-gray-300 hover:border-gray-400 active:border-gray-500 text-gray-700 focus:ring-gray-100',
      ghost: 'bg-transparent hover:bg-gray-100 active:bg-gray-200 text-gray-700 focus:ring-gray-100',
      danger: 'bg-error-600 hover:bg-error-700 active:bg-error-800 text-white shadow-xs hover:shadow-sm focus:ring-error-100'
    }

    return (
      <button
        ref={ref}
        className={cn(
          baseStyles,
          sizeStyles[size],
          variantStyles[variant],
          fullWidth && 'w-full',
          loading && 'cursor-wait',
          className
        )}
        onClick={handleClick}
        disabled={disabled || loading}
        {...props}
      >
        {loading ? (
          <div className="flex items-center space-x-2">
            <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
            </svg>
            <span>Loading...</span>
          </div>
        ) : (
          <>
            {icon && iconPosition === 'left' && (
              <span className="mr-2">{icon}</span>
            )}
            {children}
            {icon && iconPosition === 'right' && (
              <span className="ml-2">{icon}</span>
            )}
          </>
        )}
      </button>
    )
  }
)

TouchButton.displayName = 'TouchButton'