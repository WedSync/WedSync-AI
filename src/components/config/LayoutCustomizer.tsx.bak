/**
 * Layout Customizer Component
 * 
 * Advanced layout customization for dashboard sections with responsive design
 * Supports grid-based layouts, drag-and-drop positioning, and wedding industry templates
 * 
 * Business Context:
 * - Wedding planners create client-specific dashboard layouts
 * - Vendors customize their portfolio presentation
 * - Couples personalize their planning experience
 * - Mobile-first design for on-the-go wedding professionals
 * 
 * @fileoverview Layout customization interface with grid system and responsive design
 */

'use client'

import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react'
import { 
  Grid3X3, 
  Smartphone, 
  Tablet, 
  Monitor, 
  Eye, 
  Save, 
  RotateCcw, 
  Settings, 
  Move, 
  Maximize2, 
  Minimize2,
  Layout,
  Palette,
  Zap,
  Heart,
  Camera,
  Calendar,
  Users,
  MapPin,
  Utensils
} from 'lucide-react'

// Types
import type {
  LayoutCustomizerProps,
  LayoutConfiguration,
  LayoutSection,
  LayoutTemplate,
  SectionType
} from '@/types/section-configuration'

// UI Components
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Slider } from '@/components/ui/slider'
import { Switch } from '@/components/ui/switch'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'

/**
 * Viewport sizes for responsive design testing
 */
const VIEWPORT_SIZES = {
  mobile: { width: 375, height: 667, label: 'Mobile', icon: Smartphone },
  tablet: { width: 768, height: 1024, label: 'Tablet', icon: Tablet },
  desktop: { width: 1440, height: 900, label: 'Desktop', icon: Monitor }
} as const

/**
 * Pre-defined layout templates for different wedding industry roles
 */
const LAYOUT_TEMPLATES: LayoutTemplate[] = [
  {
    id: 'planner-dashboard',
    name: 'Planner Dashboard',
    description: 'Comprehensive layout for wedding planners managing multiple clients',
    previewUrl: '/images/layouts/planner-dashboard.png',
    targetRoles: ['planner', 'admin'],
    suitablePhases: ['planning', 'pre_wedding', 'wedding_day'],
    usageCount: 247,
    rating: 4.8,
    layout: {
      id: 'planner-dashboard-layout',
      name: 'Planner Dashboard',
      grid: { columns: 12, rows: 8, gap: 16 },
      sections: [
        {
          sectionType: 'overview',
          position: { x: 0, y: 0, width: 12, height: 2 },
          resizable: true,
          minSize: { width: 6, height: 1 }
        },
        {
          sectionType: 'timeline',
          position: { x: 0, y: 2, width: 8, height: 4 },
          resizable: true,
          minSize: { width: 6, height: 3 }
        },
        {
          sectionType: 'budget',
          position: { x: 8, y: 2, width: 4, height: 2 },
          resizable: true,
          minSize: { width: 3, height: 2 }
        },
        {
          sectionType: 'tasks',
          position: { x: 8, y: 4, width: 4, height: 2 },
          resizable: true,
          minSize: { width: 3, height: 2 }
        },
        {
          sectionType: 'vendors',
          position: { x: 0, y: 6, width: 6, height: 2 },
          resizable: true,
          minSize: { width: 4, height: 2 }
        },
        {
          sectionType: 'messages',
          position: { x: 6, y: 6, width: 6, height: 2 },
          resizable: true,
          minSize: { width: 4, height: 2 }
        }
      ],
      breakpoints: { mobile: 375, tablet: 768, desktop: 1440 },
      isResponsive: true
    }
  },
  {
    id: 'couple-simple',
    name: 'Couple Simple',
    description: 'Clean, simplified layout focused on wedding planning essentials',
    previewUrl: '/images/layouts/couple-simple.png',
    targetRoles: ['couple'],
    suitablePhases: ['planning', 'pre_wedding'],
    usageCount: 892,
    rating: 4.9,
    layout: {
      id: 'couple-simple-layout',
      name: 'Couple Simple',
      grid: { columns: 6, rows: 6, gap: 20 },
      sections: [
        {
          sectionType: 'timeline',
          position: { x: 0, y: 0, width: 6, height: 3 },
          resizable: false,
          minSize: { width: 6, height: 3 }
        },
        {
          sectionType: 'budget',
          position: { x: 0, y: 3, width: 3, height: 2 },
          resizable: false,
          minSize: { width: 3, height: 2 }
        },
        {
          sectionType: 'guest_list',
          position: { x: 3, y: 3, width: 3, height: 2 },
          resizable: false,
          minSize: { width: 3, height: 2 }
        },
        {
          sectionType: 'vendors',
          position: { x: 0, y: 5, width: 6, height: 1 },
          resizable: false,
          minSize: { width: 6, height: 1 }
        }
      ],
      breakpoints: { mobile: 375, tablet: 768, desktop: 1440 },
      isResponsive: true
    }
  },
  {
    id: 'photographer-portfolio',
    name: 'Photography Portfolio',
    description: 'Visual-focused layout for photographers showcasing their work',
    previewUrl: '/images/layouts/photographer-portfolio.png',
    targetRoles: ['vendor'],
    suitablePhases: ['planning', 'pre_wedding', 'wedding_day'],
    usageCount: 156,
    rating: 4.7,
    layout: {
      id: 'photographer-portfolio-layout',
      name: 'Photography Portfolio',
      grid: { columns: 8, rows: 10, gap: 12 },
      sections: [
        {
          sectionType: 'photography',
          position: { x: 0, y: 0, width: 8, height: 6 },
          resizable: true,
          minSize: { width: 6, height: 4 }
        },
        {
          sectionType: 'timeline',
          position: { x: 0, y: 6, width: 4, height: 2 },
          resizable: true,
          minSize: { width: 3, height: 2 }
        },
        {
          sectionType: 'messages',
          position: { x: 4, y: 6, width: 4, height: 2 },
          resizable: true,
          minSize: { width: 3, height: 2 }
        },
        {
          sectionType: 'documents',
          position: { x: 0, y: 8, width: 8, height: 2 },
          resizable: true,
          minSize: { width: 4, height: 1 }
        }
      ],
      breakpoints: { mobile: 375, tablet: 768, desktop: 1440 },
      isResponsive: true
    }
  },
  {
    id: 'wedding-day-control',
    name: 'Wedding Day Control',
    description: 'Essential sections for wedding day coordination and management',
    previewUrl: '/images/layouts/wedding-day-control.png',
    targetRoles: ['planner', 'couple', 'admin'],
    suitablePhases: ['wedding_day'],
    usageCount: 89,
    rating: 4.9,
    layout: {
      id: 'wedding-day-control-layout',
      name: 'Wedding Day Control',
      grid: { columns: 6, rows: 8, gap: 8 },
      sections: [
        {
          sectionType: 'timeline',
          position: { x: 0, y: 0, width: 6, height: 4 },
          resizable: false,
          minSize: { width: 6, height: 4 }
        },
        {
          sectionType: 'messages',
          position: { x: 0, y: 4, width: 3, height: 2 },
          resizable: false,
          minSize: { width: 3, height: 2 }
        },
        {
          sectionType: 'vendors',
          position: { x: 3, y: 4, width: 3, height: 2 },
          resizable: false,
          minSize: { width: 3, height: 2 }
        },
        {
          sectionType: 'tasks',
          position: { x: 0, y: 6, width: 6, height: 2 },
          resizable: false,
          minSize: { width: 6, height: 2 }
        }
      ],
      breakpoints: { mobile: 375, tablet: 768, desktop: 1440 },
      isResponsive: true
    }
  }
]

/**
 * Get icon for section type
 */
function getSectionIcon(sectionType: SectionType) {
  const icons = {
    overview: Grid3X3,
    timeline: Calendar,
    budget: Heart,
    guest_list: Users,
    vendors: MapPin,
    tasks: Settings,
    photography: Camera,
    venues: MapPin,
    catering: Utensils,
    flowers: Heart,
    music: Zap,
    messages: Heart,
    notifications: Heart,
    documents: Settings,
    analytics: Grid3X3,
    reports: Settings,
    custom: Settings
  }
  return icons[sectionType] || Settings
}

/**
 * Get section display name
 */
function getSectionDisplayName(sectionType: SectionType): string {
  const names = {
    overview: 'Overview',
    timeline: 'Timeline',
    budget: 'Budget',
    guest_list: 'Guest List',
    vendors: 'Vendors',
    tasks: 'Tasks',
    photography: 'Photography',
    venues: 'Venues',
    catering: 'Catering',
    flowers: 'Flowers',
    music: 'Music',
    messages: 'Messages',
    notifications: 'Notifications',
    documents: 'Documents',
    analytics: 'Analytics',
    reports: 'Reports',
    custom: 'Custom'
  }
  return names[sectionType] || sectionType
}

/**
 * Layout Customizer Component
 * 
 * Advanced layout editor for dashboard customization
 */
export function LayoutCustomizer({
  layout,
  templates,
  onLayoutChange,
  previewMode = false,
  viewportSize = 'desktop',
  className
}: LayoutCustomizerProps) {
  // State
  const [currentLayout, setCurrentLayout] = useState<LayoutConfiguration>(layout)
  const [selectedSection, setSelectedSection] = useState<string | null>(null)
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null)
  const [currentViewport, setCurrentViewport] = useState(viewportSize)
  const [isDragging, setIsDragging] = useState(false)
  const [draggedSection, setDraggedSection] = useState<string | null>(null)
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false)

  // Refs
  const gridRef = useRef<HTMLDivElement>(null)

  // Get current viewport configuration
  const viewport = VIEWPORT_SIZES[currentViewport]

  // Calculate grid cell size based on viewport
  const gridCellSize = useMemo(() => {
    const availableWidth = viewport.width - (currentLayout.grid.gap * (currentLayout.grid.columns + 1))
    const cellWidth = availableWidth / currentLayout.grid.columns
    
    const availableHeight = viewport.height - (currentLayout.grid.gap * (currentLayout.grid.rows + 1))
    const cellHeight = availableHeight / currentLayout.grid.rows
    
    return { width: cellWidth, height: cellHeight }
  }, [viewport, currentLayout.grid])

  // Handle template selection
  const applyTemplate = useCallback((templateId: string) => {
    const template = templates.find(t => t.id === templateId)
    if (!template) return

    setCurrentLayout(template.layout)
    setSelectedTemplate(templateId)
    setHasUnsavedChanges(true)
    onLayoutChange(template.layout)
  }, [templates, onLayoutChange])

  // Handle section positioning
  const updateSectionPosition = useCallback((
    sectionType: SectionType,
    newPosition: LayoutSection['position']
  ) => {
    const updatedSections = currentLayout.sections.map(section =>
      section.sectionType === sectionType
        ? { ...section, position: newPosition }
        : section
    )

    const updatedLayout = {
      ...currentLayout,
      sections: updatedSections
    }

    setCurrentLayout(updatedLayout)
    setHasUnsavedChanges(true)
    onLayoutChange(updatedLayout)
  }, [currentLayout, onLayoutChange])

  // Handle grid settings update
  const updateGridSettings = useCallback((updates: Partial<LayoutConfiguration['grid']>) => {
    const updatedLayout = {
      ...currentLayout,
      grid: { ...currentLayout.grid, ...updates }
    }

    setCurrentLayout(updatedLayout)
    setHasUnsavedChanges(true)
    onLayoutChange(updatedLayout)
  }, [currentLayout, onLayoutChange])

  // Handle section selection
  const handleSectionSelect = useCallback((sectionType: string) => {
    setSelectedSection(selectedSection === sectionType ? null : sectionType)
  }, [selectedSection])

  // Handle viewport change
  const handleViewportChange = useCallback((newViewport: keyof typeof VIEWPORT_SIZES) => {
    setCurrentViewport(newViewport)
  }, [])

  // Save layout
  const saveLayout = useCallback(() => {
    // In real app, this would save to backend
    setHasUnsavedChanges(false)
    console.log('Saving layout:', currentLayout)
  }, [currentLayout])

  // Reset layout
  const resetLayout = useCallback(() => {
    setCurrentLayout(layout)
    setHasUnsavedChanges(false)
    setSelectedSection(null)
    setSelectedTemplate(null)
  }, [layout])

  // Render section in grid
  const renderSection = useCallback((section: LayoutSection) => {
    const IconComponent = getSectionIcon(section.sectionType)
    const isSelected = selectedSection === section.sectionType
    
    const style = {
      gridColumnStart: section.position.x + 1,
      gridColumnEnd: section.position.x + section.position.width + 1,
      gridRowStart: section.position.y + 1,
      gridRowEnd: section.position.y + section.position.height + 1
    }

    return (
      <div
        key={section.sectionType}
        style={style}
        className={`
          relative bg-white border-2 rounded-lg p-3 cursor-pointer transition-all
          ${isSelected 
            ? 'border-blue-500 shadow-lg ring-2 ring-blue-200' 
            : 'border-gray-200 hover:border-gray-300 hover:shadow-sm'
          }
          ${isDragging && draggedSection === section.sectionType ? 'opacity-50' : ''}
        `}
        onClick={() => handleSectionSelect(section.sectionType)}
      >
        {/* Section Content */}
        <div className="h-full flex flex-col">
          <div className="flex items-center gap-2 mb-2">
            <IconComponent className="w-4 h-4 text-blue-600" />
            <span className="text-sm font-medium text-gray-900">
              {getSectionDisplayName(section.sectionType)}
            </span>
          </div>
          
          <div className="flex-1 bg-gray-50 rounded border border-dashed border-gray-300 flex items-center justify-center">
            <span className="text-xs text-gray-500">
              {section.position.width} × {section.position.height}
            </span>
          </div>

          {/* Resize Handle */}
          {section.resizable && (
            <div className="absolute bottom-1 right-1 w-3 h-3 bg-blue-600 rounded-sm cursor-se-resize opacity-0 group-hover:opacity-100 transition-opacity" />
          )}

          {/* Selection Indicator */}
          {isSelected && (
            <div className="absolute inset-0 border-2 border-blue-500 rounded-lg pointer-events-none" />
          )}
        </div>
      </div>
    )
  }, [selectedSection, isDragging, draggedSection, handleSectionSelect])

  return (
    <div className={`layout-customizer ${className}`}>
      {/* Header */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Layout Customizer</h2>
          <p className="text-gray-600">Design your perfect wedding dashboard layout</p>
        </div>

        <div className="flex items-center gap-3">
          {hasUnsavedChanges && (
            <Button variant="outline" onClick={resetLayout}>
              <RotateCcw className="w-4 h-4 mr-2" />
              Reset
            </Button>
          )}
          
          <Button onClick={saveLayout} disabled={!hasUnsavedChanges}>
            <Save className="w-4 h-4 mr-2" />
            Save Layout
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Controls Panel */}
        <div className="lg:col-span-1 space-y-6">
          <Tabs defaultValue="templates" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="templates">Templates</TabsTrigger>
              <TabsTrigger value="grid">Grid</TabsTrigger>
              <TabsTrigger value="section">Section</TabsTrigger>
            </TabsList>

            {/* Templates Tab */}
            <TabsContent value="templates" className="space-y-4">
              <div className="space-y-3">
                <h3 className="font-semibold">Layout Templates</h3>
                
                {LAYOUT_TEMPLATES.map(template => (
                  <Card 
                    key={template.id}
                    className={`cursor-pointer transition-all ${
                      selectedTemplate === template.id 
                        ? 'ring-2 ring-blue-500 border-blue-500' 
                        : 'hover:border-gray-300'
                    }`}
                    onClick={() => applyTemplate(template.id)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <div className="w-12 h-12 bg-gradient-to-br from-blue-100 to-purple-100 rounded-lg flex items-center justify-center flex-shrink-0">
                          <Layout className="w-6 h-6 text-blue-600" />
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <h4 className="font-medium text-gray-900 mb-1">
                            {template.name}
                          </h4>
                          <p className="text-xs text-gray-600 mb-2">
                            {template.description}
                          </p>
                          
                          <div className="flex items-center gap-2 text-xs text-gray-500">
                            <span>{template.usageCount} uses</span>
                            <span>•</span>
                            <span>⭐ {template.rating}</span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>

            {/* Grid Tab */}
            <TabsContent value="grid" className="space-y-4">
              <div className="space-y-4">
                <h3 className="font-semibold">Grid Settings</h3>
                
                <div className="space-y-3">
                  <div>
                    <label className="text-sm font-medium text-gray-700 mb-2 block">
                      Columns: {currentLayout.grid.columns}
                    </label>
                    <Slider
                      value={[currentLayout.grid.columns]}
                      onValueChange={([value]) => updateGridSettings({ columns: value })}
                      min={4}
                      max={16}
                      step={1}
                      className="w-full"
                    />
                  </div>

                  <div>
                    <label className="text-sm font-medium text-gray-700 mb-2 block">
                      Rows: {currentLayout.grid.rows}
                    </label>
                    <Slider
                      value={[currentLayout.grid.rows]}
                      onValueChange={([value]) => updateGridSettings({ rows: value })}
                      min={4}
                      max={12}
                      step={1}
                      className="w-full"
                    />
                  </div>

                  <div>
                    <label className="text-sm font-medium text-gray-700 mb-2 block">
                      Gap: {currentLayout.grid.gap}px
                    </label>
                    <Slider
                      value={[currentLayout.grid.gap]}
                      onValueChange={([value]) => updateGridSettings({ gap: value })}
                      min={8}
                      max={32}
                      step={4}
                      className="w-full"
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <label className="text-sm font-medium text-gray-700">
                      Responsive Layout
                    </label>
                    <Switch
                      checked={currentLayout.isResponsive}
                      onCheckedChange={(checked) => 
                        setCurrentLayout(prev => ({ ...prev, isResponsive: checked }))
                      }
                    />
                  </div>
                </div>
              </div>
            </TabsContent>

            {/* Section Tab */}
            <TabsContent value="section" className="space-y-4">
              <div className="space-y-4">
                <h3 className="font-semibold">Section Properties</h3>
                
                {selectedSection ? (
                  <div className="space-y-3">
                    <div className="p-3 bg-blue-50 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        {(() => {
                          const IconComponent = getSectionIcon(selectedSection as SectionType)
                          return <IconComponent className="w-4 h-4 text-blue-600" />
                        })()}
                        <span className="font-medium text-blue-900">
                          {getSectionDisplayName(selectedSection as SectionType)}
                        </span>
                      </div>
                      
                      {(() => {
                        const section = currentLayout.sections.find(s => s.sectionType === selectedSection)
                        if (!section) return null
                        
                        return (
                          <div className="space-y-2">
                            <div className="text-xs text-blue-700">
                              Position: {section.position.x}, {section.position.y}
                            </div>
                            <div className="text-xs text-blue-700">
                              Size: {section.position.width} × {section.position.height}
                            </div>
                          </div>
                        )
                      })()}
                    </div>
                    
                    <div className="text-xs text-gray-500">
                      Click on a section in the grid to edit its properties
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    <Grid3X3 className="w-12 h-12 mx-auto mb-3 opacity-50" />
                    <p className="text-sm">Select a section to edit its properties</p>
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>
        </div>

        {/* Layout Preview */}
        <div className="lg:col-span-3">
          {/* Viewport Controls */}
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="text-xs">
                {viewport.width} × {viewport.height}
              </Badge>
              <span className="text-sm text-gray-600">
                {currentLayout.sections.length} sections
              </span>
            </div>

            <div className="flex items-center gap-1">
              {Object.entries(VIEWPORT_SIZES).map(([key, size]) => {
                const IconComponent = size.icon
                return (
                  <Button
                    key={key}
                    variant={currentViewport === key ? "default" : "outline"}
                    size="sm"
                    onClick={() => handleViewportChange(key as keyof typeof VIEWPORT_SIZES)}
                  >
                    <IconComponent className="w-4 h-4" />
                  </Button>
                )
              })}
            </div>
          </div>

          {/* Layout Grid */}
          <div className="relative">
            <div 
              ref={gridRef}
              className="border border-gray-200 rounded-lg overflow-hidden bg-gray-50"
              style={{
                width: viewport.width,
                height: viewport.height,
                maxWidth: '100%'
              }}
            >
              <div
                className="relative w-full h-full p-4"
                style={{
                  display: 'grid',
                  gridTemplateColumns: `repeat(${currentLayout.grid.columns}, 1fr)`,
                  gridTemplateRows: `repeat(${currentLayout.grid.rows}, 1fr)`,
                  gap: `${currentLayout.grid.gap}px`
                }}
              >
                {/* Grid Guidelines (show when editing) */}
                {!previewMode && (
                  <div className="absolute inset-0 pointer-events-none">
                    {Array.from({ length: currentLayout.grid.columns - 1 }).map((_, i) => (
                      <div
                        key={`col-${i}`}
                        className="absolute top-0 bottom-0 border-l border-gray-300 opacity-30"
                        style={{
                          left: `${((i + 1) * (100 / currentLayout.grid.columns))}%`
                        }}
                      />
                    ))}
                    {Array.from({ length: currentLayout.grid.rows - 1 }).map((_, i) => (
                      <div
                        key={`row-${i}`}
                        className="absolute left-0 right-0 border-t border-gray-300 opacity-30"
                        style={{
                          top: `${((i + 1) * (100 / currentLayout.grid.rows))}%`
                        }}
                      />
                    ))}
                  </div>
                )}

                {/* Layout Sections */}
                {currentLayout.sections.map(section => renderSection(section))}
              </div>
            </div>

            {/* Preview Mode Overlay */}
            {previewMode && (
              <div className="absolute top-4 right-4">
                <Badge variant="secondary" className="bg-green-100 text-green-800">
                  <Eye className="w-3 h-3 mr-1" />
                  Preview Mode
                </Badge>
              </div>
            )}
          </div>

          {/* Wedding Context Help */}
          <div className="mt-6 p-4 bg-gradient-to-r from-pink-50 to-purple-50 rounded-lg border border-pink-200">
            <div className="flex items-start gap-3">
              <Heart className="w-5 h-5 text-pink-600 flex-shrink-0 mt-0.5" />
              <div>
                <h4 className="font-medium text-pink-900 mb-1">
                  Wedding Dashboard Design Tips
                </h4>
                <ul className="text-sm text-pink-800 space-y-1">
                  <li>• Keep essential sections like timeline and contacts easily accessible</li>
                  <li>• Hide financial information from guests for privacy</li>
                  <li>• Use larger sections for complex information like vendor details</li>
                  <li>• Design for mobile - 60% of users access on their phones</li>
                  <li>• Consider wedding day stress - simple layouts work better</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default LayoutCustomizer