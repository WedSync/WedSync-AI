'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  Network,
  GitBranch,
  AlertTriangle,
  CheckCircle,
  Clock,
  TrendingUp,
  Target,
  Plus,
  Trash2,
  Eye,
  Zap,
  Users,
  Calendar,
  BarChart3,
  Route,
  Loader2,
  RefreshCw,
  Lightbulb,
  AlertCircle,
  Play
} from 'lucide-react';
import { toast } from '@/components/ui/use-toast';

interface TaskDependencyManagerProps {
  weddingId: string;
  availableTasks: {
    id: string;
    title: string;
    category: string;
    priority: string;
    status: string;
    deadline: string;
    estimated_duration: number;
    assigned_to: string | null;
  }[];
  onRefresh?: () => void;
}

interface CriticalPath {
  tasks: TaskNode[];
  total_duration: number;
  total_float: number;
  bottlenecks: string[];
  risk_level: 'low' | 'medium' | 'high' | 'critical';
  completion_probability: number;
}

interface TaskNode {
  id: string;
  title: string;
  status: string;
  estimated_duration: number;
  buffer_time: number;
  deadline: Date;
  earliest_start: Date;
  latest_start: Date;
  earliest_finish: Date;
  latest_finish: Date;
  total_float: number;
  is_critical: boolean;
}

interface DependencyValidation {
  is_valid: boolean;
  errors: string[];
  warnings: string[];
  suggestions: string[];
}

interface DependencySuggestion {
  task_id: string;
  title: string;
  reason: string;
  confidence: number;
}

export default function TaskDependencyManager({
  weddingId,
  availableTasks,
  onRefresh
}: TaskDependencyManagerProps) {
  const [criticalPath, setCriticalPath] = useState<CriticalPath | null>(null);
  const [loading, setLoading] = useState(false);
  const [showAddDependency, setShowAddDependency] = useState(false);
  const [selectedTask, setSelectedTask] = useState<string>('');
  const [suggestions, setSuggestions] = useState<DependencySuggestion[]>([]);
  const [validation, setValidation] = useState<DependencyValidation | null>(null);

  // New dependency form state
  const [newDependency, setNewDependency] = useState({
    predecessorTaskId: '',
    successorTaskId: '',
    dependencyType: 'finish_to_start',
    lagTime: 0
  });

  useEffect(() => {
    if (weddingId) {
      fetchCriticalPath();
    }
  }, [weddingId, fetchCriticalPath]); // Add fetchCriticalPath to dependencies

  const fetchCriticalPath = useCallback(async () => {
    setLoading(true);
    try {
      const response = await fetch(`/api/tasks/dependencies?action=critical_path&weddingId=${weddingId}`);
      const data = await response.json();

      if (data.success) {
        setCriticalPath(data.critical_path);
      } else {
        throw new Error(data.error);
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Failed to fetch critical path:', error);
      }
      toast({
        title: 'Error',
        description: 'Failed to load dependency analysis',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }, [weddingId, toast]); // Add dependencies

  const fetchDependencySuggestions = async (taskId: string) => {
    try {
      const response = await fetch(`/api/tasks/dependencies?action=dependency_suggestions&taskId=${taskId}`);
      const data = await response.json();

      if (data.success) {
        setSuggestions(data.suggestions);
      }
    } catch (error) {
      console.error('Failed to fetch suggestions:', error);
    }
  };

  const validateDependency = async (predecessorId: string, successorId: string, depType: string) => {
    try {
      const response = await fetch('/api/tasks/dependencies', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'validate_dependency',
          data: { predecessorId, successorId, depType }
        }),
      });

      const data = await response.json();

      if (data.success) {
        setValidation(data.validation);
      }
    } catch (error) {
      console.error('Validation failed:', error);
    }
  };

  const handleAddDependency = async () => {
    if (!newDependency.predecessorTaskId || !newDependency.successorTaskId) {
      toast({
        title: 'Error',
        description: 'Please select both predecessor and successor tasks',
        variant: 'destructive',
      });
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/tasks/dependencies', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'add_dependency',
          data: newDependency
        }),
      });

      const data = await response.json();

      if (data.success) {
        toast({
          title: 'Success',
          description: 'Dependency added successfully',
        });

        setShowAddDependency(false);
        setNewDependency({
          predecessorTaskId: '',
          successorTaskId: '',
          dependencyType: 'finish_to_start',
          lagTime: 0
        });
        setValidation(null);

        await fetchCriticalPath();
        if (onRefresh) onRefresh();
      } else {
        throw new Error(data.error);
      }
    } catch (error) {
      console.error('Failed to add dependency:', error);
      toast({
        title: 'Error',
        description: 'Failed to add dependency',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const handleTaskSelect = (taskId: string) => {
    setSelectedTask(taskId);
    if (taskId) {
      fetchDependencySuggestions(taskId);
    }
  };

  const handlePredecessorChange = (predecessorId: string) => {
    setNewDependency(prev => ({ ...prev, predecessorTaskId: predecessorId }));

    if (predecessorId && newDependency.successorTaskId) {
      validateDependency(predecessorId, newDependency.successorTaskId, newDependency.dependencyType);
    }
  };

  const handleSuccessorChange = (successorId: string) => {
    setNewDependency(prev => ({ ...prev, successorTaskId: successorId }));

    if (newDependency.predecessorTaskId && successorId) {
      validateDependency(newDependency.predecessorTaskId, successorId, newDependency.dependencyType);
    }
  };

  const getRiskLevelColor = (riskLevel: string) => {
    const colors = {
      low: 'text-green-600 bg-green-100',
      medium: 'text-yellow-600 bg-yellow-100',
      high: 'text-orange-600 bg-orange-100',
      critical: 'text-red-600 bg-red-100'
    };
    return colors[riskLevel as keyof typeof colors] || 'text-gray-600 bg-gray-100';
  };

  const getStatusColor = (status: string) => {
    const colors = {
      'todo': 'bg-gray-100 text-gray-800',
      'in_progress': 'bg-blue-100 text-blue-800',
      'review': 'bg-yellow-100 text-yellow-800',
      'completed': 'bg-green-100 text-green-800',
      'blocked': 'bg-red-100 text-red-800'
    };
    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  const totalTasks = availableTasks.length;
  const criticalTasksCount = criticalPath?.tasks.length || 0;
  const riskLevel = criticalPath?.risk_level || 'low';
  const completionProbability = criticalPath?.completion_probability || 100;

  return (
    <div className="space-y-6">
      {/* Header Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Critical Path</CardTitle>
            <Route className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{criticalTasksCount}/{totalTasks}</div>
            <p className="text-xs text-muted-foreground">tasks on critical path</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Risk Level</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <Badge className={getRiskLevelColor(riskLevel)}>
                {riskLevel.toUpperCase()}
              </Badge>
            </div>
            <p className="text-xs text-muted-foreground mt-1">project risk assessment</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Completion Probability</CardTitle>
            <Target className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{Math.round(completionProbability)}%</div>
            <Progress value={completionProbability} className="mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Duration</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{Math.round(criticalPath?.total_duration || 0)}h</div>
            <p className="text-xs text-muted-foreground">critical path duration</p>
          </CardContent>
        </Card>
      </div>

      {/* Main Tabs Interface */}
      <Tabs defaultValue="overview" className="w-full">
        <div className="flex items-center justify-between">
          <TabsList className="grid w-full max-w-md grid-cols-4">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="dependencies">Dependencies</TabsTrigger>
            <TabsTrigger value="critical-path">Critical Path</TabsTrigger>
            <TabsTrigger value="suggestions">Suggestions</TabsTrigger>
          </TabsList>

          <div className="flex gap-2">
            <Dialog open={showAddDependency} onOpenChange={setShowAddDependency}>
              <DialogTrigger asChild>
                <Button className="flex items-center gap-2">
                  <Plus className="h-4 w-4" />
                  Add Dependency
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Add Task Dependency</DialogTitle>
                  <DialogDescription>
                    Create a dependency relationship between two tasks
                  </DialogDescription>
                </DialogHeader>

                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Predecessor Task</Label>
                      <Select value={newDependency.predecessorTaskId} onValueChange={handlePredecessorChange}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select predecessor task" />
                        </SelectTrigger>
                        <SelectContent>
                          {availableTasks.map(task => (
                            <SelectItem key={task.id} value={task.id}>
                              {task.title}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <Label>Successor Task</Label>
                      <Select value={newDependency.successorTaskId} onValueChange={handleSuccessorChange}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select successor task" />
                        </SelectTrigger>
                        <SelectContent>
                          {availableTasks.map(task => (
                            <SelectItem key={task.id} value={task.id}>
                              {task.title}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Dependency Type</Label>
                      <Select
                        value={newDependency.dependencyType}
                        onValueChange={(value) => setNewDependency(prev => ({ ...prev, dependencyType: value }))}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="finish_to_start">Finish to Start (Most Common)</SelectItem>
                          <SelectItem value="start_to_start">Start to Start</SelectItem>
                          <SelectItem value="finish_to_finish">Finish to Finish</SelectItem>
                          <SelectItem value="start_to_finish">Start to Finish</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <Label>Lag Time (hours)</Label>
                      <Input
                        type="number"
                        value={newDependency.lagTime}
                        onChange={(e) => setNewDependency(prev => ({ ...prev, lagTime: parseInt(e.target.value) || 0 }))}
                        placeholder="0"
                      />
                    </div>
                  </div>

                  {validation && (
                    <div className="space-y-3">
                      {validation.errors.length > 0 && (
                        <div className="p-3 border border-red-200 rounded-lg bg-red-50">
                          <div className="flex items-center gap-2 mb-2">
                            <AlertCircle className="h-4 w-4 text-red-600" />
                            <span className="text-sm font-medium text-red-800">Errors</span>
                          </div>
                          <ul className="text-sm text-red-700 space-y-1">
                            {validation.errors.map((error, index) => (
                              <li key={index}>• {error}</li>
                            ))}
                          </ul>
                        </div>
                      )}

                      {validation.warnings.length > 0 && (
                        <div className="p-3 border border-yellow-200 rounded-lg bg-yellow-50">
                          <div className="flex items-center gap-2 mb-2">
                            <AlertTriangle className="h-4 w-4 text-yellow-600" />
                            <span className="text-sm font-medium text-yellow-800">Warnings</span>
                          </div>
                          <ul className="text-sm text-yellow-700 space-y-1">
                            {validation.warnings.map((warning, index) => (
                              <li key={index}>• {warning}</li>
                            ))}
                          </ul>
                        </div>
                      )}

                      {validation.suggestions.length > 0 && (
                        <div className="p-3 border border-blue-200 rounded-lg bg-blue-50">
                          <div className="flex items-center gap-2 mb-2">
                            <Lightbulb className="h-4 w-4 text-blue-600" />
                            <span className="text-sm font-medium text-blue-800">Suggestions</span>
                          </div>
                          <ul className="text-sm text-blue-700 space-y-1">
                            {validation.suggestions.map((suggestion, index) => (
                              <li key={index}>• {suggestion}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  )}

                  <div className="flex justify-end gap-2 pt-4">
                    <Button variant="outline" onClick={() => setShowAddDependency(false)}>
                      Cancel
                    </Button>
                    <Button
                      onClick={handleAddDependency}
                      disabled={loading || !validation?.is_valid}
                    >
                      {loading && <Loader2 className="h-4 w-4 mr-2 animate-spin" />}
                      Add Dependency
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>

            <Button
              variant="outline"
              onClick={fetchCriticalPath}
              className="flex items-center gap-2"
            >
              <RefreshCw className="h-4 w-4" />
              Refresh
            </Button>
          </div>
        </div>

        <TabsContent value="overview" className="space-y-6">
          {criticalPath && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Project Health</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm">Completion Probability</span>
                      <span className="text-sm font-medium">{Math.round(completionProbability)}%</span>
                    </div>
                    <Progress value={completionProbability} />
                  </div>

                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm">Critical Path Coverage</span>
                      <span className="text-sm font-medium">{Math.round((criticalTasksCount / totalTasks) * 100)}%</span>
                    </div>
                    <Progress value={(criticalTasksCount / totalTasks) * 100} />
                  </div>

                  <div className="pt-4 border-t">
                    <div className="flex items-center gap-2 mb-2">
                      <AlertTriangle className="h-4 w-4" />
                      <span className="text-sm font-medium">Risk Assessment</span>
                    </div>
                    <Badge className={getRiskLevelColor(riskLevel)}>
                      {riskLevel.toUpperCase()} RISK
                    </Badge>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Bottlenecks</CardTitle>
                </CardHeader>
                <CardContent>
                  {criticalPath.bottlenecks.length > 0 ? (
                    <div className="space-y-2">
                      {criticalPath.bottlenecks.map((bottleneckId) => {
                        const task = availableTasks.find(t => t.id === bottleneckId);
                        return task ? (
                          <div key={bottleneckId} className="flex items-center justify-between p-3 border rounded-lg">
                            <div>
                              <p className="font-medium">{task.title}</p>
                              <p className="text-sm text-gray-600">{task.category}</p>
                            </div>
                            <Badge variant="outline" className="text-red-600">
                              Bottleneck
                            </Badge>
                          </div>
                        ) : null;
                      })}
                    </div>
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      <CheckCircle className="h-8 w-8 mx-auto mb-2" />
                      <p>No bottlenecks identified</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          )}

          <Card>
            <CardHeader>
              <CardTitle>Quick Stats</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">{totalTasks}</div>
                  <p className="text-sm text-gray-600">Total Tasks</p>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-600">{criticalTasksCount}</div>
                  <p className="text-sm text-gray-600">Critical Tasks</p>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">{criticalPath?.bottlenecks.length || 0}</div>
                  <p className="text-sm text-gray-600">Bottlenecks</p>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">{Math.round(criticalPath?.total_duration || 0)}</div>
                  <p className="text-sm text-gray-600">Hours (Critical Path)</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="dependencies" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Task Dependencies</CardTitle>
              <CardDescription>
                View and manage dependencies between tasks
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center gap-4">
                  <Label>Select Task to View Dependencies:</Label>
                  <Select value={selectedTask} onValueChange={handleTaskSelect}>
                    <SelectTrigger className="w-64">
                      <SelectValue placeholder="Choose a task" />
                    </SelectTrigger>
                    <SelectContent>
                      {availableTasks.map(task => (
                        <SelectItem key={task.id} value={task.id}>
                          {task.title}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {selectedTask && (
                  <div className="mt-6">
                    <h4 className="font-medium mb-3">Dependencies for selected task</h4>
                    <div className="text-center py-8 text-gray-500">
                      <Network className="h-8 w-8 mx-auto mb-2" />
                      <p>Dependency visualization would appear here</p>
                      <p className="text-sm">Interactive network diagram showing task relationships</p>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="critical-path" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Critical Path Analysis</CardTitle>
              <CardDescription>
                Tasks that directly impact the project timeline
              </CardDescription>
            </CardHeader>
            <CardContent>
              {criticalPath && criticalPath.tasks.length > 0 ? (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Task</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Duration</TableHead>
                      <TableHead>Float</TableHead>
                      <TableHead>Deadline</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {criticalPath.tasks.map((task) => (
                      <TableRow key={task.id}>
                        <TableCell>
                          <div>
                            <p className="font-medium">{task.title}</p>
                            <Badge variant="outline" className="text-red-600 mt-1">
                              Critical
                            </Badge>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge className={getStatusColor(task.status)}>
                            {task.status.replace('_', ' ')}
                          </Badge>
                        </TableCell>
                        <TableCell>{task.estimated_duration}h</TableCell>
                        <TableCell>
                          <span className={task.total_float < 0 ? 'text-red-600' : 'text-gray-600'}>
                            {Math.round(task.total_float)}h
                          </span>
                        </TableCell>
                        <TableCell>
                          {new Date(task.deadline).toLocaleDateString()}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <Route className="h-8 w-8 mx-auto mb-2" />
                  <p>No critical path data available</p>
                  <p className="text-sm">Add task dependencies to enable critical path analysis</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="suggestions" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Dependency Suggestions</CardTitle>
              <CardDescription>
                AI-powered suggestions for task dependencies based on wedding planning best practices
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center gap-4">
                  <Label>Get suggestions for task:</Label>
                  <Select value={selectedTask} onValueChange={handleTaskSelect}>
                    <SelectTrigger className="w-64">
                      <SelectValue placeholder="Choose a task" />
                    </SelectTrigger>
                    <SelectContent>
                      {availableTasks.map(task => (
                        <SelectItem key={task.id} value={task.id}>
                          {task.title}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {suggestions.length > 0 && (
                  <div className="space-y-3">
                    <h4 className="font-medium">Suggested Dependencies:</h4>
                    {suggestions.map((suggestion, index) => (
                      <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                        <div className="flex-1">
                          <p className="font-medium">{suggestion.title}</p>
                          <p className="text-sm text-gray-600 mt-1">{suggestion.reason}</p>
                        </div>
                        <div className="flex items-center gap-3">
                          <Badge variant="outline">
                            {Math.round(suggestion.confidence * 100)}% confidence
                          </Badge>
                          <Button
                            size="sm"
                            onClick={() => {
                              setNewDependency({
                                predecessorTaskId: suggestion.task_id,
                                successorTaskId: selectedTask,
                                dependencyType: 'finish_to_start',
                                lagTime: 0
                              });
                              setShowAddDependency(true);
                            }}
                          >
                            Apply
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}

                {selectedTask && suggestions.length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    <Lightbulb className="h-8 w-8 mx-auto mb-2" />
                    <p>No dependency suggestions available for this task</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
