'use client';

/**
 * WS-244 Real-Time Collaboration System - UserCursor
 * Team A - Animated User Cursor Positions
 * 
 * Shows other users' cursor positions with smooth animations and user labels
 * Untitled UI design with mobile-friendly cursor representation
 */

import React, { useEffect, useState, useRef } from 'react';
import { CollaboratorInfo, CursorInfo } from '@/types/collaboration';

interface UserCursorProps {
  user: CollaboratorInfo;
  position: number;
  selection: { start: number; end: number };
  editorRef: React.RefObject<HTMLTextAreaElement>;
  showLabel?: boolean;
  className?: string;
}

/**
 * UserCursor - Animated cursor positions for other users
 * 
 * Features:
 * - Smooth position transitions with CSS transforms
 * - User name labels with avatar indicators
 * - Selection highlighting for text ranges
 * - Mobile-friendly cursor representation
 * - Auto-fade after inactivity
 * - Color coding per user
 */
export const UserCursor: React.FC<UserCursorProps> = ({
  user,
  position,
  selection,
  editorRef,
  showLabel = true,
  className = ''
}) => {
  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });
  const [isVisible, setIsVisible] = useState(true);
  const [isActive, setIsActive] = useState(true);
  const cursorRef = useRef<HTMLDivElement>(null);
  const fadeTimeoutRef = useRef<NodeJS.Timeout>();

  // Generate consistent color for user
  const getUserColor = (userId: string) => {
    const colors = [
      '#9E77ED', '#2E90FA', '#12B76A', '#F79009', 
      '#F04438', '#7F56D9', '#175CD3', '#039855',
      '#DC6803', '#D92D20', '#B692F6', '#1570EF'
    ];
    const hash = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
    return colors[hash % colors.length];
  };

  const userColor = user.cursor?.color || getUserColor(user.userId);

  // Calculate cursor position based on text position
  const calculateCursorPosition = () => {
    if (!editorRef.current) return { x: 0, y: 0 };

    const editor = editorRef.current;
    const text = editor.value;
    
    // Create a temporary element to measure text dimensions
    const measurer = document.createElement('div');
    measurer.style.position = 'absolute';
    measurer.style.visibility = 'hidden';
    measurer.style.height = 'auto';
    measurer.style.width = 'auto';
    measurer.style.whiteSpace = 'pre-wrap';
    measurer.style.wordWrap = 'break-word';
    measurer.style.font = window.getComputedStyle(editor).font;
    measurer.style.fontSize = window.getComputedStyle(editor).fontSize;
    measurer.style.lineHeight = window.getComputedStyle(editor).lineHeight;
    measurer.style.padding = window.getComputedStyle(editor).padding;
    measurer.style.border = window.getComputedStyle(editor).border;
    measurer.style.maxWidth = `${editor.clientWidth}px`;

    document.body.appendChild(measurer);

    try {
      // Get text up to cursor position
      const textBeforeCursor = text.substring(0, Math.min(position, text.length));
      measurer.textContent = textBeforeCursor;

      // Add a marker character to measure cursor position
      const marker = document.createElement('span');
      marker.textContent = '|';
      marker.style.position = 'relative';
      measurer.appendChild(marker);

      const markerRect = marker.getBoundingClientRect();
      const editorRect = editor.getBoundingClientRect();

      // Calculate relative position
      const x = markerRect.left - editorRect.left + editor.scrollLeft;
      const y = markerRect.top - editorRect.top + editor.scrollTop;

      return { x: Math.max(0, x), y: Math.max(0, y) };
    } finally {
      document.body.removeChild(measurer);
    }
  };

  // Update cursor position when position changes
  useEffect(() => {
    const newPosition = calculateCursorPosition();
    setCursorPosition(newPosition);
    setIsActive(true);
    setIsVisible(true);

    // Clear existing timeout
    if (fadeTimeoutRef.current) {
      clearTimeout(fadeTimeoutRef.current);
    }

    // Set fade timeout for inactivity
    fadeTimeoutRef.current = setTimeout(() => {
      setIsActive(false);
      setTimeout(() => setIsVisible(false), 1000);
    }, 5000); // Hide after 5 seconds of inactivity

    return () => {
      if (fadeTimeoutRef.current) {
        clearTimeout(fadeTimeoutRef.current);
      }
    };
  }, [position, selection]);

  // Handle window resize to recalculate positions
  useEffect(() => {
    const handleResize = () => {
      const newPosition = calculateCursorPosition();
      setCursorPosition(newPosition);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  if (!isVisible || !user.isOnline) return null;

  return (
    <div
      ref={cursorRef}
      className={`absolute pointer-events-none z-10 transition-all duration-300 ${className} ${
        isActive ? 'opacity-100' : 'opacity-60'
      }`}
      style={{
        transform: `translate(${cursorPosition.x}px, ${cursorPosition.y}px)`,
        transition: 'transform 0.2s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.3s ease'
      }}
    >
      {/* Selection Highlight */}
      {selection.start !== selection.end && (
        <div
          className="absolute rounded-sm opacity-30"
          style={{
            backgroundColor: userColor,
            width: `${(selection.end - selection.start) * 8}px`, // Approximate character width
            height: '20px',
            top: '0px',
            left: '0px'
          }}
        />
      )}

      {/* Cursor Line */}
      <div
        className="absolute w-0.5 h-5 animate-pulse"
        style={{
          backgroundColor: userColor,
          animation: 'blink 1s infinite'
        }}
      />

      {/* User Label */}
      {showLabel && (
        <div
          className="absolute top-0 left-2 transform -translate-y-full mb-1"
          style={{
            animation: isActive ? 'fadeInUp 0.2s ease-out' : 'fadeOut 1s ease-out'
          }}
        >
          <div
            className="flex items-center space-x-1 px-2 py-1 rounded-lg text-xs font-medium text-white shadow-lg whitespace-nowrap"
            style={{ backgroundColor: userColor }}
          >
            {/* User Avatar */}
            {user.avatar ? (
              <img
                src={user.avatar}
                alt={user.name}
                className="w-4 h-4 rounded-full border border-white/30"
              />
            ) : (
              <div
                className="w-4 h-4 rounded-full flex items-center justify-center text-xs font-bold border border-white/30"
                style={{ backgroundColor: 'rgba(255,255,255,0.2)' }}
              >
                {(user.name || user.email)[0].toUpperCase()}
              </div>
            )}
            
            {/* User Name */}
            <span>{user.name || user.email.split('@')[0]}</span>
          </div>

          {/* Label Arrow */}
          <div
            className="absolute top-full left-3 w-0 h-0"
            style={{
              borderLeft: '4px solid transparent',
              borderRight: '4px solid transparent',
              borderTop: `4px solid ${userColor}`
            }}
          />
        </div>
      )}

      {/* Mobile Cursor Indicator (larger for touch devices) */}
      <div className="sm:hidden">
        <div
          className="absolute -top-1 -left-1 w-3 h-3 rounded-full border-2 border-white shadow-lg animate-pulse"
          style={{ backgroundColor: userColor }}
        />
      </div>
    </div>
  );
};

/**
 * UserCursorManager - Manages multiple user cursors
 */
interface UserCursorManagerProps {
  collaborators: CollaboratorInfo[];
  editorRef: React.RefObject<HTMLTextAreaElement>;
  showLabels?: boolean;
  maxCursors?: number;
  className?: string;
}

export const UserCursorManager: React.FC<UserCursorManagerProps> = ({
  collaborators,
  editorRef,
  showLabels = true,
  maxCursors = 10,
  className = ''
}) => {
  // Filter active collaborators with cursor positions
  const activeCursors = collaborators
    .filter(user => user.isOnline && user.cursor)
    .slice(0, maxCursors); // Limit number of cursors for performance

  return (
    <div className={`absolute inset-0 pointer-events-none ${className}`}>
      {activeCursors.map(collaborator => (
        <UserCursor
          key={collaborator.userId}
          user={collaborator}
          position={collaborator.cursor!.position}
          selection={collaborator.cursor!.selection}
          editorRef={editorRef}
          showLabel={showLabels}
        />
      ))}
    </div>
  );
};

/**
 * CursorActivityIndicator - Shows cursor activity summary
 */
interface CursorActivityIndicatorProps {
  activeCursors: number;
  className?: string;
}

export const CursorActivityIndicator: React.FC<CursorActivityIndicatorProps> = ({
  activeCursors,
  className = ''
}) => {
  if (activeCursors === 0) return null;

  return (
    <div className={`flex items-center space-x-1 ${className}`}>
      <div className="flex space-x-0.5">
        {[...Array(Math.min(activeCursors, 3))].map((_, index) => (
          <div
            key={index}
            className="w-1 h-4 bg-primary-600 rounded-full animate-pulse"
            style={{
              animationDelay: `${index * 0.2}s`,
              animationDuration: '1s'
            }}
          />
        ))}
      </div>
      
      <span className="text-xs font-medium text-primary-600">
        {activeCursors} editing
      </span>
    </div>
  );
};

// CSS animations (add to global styles)
const cursorAnimations = `
  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
  
  @keyframes fadeInUp {
    0% { opacity: 0; transform: translateY(10px); }
    100% { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes fadeOut {
    0% { opacity: 1; }
    100% { opacity: 0; }
  }
`;

// Inject animations if not already present
if (typeof document !== 'undefined' && !document.getElementById('cursor-animations')) {
  const style = document.createElement('style');
  style.id = 'cursor-animations';
  style.textContent = cursorAnimations;
  document.head.appendChild(style);
}

export default UserCursor;