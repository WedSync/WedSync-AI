'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from '@/components/ui/alert-dialog';
import { Check, ArrowRight, Sparkles, Clock, Trophy, TrendingUp, Shield, Zap } from 'lucide-react';
import { toast } from '@/components/ui/use-toast';
import { loadStripe } from '@stripe/stripe-js';
import { motion, AnimatePresence } from 'framer-motion';

interface ConversionMetrics {
  totalHoursSaved: number;
  tasksAutomated: number;
  suppliersCoordinated: number;
  estimatedRevenue: number;
  weddingsManaged: number;
  messagesProcessed: number;
}

interface PlanOption {
  id: string;
  name: string;
  price: number;
  priceId: string;
  features: string[];
  recommended?: boolean;
  savings?: number;
}

export const TrialConversionFlow: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [metrics, setMetrics] = useState<ConversionMetrics | null>(null);
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [conversionStep, setConversionStep] = useState<'metrics' | 'plans' | 'processing'>('metrics');
  const router = useRouter();

  const plans: PlanOption[] = [
    {
      id: 'professional',
      name: 'Professional',
      price: 97,
      priceId: process.env.NEXT_PUBLIC_STRIPE_PROFESSIONAL_PRICE_ID || '',
      features: [
        'Up to 10 active weddings',
        'Unlimited suppliers',
        'Advanced automation',
        'Priority support',
        'Custom branding'
      ],
      recommended: true,
      savings: 42
    },
    {
      id: 'premium',
      name: 'Premium',
      price: 197,
      priceId: process.env.NEXT_PUBLIC_STRIPE_PREMIUM_PRICE_ID || '',
      features: [
        'Unlimited weddings',
        'White-label options',
        'API access',
        'Dedicated account manager',
        'Advanced analytics',
        'Custom integrations'
      ],
      savings: 156
    }
  ];

  useEffect(() => {
    fetchTrialMetrics();
  }, []);

  const fetchTrialMetrics = async () => {
    try {
      const response = await fetch('/api/trial/metrics');
      const data = await response.json();
      setMetrics(data);
    } catch (error) {
      console.error('Error fetching trial metrics:', error);
      // Use mock data for demonstration
      setMetrics({
        totalHoursSaved: 42,
        tasksAutomated: 156,
        suppliersCoordinated: 28,
        estimatedRevenue: 12500,
        weddingsManaged: 3,
        messagesProcessed: 892
      });
    }
  };

  const handlePlanSelection = (planId: string) => {
    setSelectedPlan(planId);
    setShowConfirmation(true);
  };

  const handleConversion = async () => {
    if (!selectedPlan) return;

    setLoading(true);
    setConversionStep('processing');
    setShowConfirmation(false);

    const plan = plans.find(p => p.id === selectedPlan);
    if (!plan) return;

    try {
      // Start the conversion process
      const response = await fetch('/api/trial/convert', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          planId: plan.id,
          priceId: plan.priceId,
          preserveData: true
        })
      });

      const data = await response.json();

      if (data.sessionUrl) {
        // Redirect to Stripe Checkout
        const stripe = await loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!);
        if (stripe) {
          const { error } = await stripe.redirectToCheckout({
            sessionId: data.sessionId
          });
          if (error) {
            throw new Error(error.message);
          }
        }
      } else if (data.success) {
        // Direct conversion successful
        toast({
          title: 'Welcome to WedSync ' + plan.name + '!',
          description: 'Your trial has been successfully converted. All your data has been preserved.',
        });
        
        // Track conversion
        await trackConversion(plan.id);
        
        // Redirect to dashboard
        router.push('/dashboard?converted=true');
      }
    } catch (error) {
      console.error('Conversion error:', error);
      toast({
        title: 'Conversion Failed',
        description: 'There was an error converting your trial. Please try again or contact support.',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const trackConversion = async (planId: string) => {
    try {
      await fetch('/api/analytics/track', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          event: 'trial_converted',
          properties: {
            plan_id: planId,
            metrics: metrics,
            conversion_day: calculateTrialDay()
          }
        })
      });
    } catch (error) {
      console.error('Error tracking conversion:', error);
    }
  };

  const calculateTrialDay = () => {
    // This would calculate the actual trial day from the trial start date
    return 28; // Mock for now
  };

  const calculateROI = () => {
    if (!metrics) return 0;
    const hourlyRate = 50; // Average hourly rate
    return metrics.totalHoursSaved * hourlyRate;
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
      <AnimatePresence mode="wait">
        {conversionStep === 'metrics' && metrics && (
          <motion.div
            key="metrics"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-6"
          >
            {/* Value Summary */}
            <Card className="p-8 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h2 className="text-3xl font-bold text-gray-900">Your WedSync Trial Impact</h2>
                  <p className="text-gray-600 mt-2">Here's the value you've created in just 28 days</p>
                </div>
                <Trophy className="h-12 w-12 text-purple-600" />
              </div>

              <div className="grid grid-cols-2 md:grid-cols-3 gap-6 mt-8">
                <motion.div 
                  className="bg-white rounded-lg p-4 shadow-sm"
                  whileHover={{ scale: 1.05 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <Clock className="h-8 w-8 text-blue-600 mb-2" />
                  <div className="text-3xl font-bold text-gray-900">{metrics.totalHoursSaved}</div>
                  <div className="text-sm text-gray-600">Hours Saved</div>
                  <div className="text-xs text-green-600 mt-1">Worth ${metrics.totalHoursSaved * 50}</div>
                </motion.div>

                <motion.div 
                  className="bg-white rounded-lg p-4 shadow-sm"
                  whileHover={{ scale: 1.05 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <Zap className="h-8 w-8 text-yellow-600 mb-2" />
                  <div className="text-3xl font-bold text-gray-900">{metrics.tasksAutomated}</div>
                  <div className="text-sm text-gray-600">Tasks Automated</div>
                </motion.div>

                <motion.div 
                  className="bg-white rounded-lg p-4 shadow-sm"
                  whileHover={{ scale: 1.05 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <TrendingUp className="h-8 w-8 text-green-600 mb-2" />
                  <div className="text-3xl font-bold text-gray-900">${metrics.estimatedRevenue.toLocaleString()}</div>
                  <div className="text-sm text-gray-600">Revenue Managed</div>
                </motion.div>

                <motion.div 
                  className="bg-white rounded-lg p-4 shadow-sm"
                  whileHover={{ scale: 1.05 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <Sparkles className="h-8 w-8 text-purple-600 mb-2" />
                  <div className="text-3xl font-bold text-gray-900">{metrics.weddingsManaged}</div>
                  <div className="text-sm text-gray-600">Weddings Managed</div>
                </motion.div>

                <motion.div 
                  className="bg-white rounded-lg p-4 shadow-sm"
                  whileHover={{ scale: 1.05 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <Shield className="h-8 w-8 text-indigo-600 mb-2" />
                  <div className="text-3xl font-bold text-gray-900">{metrics.suppliersCoordinated}</div>
                  <div className="text-sm text-gray-600">Suppliers Coordinated</div>
                </motion.div>

                <motion.div 
                  className="bg-white rounded-lg p-4 shadow-sm"
                  whileHover={{ scale: 1.05 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <div className="text-3xl font-bold text-gray-900">{metrics.messagesProcessed}</div>
                  <div className="text-sm text-gray-600">Messages Processed</div>
                </motion.div>
              </div>

              <div className="mt-8 p-4 bg-green-50 rounded-lg border border-green-200">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-sm text-green-700">Total ROI from your trial</div>
                    <div className="text-2xl font-bold text-green-800">${calculateROI().toLocaleString()}</div>
                  </div>
                  <Button 
                    onClick={() => setConversionStep('plans')}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    Continue to Plans <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
              </div>
            </Card>
          </motion.div>
        )}

        {conversionStep === 'plans' && (
          <motion.div
            key="plans"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-6"
          >
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-gray-900">Choose Your WedSync Plan</h2>
              <p className="text-gray-600 mt-2">Continue saving time and growing your business</p>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              {plans.map((plan) => (
                <motion.div
                  key={plan.id}
                  whileHover={{ scale: 1.02 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <Card className={`p-6 relative ${plan.recommended ? 'border-purple-400 shadow-lg' : ''}`}>
                    {plan.recommended && (
                      <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                        <span className="bg-purple-600 text-white px-3 py-1 rounded-full text-sm font-semibold">
                          RECOMMENDED
                        </span>
                      </div>
                    )}

                    <div className="text-center mb-6">
                      <h3 className="text-2xl font-bold text-gray-900">{plan.name}</h3>
                      <div className="mt-4">
                        <span className="text-4xl font-bold">${plan.price}</span>
                        <span className="text-gray-600">/month</span>
                      </div>
                      {plan.savings && (
                        <div className="mt-2 text-green-600 text-sm">
                          Save {plan.savings} hours/month
                        </div>
                      )}
                    </div>

                    <ul className="space-y-3 mb-6">
                      {plan.features.map((feature, index) => (
                        <li key={index} className="flex items-center">
                          <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                          <span className="text-gray-700">{feature}</span>
                        </li>
                      ))}
                    </ul>

                    <Button
                      onClick={() => handlePlanSelection(plan.id)}
                      className={`w-full ${plan.recommended ? 'bg-purple-600 hover:bg-purple-700' : ''}`}
                      size="lg"
                    >
                      Select {plan.name}
                    </Button>
                  </Card>
                </motion.div>
              ))}
            </div>

            <div className="text-center mt-8">
              <p className="text-gray-600">
                <Shield className="inline h-4 w-4 mr-1" />
                All your trial data will be preserved • Cancel anytime • Instant activation
              </p>
            </div>
          </motion.div>
        )}

        {conversionStep === 'processing' && (
          <motion.div
            key="processing"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="flex flex-col items-center justify-center py-20"
          >
            <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-purple-600 mb-6"></div>
            <h3 className="text-xl font-semibold text-gray-900">Converting your trial...</h3>
            <p className="text-gray-600 mt-2">Preserving all your data and settings</p>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Confirmation Dialog */}
      <AlertDialog open={showConfirmation} onOpenChange={setShowConfirmation}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Confirm Your Subscription</AlertDialogTitle>
            <AlertDialogDescription>
              You're about to upgrade to WedSync {plans.find(p => p.id === selectedPlan)?.name}.
              Your card will be charged ${plans.find(p => p.id === selectedPlan)?.price}/month.
              All your trial data will be preserved.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleConversion} disabled={loading}>
              {loading ? 'Processing...' : 'Confirm & Subscribe'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};