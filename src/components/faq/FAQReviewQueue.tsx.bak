'use client';

import { useState, useMemo, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  CheckCircleIcon,
  XCircleIcon,
  PencilIcon,
  TrashIcon,
  TagIcon,
  MagnifyingGlassIcon,
  AdjustmentsHorizontalIcon,
  CheckIcon,
  XMarkIcon,
  ArrowTopRightOnSquareIcon,
  EyeIcon,
  ClockIcon,
} from '@heroicons/react/24/outline';

// TypeScript interfaces
interface ExtractedFAQ {
  id: string;
  question: string;
  answer: string;
  confidence: number;
  sourceUrl: string;
  category?: string;
  status: 'pending' | 'approved' | 'rejected';
  extractionDate: string;
  lastModified?: string;
}

interface FAQCategory {
  id: string;
  name: string;
  color: string;
  count: number;
}

interface ReviewAction {
  type: 'approve' | 'reject' | 'edit' | 'delete' | 'bulk_approve' | 'bulk_reject' | 'bulk_delete';
  faqIds: string[];
  data?: Record<string, unknown>;
}

interface FAQReviewQueueProps {
  extractedFAQs: ExtractedFAQ[];
  categories: FAQCategory[];
  onApprove: (faqId: string) => void;
  onReject: (faqId: string, reason?: string) => void;
  onEdit: (faqId: string, updates: Partial<ExtractedFAQ>) => void;
  onDelete: (faqId: string) => void;
  onBulkAction: (action: ReviewAction) => void;
  onCategoryChange: (faqId: string, categoryId: string) => void;
  isLoading?: boolean;
}

type FilterType = 'all' | 'pending' | 'approved' | 'rejected' | 'high_confidence' | 'low_confidence';
type SortType = 'date' | 'confidence' | 'category' | 'status';

export default function FAQReviewQueue({
  extractedFAQs,
  categories,
  onApprove,
  onReject,
  onEdit,
  onDelete,
  onBulkAction,
  onCategoryChange,
  isLoading = false,
}: FAQReviewQueueProps) {
  const [selectedFAQs, setSelectedFAQs] = useState<Set<string>>(new Set());
  const [searchQuery, setSearchQuery] = useState('');
  const [filterType, setFilterType] = useState<FilterType>('all');
  const [sortBy, setSortBy] = useState<SortType>('date');
  const [showFilters, setShowFilters] = useState(false);
  const [editingId, setEditingId] = useState<string | null>(null);
  const [previewId, setPreviewId] = useState<string | null>(null);

  // Filter and sort FAQs
  const filteredAndSortedFAQs = useMemo(() => {
    let filtered = extractedFAQs.filter(faq => {
      const matchesSearch = searchQuery === '' || 
        faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
        faq.answer.toLowerCase().includes(searchQuery.toLowerCase());

      const matchesFilter = filterType === 'all' || 
        (filterType === 'pending' && faq.status === 'pending') ||
        (filterType === 'approved' && faq.status === 'approved') ||
        (filterType === 'rejected' && faq.status === 'rejected') ||
        (filterType === 'high_confidence' && faq.confidence >= 80) ||
        (filterType === 'low_confidence' && faq.confidence < 80);

      return matchesSearch && matchesFilter;
    });

    // Sort FAQs
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'confidence':
          return b.confidence - a.confidence;
        case 'category':
          return (a.category || '').localeCompare(b.category || '');
        case 'status':
          return a.status.localeCompare(b.status);
        case 'date':
        default:
          return new Date(b.extractionDate).getTime() - new Date(a.extractionDate).getTime();
      }
    });

    return filtered;
  }, [extractedFAQs, searchQuery, filterType, sortBy]);

  // Statistics
  const stats = useMemo(() => {
    const total = extractedFAQs.length;
    const pending = extractedFAQs.filter(f => f.status === 'pending').length;
    const approved = extractedFAQs.filter(f => f.status === 'approved').length;
    const rejected = extractedFAQs.filter(f => f.status === 'rejected').length;
    const highConfidence = extractedFAQs.filter(f => f.confidence >= 80).length;

    return { total, pending, approved, rejected, highConfidence };
  }, [extractedFAQs]);

  // Selection handlers
  const handleSelectFAQ = useCallback((faqId: string, selected: boolean) => {
    setSelectedFAQs(prev => {
      const newSet = new Set(prev);
      if (selected) {
        newSet.add(faqId);
      } else {
        newSet.delete(faqId);
      }
      return newSet;
    });
  }, []);

  const handleSelectAll = useCallback((selected: boolean) => {
    if (selected) {
      setSelectedFAQs(new Set(filteredAndSortedFAQs.map(faq => faq.id)));
    } else {
      setSelectedFAQs(new Set());
    }
  }, [filteredAndSortedFAQs]);

  // Action handlers
  const handleBulkApprove = useCallback(() => {
    onBulkAction({
      type: 'bulk_approve',
      faqIds: Array.from(selectedFAQs),
    });
    setSelectedFAQs(new Set());
  }, [selectedFAQs, onBulkAction]);

  const handleBulkReject = useCallback(() => {
    onBulkAction({
      type: 'bulk_reject',
      faqIds: Array.from(selectedFAQs),
    });
    setSelectedFAQs(new Set());
  }, [selectedFAQs, onBulkAction]);

  const handleBulkDelete = useCallback(() => {
    if (window.confirm(`Delete ${selectedFAQs.size} selected FAQs? This action cannot be undone.`)) {
      onBulkAction({
        type: 'bulk_delete',
        faqIds: Array.from(selectedFAQs),
      });
      setSelectedFAQs(new Set());
    }
  }, [selectedFAQs, onBulkAction]);

  const handleEditSave = useCallback((faqId: string, updates: Partial<ExtractedFAQ>) => {
    onEdit(faqId, {
      ...updates,
      lastModified: new Date().toISOString(),
    });
    setEditingId(null);
  }, [onEdit]);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-12">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
        <span className="ml-3 text-gray-600">Loading review queue...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <div className="flex items-center justify-between mb-4">
          <div>
            <h2 className="text-2xl font-semibold text-gray-900">FAQ Review Queue</h2>
            <p className="text-gray-600 mt-1">
              Review and approve extracted FAQ content before adding to your library
            </p>
          </div>
          <button
            type="button"
            onClick={() => setShowFilters(!showFilters)}
            className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            <AdjustmentsHorizontalIcon className="h-4 w-4 mr-2" />
            Filters
          </button>
        </div>

        {/* Statistics */}
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
          <div className="bg-white rounded-lg border border-gray-200 p-4">
            <div className="text-2xl font-semibold text-gray-900">{stats.total}</div>
            <div className="text-sm text-gray-600">Total FAQs</div>
          </div>
          <div className="bg-white rounded-lg border border-gray-200 p-4">
            <div className="text-2xl font-semibold text-amber-600">{stats.pending}</div>
            <div className="text-sm text-gray-600">Pending</div>
          </div>
          <div className="bg-white rounded-lg border border-gray-200 p-4">
            <div className="text-2xl font-semibold text-green-600">{stats.approved}</div>
            <div className="text-sm text-gray-600">Approved</div>
          </div>
          <div className="bg-white rounded-lg border border-gray-200 p-4">
            <div className="text-2xl font-semibold text-red-600">{stats.rejected}</div>
            <div className="text-sm text-gray-600">Rejected</div>
          </div>
          <div className="bg-white rounded-lg border border-gray-200 p-4">
            <div className="text-2xl font-semibold text-blue-600">{stats.highConfidence}</div>
            <div className="text-sm text-gray-600">High Confidence</div>
          </div>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="space-y-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <MagnifyingGlassIcon className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
              <input
                type="text"
                placeholder="Search questions and answers..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
              />
            </div>
          </div>
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as SortType)}
            className="block w-full sm:w-auto px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
          >
            <option value="date">Sort by Date</option>
            <option value="confidence">Sort by Confidence</option>
            <option value="category">Sort by Category</option>
            <option value="status">Sort by Status</option>
          </select>
        </div>

        <AnimatePresence>
          {showFilters && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="flex flex-wrap gap-2"
            >
              {(['all', 'pending', 'approved', 'rejected', 'high_confidence', 'low_confidence'] as FilterType[]).map(filter => (
                <button
                  key={filter}
                  type="button"
                  onClick={() => setFilterType(filter)}
                  className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                    filterType === filter
                      ? 'bg-primary-100 text-primary-800 border border-primary-200'
                      : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'
                  }`}
                >
                  {filter.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                </button>
              ))}
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Bulk Actions */}
      <AnimatePresence>
        {selectedFAQs.size > 0 && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="bg-primary-50 border border-primary-200 rounded-lg p-4"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={selectedFAQs.size === filteredAndSortedFAQs.length}
                  onChange={(e) => handleSelectAll(e.target.checked)}
                  className="h-5 w-5 text-primary-600 rounded border-gray-300 focus:ring-primary-500"
                />
                <span className="ml-3 text-sm font-medium text-gray-900">
                  {selectedFAQs.size} of {filteredAndSortedFAQs.length} selected
                </span>
              </div>
              <div className="flex items-center space-x-3">
                <button
                  type="button"
                  onClick={handleBulkApprove}
                  className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-green-700 bg-green-100 hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                >
                  <CheckCircleIcon className="h-4 w-4 mr-1" />
                  Approve All
                </button>
                <button
                  type="button"
                  onClick={handleBulkReject}
                  className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                >
                  <XCircleIcon className="h-4 w-4 mr-1" />
                  Reject All
                </button>
                <button
                  type="button"
                  onClick={handleBulkDelete}
                  className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-gray-700 bg-gray-100 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
                >
                  <TrashIcon className="h-4 w-4 mr-1" />
                  Delete All
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* FAQ Cards */}
      <div className="space-y-4">
        {filteredAndSortedFAQs.length === 0 ? (
          <div className="text-center py-12">
            <ClockIcon className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No FAQs to review</h3>
            <p className="text-gray-600">
              {searchQuery || filterType !== 'all' 
                ? 'Try adjusting your search or filter criteria.'
                : 'Start by extracting FAQs from a website.'}
            </p>
          </div>
        ) : (
          filteredAndSortedFAQs.map((faq, index) => (
            <motion.div
              key={faq.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.05 }}
            >
              <FAQReviewCard
                faq={faq}
                categories={categories}
                isSelected={selectedFAQs.has(faq.id)}
                isEditing={editingId === faq.id}
                isPreview={previewId === faq.id}
                onSelect={(selected) => handleSelectFAQ(faq.id, selected)}
                onApprove={() => onApprove(faq.id)}
                onReject={(reason) => onReject(faq.id, reason)}
                onEdit={() => setEditingId(faq.id)}
                onEditSave={(updates) => handleEditSave(faq.id, updates)}
                onEditCancel={() => setEditingId(null)}
                onDelete={() => onDelete(faq.id)}
                onCategoryChange={(categoryId) => onCategoryChange(faq.id, categoryId)}
                onTogglePreview={() => setPreviewId(previewId === faq.id ? null : faq.id)}
              />
            </motion.div>
          ))
        )}
      </div>
    </div>
  );
}

// FAQ Review Card Component
interface FAQReviewCardProps {
  faq: ExtractedFAQ;
  categories: FAQCategory[];
  isSelected: boolean;
  isEditing: boolean;
  isPreview: boolean;
  onSelect: (selected: boolean) => void;
  onApprove: () => void;
  onReject: (reason?: string) => void;
  onEdit: () => void;
  onEditSave: (updates: Partial<ExtractedFAQ>) => void;
  onEditCancel: () => void;
  onDelete: () => void;
  onCategoryChange: (categoryId: string) => void;
  onTogglePreview: () => void;
}

function FAQReviewCard({
  faq,
  categories,
  isSelected,
  isEditing,
  isPreview,
  onSelect,
  onApprove,
  onReject,
  onEdit,
  onEditSave,
  onEditCancel,
  onDelete,
  onCategoryChange,
  onTogglePreview,
}: FAQReviewCardProps) {
  const [editForm, setEditForm] = useState({
    question: faq.question,
    answer: faq.answer,
  });

  const handleSave = () => {
    onEditSave(editForm);
  };

  const handleCancel = () => {
    setEditForm({
      question: faq.question,
      answer: faq.answer,
    });
    onEditCancel();
  };

  const getStatusBadge = () => {
    switch (faq.status) {
      case 'approved':
        return <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">Approved</span>;
      case 'rejected':
        return <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">Rejected</span>;
      default:
        return <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-amber-100 text-amber-800">Pending</span>;
    }
  };

  const getConfidenceBadge = () => {
    const confidence = faq.confidence;
    if (confidence >= 90) {
      return <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">{confidence}% confidence</span>;
    } else if (confidence >= 70) {
      return <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">{confidence}% confidence</span>;
    } else {
      return <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">{confidence}% confidence</span>;
    }
  };

  const getCategoryInfo = () => {
    if (!faq.category) return null;
    const category = categories.find(c => c.id === faq.category);
    return category ? (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${category.color}`}>
        {category.name}
      </span>
    ) : null;
  };

  return (
    <div className={`bg-white border rounded-lg shadow-sm transition-all ${isSelected ? 'border-primary-500 ring-2 ring-primary-200' : 'border-gray-200'}`}>
      <div className="p-6">
        {/* Header */}
        <div className="flex items-start justify-between mb-4">
          <div className="flex items-center">
            <input
              type="checkbox"
              checked={isSelected}
              onChange={(e) => onSelect(e.target.checked)}
              className="h-5 w-5 text-primary-600 rounded border-gray-300 focus:ring-primary-500 mr-3"
            />
            <div className="flex flex-wrap gap-2">
              {getStatusBadge()}
              {getConfidenceBadge()}
              {getCategoryInfo()}
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <button
              type="button"
              onClick={onTogglePreview}
              className="p-1 text-gray-400 hover:text-gray-600"
              title="Toggle preview"
            >
              <EyeIcon className="h-4 w-4" />
            </button>
            <button
              type="button"
              onClick={onEdit}
              className="p-1 text-gray-400 hover:text-gray-600"
              disabled={isEditing}
              title="Edit FAQ"
            >
              <PencilIcon className="h-4 w-4" />
            </button>
            <button
              type="button"
              onClick={() => window.open(faq.sourceUrl, '_blank')}
              className="p-1 text-gray-400 hover:text-gray-600"
              title="View source"
            >
              <ArrowTopRightOnSquareIcon className="h-4 w-4" />
            </button>
            <button
              type="button"
              onClick={onDelete}
              className="p-1 text-gray-400 hover:text-red-600"
              title="Delete FAQ"
            >
              <TrashIcon className="h-4 w-4" />
            </button>
          </div>
        </div>

        {/* Content */}
        {isEditing ? (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Question
              </label>
              <textarea
                value={editForm.question}
                onChange={(e) => setEditForm(prev => ({ ...prev, question: e.target.value }))}
                rows={2}
                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 resize-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Answer
              </label>
              <textarea
                value={editForm.answer}
                onChange={(e) => setEditForm(prev => ({ ...prev, answer: e.target.value }))}
                rows={4}
                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 resize-none"
              />
            </div>
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <label className="block text-sm font-medium text-gray-700 mr-3">
                  Category:
                </label>
                <select
                  value={faq.category || ''}
                  onChange={(e) => onCategoryChange(e.target.value)}
                  className="text-sm border-gray-300 rounded-md focus:border-primary-500 focus:ring-primary-500"
                >
                  <option value="">No category</option>
                  {categories.map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))}
                </select>
              </div>
              <div className="flex items-center space-x-3">
                <button
                  type="button"
                  onClick={handleCancel}
                  className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                >
                  <XMarkIcon className="h-4 w-4 mr-1" />
                  Cancel
                </button>
                <button
                  type="button"
                  onClick={handleSave}
                  className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                >
                  <CheckIcon className="h-4 w-4 mr-1" />
                  Save
                </button>
              </div>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            <div>
              <h3 className="font-medium text-gray-900 mb-2">
                {faq.question}
              </h3>
              <div className={`text-gray-600 ${isPreview ? '' : 'line-clamp-3'}`}>
                {faq.answer}
              </div>
            </div>

            <div className="flex items-center justify-between pt-4 border-t border-gray-200">
              <div className="flex items-center space-x-4 text-xs text-gray-500">
                <span>Extracted: {new Date(faq.extractionDate).toLocaleDateString()}</span>
                {faq.lastModified && (
                  <span>Modified: {new Date(faq.lastModified).toLocaleDateString()}</span>
                )}
                <a
                  href={faq.sourceUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-primary-600 hover:text-primary-500"
                >
                  View source
                </a>
              </div>

              {faq.status === 'pending' && (
                <div className="flex items-center space-x-2">
                  <button
                    type="button"
                    onClick={() => onReject()}
                    className="inline-flex items-center px-3 py-1.5 border border-red-300 text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                  >
                    <XCircleIcon className="h-4 w-4 mr-1" />
                    Reject
                  </button>
                  <button
                    type="button"
                    onClick={onApprove}
                    className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  >
                    <CheckCircleIcon className="h-4 w-4 mr-1" />
                    Approve
                  </button>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}