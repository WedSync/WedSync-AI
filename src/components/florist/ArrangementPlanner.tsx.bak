'use client';

import { useState, useCallback, useMemo } from 'react';
import { 
  SparklesIcon, 
  PlusIcon, 
  TrashIcon, 
  ArrowPathIcon,
  EyeIcon,
  BookmarkIcon
} from '@heroicons/react/24/outline';
import { 
  DndContext, 
  DragEndEvent, 
  DragStartEvent,
  DragOverlay,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors
} from '@dnd-kit/core';
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
  horizontalListSortingStrategy
} from '@dnd-kit/sortable';
import {
  useSortable
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { Select } from '@/components/ui/Select';
import { Slider } from '@/components/ui/Slider';
import { classNames } from '@/lib/utils';

interface ArrangementPlannerProps {
  weddingId?: string;
  selectedFlowers?: any[];
  colorPalette?: any;
  onArrangementComplete?: (arrangement: any) => void;
  className?: string;
}

interface FlowerItem {
  id: string;
  flower: any;
  quantity: number;
  role: 'focal' | 'filler' | 'greenery' | 'accent';
  position: { x: number; y: number };
}

interface ArrangementType {
  id: string;
  name: string;
  description: string;
  icon: string;
  defaultStructure: {
    focal: number;
    filler: number;
    greenery: number;
    accent: number;
  };
}

const ARRANGEMENT_TYPES: ArrangementType[] = [
  {
    id: 'bridal_bouquet',
    name: 'Bridal Bouquet',
    description: 'Classic round bouquet with focal flowers and fillers',
    icon: '💐',
    defaultStructure: { focal: 7, filler: 5, greenery: 3, accent: 2 }
  },
  {
    id: 'centerpiece',
    name: 'Centerpiece',
    description: 'Low, wide arrangement for dining tables',
    icon: '🌸',
    defaultStructure: { focal: 5, filler: 8, greenery: 4, accent: 3 }
  },
  {
    id: 'ceremony_arch',
    name: 'Ceremony Arch',
    description: 'Large architectural arrangement',
    icon: '🌺',
    defaultStructure: { focal: 15, filler: 20, greenery: 12, accent: 8 }
  },
  {
    id: 'boutonniere',
    name: 'Boutonniere',
    description: 'Small lapel arrangement',
    icon: '🌹',
    defaultStructure: { focal: 1, filler: 2, greenery: 1, accent: 0 }
  }
];

const FLOWER_ROLES = [
  { value: 'focal', label: 'Focal Flower', color: 'bg-purple-100 text-purple-800' },
  { value: 'filler', label: 'Filler', color: 'bg-blue-100 text-blue-800' },
  { value: 'greenery', label: 'Greenery', color: 'bg-green-100 text-green-800' },
  { value: 'accent', label: 'Accent', color: 'bg-orange-100 text-orange-800' }
];

// Sortable flower item component
function SortableFlowerItem({ 
  item, 
  onQuantityChange, 
  onRoleChange, 
  onRemove,
  isDragOverlay = false 
}: {
  item: FlowerItem;
  onQuantityChange: (id: string, quantity: number) => void;
  onRoleChange: (id: string, role: FlowerItem['role']) => void;
  onRemove: (id: string) => void;
  isDragOverlay?: boolean;
}) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: item.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  const roleConfig = FLOWER_ROLES.find(role => role.value === item.role);

  return (
    <div
      ref={setNodeRef}
      style={style}
      className={classNames(
        'p-3 bg-white border border-gray-200 rounded-lg shadow-sm',
        isDragOverlay && 'shadow-lg border-blue-300',
        !isDragOverlay && 'hover:shadow-md transition-shadow'
      )}
      {...attributes}
      {...listeners}
      role="button"
      tabIndex={0}
      aria-label={`Drag to rearrange ${item.flower.common_name}`}
    >
      <div className="flex items-start gap-3">
        {/* Drag handle visual indicator */}
        <div className="flex flex-col gap-1 mt-1 opacity-40">
          <div className="w-1 h-1 bg-gray-400 rounded-full"></div>
          <div className="w-1 h-1 bg-gray-400 rounded-full"></div>
          <div className="w-1 h-1 bg-gray-400 rounded-full"></div>
        </div>

        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between mb-2">
            <div className="min-w-0 flex-1">
              <h4 className="text-sm font-medium text-gray-900 truncate">
                {item.flower.common_name}
              </h4>
              <p className="text-xs text-gray-600 italic truncate">
                {item.flower.scientific_name}
              </p>
            </div>
            <button
              onClick={(e) => {
                e.stopPropagation();
                onRemove(item.id);
              }}
              className="text-gray-400 hover:text-red-500 p-1 rounded focus:outline-none focus:ring-2 focus:ring-red-500"
              aria-label={`Remove ${item.flower.common_name}`}
            >
              <TrashIcon className="w-4 h-4" />
            </button>
          </div>

          <div className="grid grid-cols-2 gap-2">
            {/* Quantity */}
            <div>
              <label className="block text-xs text-gray-600 mb-1">
                Quantity
              </label>
              <input
                type="number"
                min="1"
                max="50"
                value={item.quantity}
                onChange={(e) => onQuantityChange(item.id, parseInt(e.target.value) || 1)}
                onClick={(e) => e.stopPropagation()}
                className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            {/* Role */}
            <div>
              <label className="block text-xs text-gray-600 mb-1">
                Role
              </label>
              <select
                value={item.role}
                onChange={(e) => onRoleChange(item.id, e.target.value as FlowerItem['role'])}
                onClick={(e) => e.stopPropagation()}
                className="w-full px-1 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
              >
                {FLOWER_ROLES.map(role => (
                  <option key={role.value} value={role.value}>
                    {role.label}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Role badge */}
          <div className="mt-2">
            <Badge className={classNames('text-xs', roleConfig?.color || 'bg-gray-100 text-gray-800')}>
              {roleConfig?.label}
            </Badge>
          </div>
        </div>
      </div>
    </div>
  );
}

export function ArrangementPlanner({ 
  weddingId, 
  selectedFlowers = [], 
  colorPalette,
  onArrangementComplete,
  className = ''
}: ArrangementPlannerProps) {
  const [arrangementType, setArrangementType] = useState('bridal_bouquet');
  const [flowerItems, setFlowerItems] = useState<FlowerItem[]>([]);
  const [activeId, setActiveId] = useState<string | null>(null);
  const [aiSuggestions, setAiSuggestions] = useState<any>(null);
  const [isGenerating, setIsGenerating] = useState(false);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const currentArrangementType = ARRANGEMENT_TYPES.find(type => type.id === arrangementType);
  
  const arrangementSummary = useMemo(() => {
    const summary = flowerItems.reduce((acc, item) => {
      acc[item.role] = (acc[item.role] || 0) + item.quantity;
      return acc;
    }, {} as Record<string, number>);
    
    const totalFlowers = Object.values(summary).reduce((sum, count) => sum + count, 0);
    const estimatedCost = flowerItems.reduce((sum, item) => {
      const price = item.flower.current_pricing?.adjusted_price || 3;
      return sum + (price * item.quantity);
    }, 0);

    return { summary, totalFlowers, estimatedCost };
  }, [flowerItems]);

  const addFlowerToArrangement = useCallback((flower: any) => {
    const newItem: FlowerItem = {
      id: `${flower.id}_${Date.now()}`,
      flower,
      quantity: 1,
      role: 'focal',
      position: { x: 0, y: flowerItems.length * 100 }
    };
    setFlowerItems(prev => [...prev, newItem]);
  }, [flowerItems.length]);

  const updateFlowerQuantity = useCallback((id: string, quantity: number) => {
    setFlowerItems(prev => prev.map(item => 
      item.id === id ? { ...item, quantity: Math.max(1, quantity) } : item
    ));
  }, []);

  const updateFlowerRole = useCallback((id: string, role: FlowerItem['role']) => {
    setFlowerItems(prev => prev.map(item => 
      item.id === id ? { ...item, role } : item
    ));
  }, []);

  const removeFlowerFromArrangement = useCallback((id: string) => {
    setFlowerItems(prev => prev.filter(item => item.id !== id));
  }, []);

  const handleDragStart = (event: DragStartEvent) => {
    setActiveId(event.active.id as string);
  };

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;

    if (over && active.id !== over.id) {
      setFlowerItems((items) => {
        const oldIndex = items.findIndex(item => item.id === active.id);
        const newIndex = items.findIndex(item => item.id === over.id);

        return arrayMove(items, oldIndex, newIndex);
      });
    }

    setActiveId(null);
  };

  const generateAISuggestions = useCallback(async () => {
    if (!currentArrangementType || flowerItems.length === 0) return;

    setIsGenerating(true);
    try {
      // Mock AI suggestions - in production this would call the AI service
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setAiSuggestions({
        balance_score: Math.random() * 0.3 + 0.7,
        color_harmony: Math.random() * 0.4 + 0.6,
        seasonal_appropriateness: Math.random() * 0.2 + 0.8,
        cost_efficiency: Math.random() * 0.3 + 0.6,
        suggestions: [
          'Consider adding more filler flowers for better proportion',
          'The color balance looks great for a romantic theme',
          'Adding white roses would enhance the focal point',
          'This arrangement is well-suited for the selected season'
        ],
        alternative_flowers: selectedFlowers.slice(0, 3).map(flower => ({
          ...flower,
          reason: 'Better color match for your palette'
        }))
      });
    } catch (error) {
      console.error('Failed to generate AI suggestions:', error);
    } finally {
      setIsGenerating(false);
    }
  }, [currentArrangementType, flowerItems, selectedFlowers]);

  const saveArrangement = useCallback(() => {
    const arrangement = {
      type: arrangementType,
      flowers: flowerItems,
      summary: arrangementSummary,
      ai_analysis: aiSuggestions,
      color_palette: colorPalette,
      created_at: new Date().toISOString()
    };
    
    onArrangementComplete?.(arrangement);
  }, [arrangementType, flowerItems, arrangementSummary, aiSuggestions, colorPalette, onArrangementComplete]);

  const activeItem = flowerItems.find(item => item.id === activeId);

  return (
    <div className={`space-y-6 ${className}`} role="region" aria-label="Arrangement Planner">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <SparklesIcon className="w-6 h-6 text-purple-600" />
          <h3 className="text-lg font-semibold text-gray-900">AI Arrangement Planner</h3>
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={generateAISuggestions}
            disabled={flowerItems.length === 0 || isGenerating}
            className="flex items-center gap-2"
          >
            {isGenerating ? (
              <div className="animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent" />
            ) : (
              <EyeIcon className="w-4 h-4" />
            )}
            Analyze
          </Button>
          {flowerItems.length > 0 && (
            <Button
              size="sm"
              onClick={saveArrangement}
              className="flex items-center gap-2"
            >
              <BookmarkIcon className="w-4 h-4" />
              Save Arrangement
            </Button>
          )}
        </div>
      </div>

      {/* Arrangement Type Selection */}
      <div className="space-y-3">
        <label htmlFor="arrangement-type" className="block text-sm font-medium text-gray-700">
          Arrangement Type
        </label>
        <Select
          id="arrangement-type"
          value={arrangementType}
          onChange={setArrangementType}
          className="w-full max-w-md"
        >
          {ARRANGEMENT_TYPES.map(type => (
            <option key={type.id} value={type.id}>
              {type.icon} {type.name} - {type.description}
            </option>
          ))}
        </Select>
        {currentArrangementType && (
          <div className="text-sm text-gray-600">
            Recommended: {currentArrangementType.defaultStructure.focal} focal, {' '}
            {currentArrangementType.defaultStructure.filler} filler, {' '}
            {currentArrangementType.defaultStructure.greenery} greenery, {' '}
            {currentArrangementType.defaultStructure.accent} accent flowers
          </div>
        )}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Available Flowers */}
        <Card className="p-4">
          <h4 className="text-sm font-medium text-gray-900 mb-3">Available Flowers</h4>
          {selectedFlowers && selectedFlowers.length > 0 ? (
            <div className="space-y-2 max-h-64 overflow-y-auto">
              {selectedFlowers.map((flower, index) => (
                <div 
                  key={flower.id || index}
                  className="p-2 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer"
                  onClick={() => addFlowerToArrangement(flower)}
                  role="button"
                  tabIndex={0}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                      e.preventDefault();
                      addFlowerToArrangement(flower);
                    }
                  }}
                  aria-label={`Add ${flower.common_name} to arrangement`}
                >
                  <div className="flex items-center justify-between">
                    <div className="min-w-0 flex-1">
                      <div className="text-sm font-medium text-gray-900 truncate">
                        {flower.common_name}
                      </div>
                      <div className="text-xs text-gray-600 truncate">
                        {flower.scientific_name}
                      </div>
                    </div>
                    <PlusIcon className="w-4 h-4 text-gray-400 flex-shrink-0" />
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500">
              <SparklesIcon className="mx-auto h-8 w-8 text-gray-400 mb-2" />
              <p className="text-sm">No flowers selected</p>
              <p className="text-xs">Use Flower Search first</p>
            </div>
          )}
        </Card>

        {/* Arrangement Builder */}
        <Card className="p-4">
          <div className="flex items-center justify-between mb-3">
            <h4 className="text-sm font-medium text-gray-900">Arrangement Builder</h4>
            <Badge variant="outline">
              {flowerItems.length} items
            </Badge>
          </div>
          
          {flowerItems.length > 0 ? (
            <DndContext
              sensors={sensors}
              collisionDetection={closestCenter}
              onDragStart={handleDragStart}
              onDragEnd={handleDragEnd}
            >
              <SortableContext 
                items={flowerItems.map(item => item.id)}
                strategy={verticalListSortingStrategy}
              >
                <div className="space-y-2 max-h-96 overflow-y-auto">
                  {flowerItems.map((item) => (
                    <SortableFlowerItem
                      key={item.id}
                      item={item}
                      onQuantityChange={updateFlowerQuantity}
                      onRoleChange={updateFlowerRole}
                      onRemove={removeFlowerFromArrangement}
                    />
                  ))}
                </div>
              </SortableContext>

              <DragOverlay>
                {activeItem ? (
                  <SortableFlowerItem
                    item={activeItem}
                    onQuantityChange={() => {}}
                    onRoleChange={() => {}}
                    onRemove={() => {}}
                    isDragOverlay
                  />
                ) : null}
              </DragOverlay>
            </DndContext>
          ) : (
            <div className="text-center py-8 text-gray-500">
              <SparklesIcon className="mx-auto h-8 w-8 text-gray-400 mb-2" />
              <p className="text-sm">No flowers added</p>
              <p className="text-xs">Click flowers to add them</p>
            </div>
          )}
        </Card>

        {/* Summary & AI Analysis */}
        <div className="space-y-4">
          {/* Arrangement Summary */}
          <Card className="p-4">
            <h4 className="text-sm font-medium text-gray-900 mb-3">Summary</h4>
            <div className="space-y-3">
              <div className="grid grid-cols-2 gap-2 text-sm">
                <div>Total Flowers:</div>
                <div className="font-medium">{arrangementSummary.totalFlowers}</div>
                <div>Estimated Cost:</div>
                <div className="font-medium">${arrangementSummary.estimatedCost.toFixed(2)}</div>
              </div>
              
              <div className="space-y-2">
                {FLOWER_ROLES.map(role => {
                  const count = arrangementSummary.summary[role.value] || 0;
                  const recommended = currentArrangementType?.defaultStructure[role.value as keyof typeof currentArrangementType.defaultStructure] || 0;
                  
                  return (
                    <div key={role.value} className="flex items-center justify-between text-xs">
                      <span className={classNames('px-2 py-1 rounded', role.color)}>
                        {role.label}
                      </span>
                      <span className={classNames(
                        'font-medium',
                        count < recommended ? 'text-orange-600' : 
                        count > recommended * 1.5 ? 'text-blue-600' : 'text-green-600'
                      )}>
                        {count} / {recommended}
                      </span>
                    </div>
                  );
                })}
              </div>
            </div>
          </Card>

          {/* AI Analysis */}
          {aiSuggestions && (
            <Card className="p-4">
              <h4 className="text-sm font-medium text-gray-900 mb-3">AI Analysis</h4>
              <div className="space-y-4">
                {/* Scores */}
                <div className="grid grid-cols-2 gap-3 text-xs">
                  <div className="text-center">
                    <div className={classNames(
                      'text-lg font-bold',
                      aiSuggestions.balance_score > 0.8 ? 'text-green-600' : 
                      aiSuggestions.balance_score > 0.6 ? 'text-yellow-600' : 'text-red-600'
                    )}>
                      {(aiSuggestions.balance_score * 100).toFixed(0)}%
                    </div>
                    <div className="text-gray-600">Balance</div>
                  </div>
                  <div className="text-center">
                    <div className={classNames(
                      'text-lg font-bold',
                      aiSuggestions.color_harmony > 0.8 ? 'text-green-600' : 
                      aiSuggestions.color_harmony > 0.6 ? 'text-yellow-600' : 'text-red-600'
                    )}>
                      {(aiSuggestions.color_harmony * 100).toFixed(0)}%
                    </div>
                    <div className="text-gray-600">Color Harmony</div>
                  </div>
                  <div className="text-center">
                    <div className={classNames(
                      'text-lg font-bold',
                      aiSuggestions.seasonal_appropriateness > 0.8 ? 'text-green-600' : 
                      aiSuggestions.seasonal_appropriateness > 0.6 ? 'text-yellow-600' : 'text-red-600'
                    )}>
                      {(aiSuggestions.seasonal_appropriateness * 100).toFixed(0)}%
                    </div>
                    <div className="text-gray-600">Seasonal</div>
                  </div>
                  <div className="text-center">
                    <div className={classNames(
                      'text-lg font-bold',
                      aiSuggestions.cost_efficiency > 0.8 ? 'text-green-600' : 
                      aiSuggestions.cost_efficiency > 0.6 ? 'text-yellow-600' : 'text-red-600'
                    )}>
                      {(aiSuggestions.cost_efficiency * 100).toFixed(0)}%
                    </div>
                    <div className="text-gray-600">Value</div>
                  </div>
                </div>

                {/* Suggestions */}
                <div>
                  <h5 className="text-xs font-medium text-gray-700 mb-2">Suggestions</h5>
                  <div className="space-y-1">
                    {aiSuggestions.suggestions.map((suggestion: string, index: number) => (
                      <div key={index} className="flex items-start gap-2 text-xs text-gray-600">
                        <span className="text-purple-600 mt-0.5" aria-hidden="true">•</span>
                        <span>{suggestion}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}