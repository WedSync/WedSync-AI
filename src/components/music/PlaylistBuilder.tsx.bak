/**
 * Playlist Builder Component  
 * Feature ID: WS-128
 * Interactive playlist creation and management interface
 */

'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { 
  Music, 
  PlayCircle, 
  Plus, 
  Trash2, 
  GripVertical,
  Sparkles,
  Search,
  Clock
} from 'lucide-react';
import type { 
  MusicTrack, 
  MusicPlaylist, 
  PlaylistTrack,
  PlaylistType,
  WeddingPhase,
  MusicGenre,
  MusicMood 
} from '@/types/music';

interface PlaylistBuilderProps {
  playlist?: MusicPlaylist;
  onSave: (playlist: Partial<MusicPlaylist>) => void;
  onCancel: () => void;
}

export default function PlaylistBuilder({ 
  playlist, 
  onSave, 
  onCancel 
}: PlaylistBuilderProps) {
  const [playlistData, setPlaylistData] = useState<Partial<MusicPlaylist>>({
    name: playlist?.name || '',
    description: playlist?.description || '',
    playlist_type: playlist?.playlist_type || 'dancing',
    wedding_phase: playlist?.wedding_phase || ['dancing'],
    auto_generate: playlist?.auto_generate || false,
    guest_requests_enabled: playlist?.guest_requests_enabled || false
  });

  const [tracks, setTracks] = useState<PlaylistTrack[]>(playlist?.tracks || []);
  const [availableTracks, setAvailableTracks] = useState<MusicTrack[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterGenre, setFilterGenre] = useState<string>('');
  const [filterMood, setFilterMood] = useState<string>('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchAvailableTracks();
  }, []);

  const fetchAvailableTracks = async () => {
    try {
      const response = await fetch('/api/music?limit=100');
      const data = await response.json();
      setAvailableTracks(data.tracks || []);
    } catch (error) {
      console.error('Failed to fetch tracks:', error);
    }
  };

  const generateAIPlaylist = async () => {
    if (!playlistData.playlist_type) return;

    setLoading(true);
    try {
      const response = await fetch('/api/music/recommendations', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          client_id: 'current-client', // This would come from context
          recommendation_type: 'new_playlist',
          context: {
            playlist_type: playlistData.playlist_type,
            wedding_phases: playlistData.wedding_phase,
            venue_type: 'mixed'
          },
          limit: 20
        })
      });

      if (response.ok) {
        const data = await response.json();
        const recommendedTracks = data.recommendation.recommended_tracks.map((rec: any, index: number) => ({
          id: `temp-${index}`,
          playlist_id: playlist?.id || 'new',
          track_id: rec.track_id,
          order_index: index + 1,
          ai_suggested: true,
          confidence_score: rec.confidence_score,
          suggestion_reason: rec.reason,
          user_added: false,
          status: 'active' as const,
          added_at: new Date().toISOString()
        }));

        setTracks(recommendedTracks);
      }
    } catch (error) {
      console.error('Failed to generate AI playlist:', error);
    } finally {
      setLoading(false);
    }
  };

  const addTrackToPlaylist = (track: MusicTrack) => {
    const newTrack: PlaylistTrack = {
      id: `temp-${Date.now()}`,
      playlist_id: playlist?.id || 'new',
      track_id: track.id,
      order_index: tracks.length + 1,
      ai_suggested: false,
      user_added: true,
      status: 'active',
      added_at: new Date().toISOString(),
      track: track
    };

    setTracks([...tracks, newTrack]);
  };

  const removeTrack = (trackId: string) => {
    setTracks(tracks.filter(t => t.id !== trackId));
  };

  const moveTrack = (fromIndex: number, toIndex: number) => {
    const updatedTracks = [...tracks];
    const [movedTrack] = updatedTracks.splice(fromIndex, 1);
    updatedTracks.splice(toIndex, 0, movedTrack);

    // Update order indexes
    const reorderedTracks = updatedTracks.map((track, index) => ({
      ...track,
      order_index: index + 1
    }));

    setTracks(reorderedTracks);
  };

  const handleSave = () => {
    const totalDuration = tracks.reduce((sum, track) => 
      sum + (track.track?.duration_seconds || 0), 0
    );

    onSave({
      ...playlistData,
      total_tracks: tracks.length,
      total_duration_seconds: totalDuration,
      tracks
    });
  };

  const filteredAvailableTracks = availableTracks.filter(track => {
    const matchesSearch = track.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         track.artist.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesGenre = !filterGenre || track.primary_genre === filterGenre;
    const matchesMood = !filterMood || track.mood === filterMood;
    const notInPlaylist = !tracks.some(pt => pt.track_id === track.id);

    return matchesSearch && matchesGenre && matchesMood && notInPlaylist;
  });

  const totalDuration = tracks.reduce((sum, track) => 
    sum + (track.track?.duration_seconds || 0), 0
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold flex items-center gap-2">
          <Music className="h-6 w-6" />
          {playlist ? 'Edit Playlist' : 'Create New Playlist'}
        </h2>
        <div className="flex gap-2">
          <Button variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button onClick={handleSave}>
            Save Playlist
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Playlist Settings */}
        <Card>
          <CardHeader>
            <CardTitle>Playlist Settings</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Playlist Name</label>
              <Input
                value={playlistData.name || ''}
                onChange={(e) => setPlaylistData({...playlistData, name: e.target.value})}
                placeholder="My Wedding Playlist"
              />
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">Description</label>
              <Textarea
                value={playlistData.description || ''}
                onChange={(e) => setPlaylistData({...playlistData, description: e.target.value})}
                placeholder="Perfect songs for our special day..."
                rows={3}
              />
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">Playlist Type</label>
              <Select 
                value={playlistData.playlist_type || ''}
                onValueChange={(value: PlaylistType) => 
                  setPlaylistData({...playlistData, playlist_type: value})
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select playlist type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="ceremony">Ceremony</SelectItem>
                  <SelectItem value="cocktail_hour">Cocktail Hour</SelectItem>
                  <SelectItem value="dinner">Dinner</SelectItem>
                  <SelectItem value="dancing">Dancing</SelectItem>
                  <SelectItem value="special_moments">Special Moments</SelectItem>
                  <SelectItem value="background">Background</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-center gap-4 text-sm">
              <div className="flex items-center gap-2">
                <Clock className="h-4 w-4" />
                <span>{tracks.length} tracks</span>
              </div>
              <div className="flex items-center gap-2">
                <span>{Math.floor(totalDuration / 60)} minutes</span>
              </div>
            </div>

            <Button 
              onClick={generateAIPlaylist}
              disabled={loading}
              className="w-full gap-2"
            >
              <Sparkles className="h-4 w-4" />
              {loading ? 'Generating...' : 'Generate AI Playlist'}
            </Button>
          </CardContent>
        </Card>

        {/* Current Playlist */}
        <Card>
          <CardHeader>
            <CardTitle>Current Playlist ({tracks.length} tracks)</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {tracks.map((playlistTrack, index) => (
                <div 
                  key={playlistTrack.id}
                  className="flex items-center gap-3 p-3 rounded border bg-card hover:bg-accent/50"
                >
                  <div className="cursor-move">
                    <GripVertical className="h-4 w-4 text-muted-foreground" />
                  </div>
                  
                  <div className="text-sm font-mono text-muted-foreground w-8">
                    {index + 1}
                  </div>

                  <div className="flex-1 min-w-0">
                    <h4 className="font-medium truncate">
                      {playlistTrack.track?.title || 'Loading...'}
                    </h4>
                    <p className="text-sm text-muted-foreground truncate">
                      {playlistTrack.track?.artist}
                    </p>
                  </div>

                  <div className="flex items-center gap-2">
                    {playlistTrack.ai_suggested && (
                      <Badge variant="secondary" className="text-xs">
                        <Sparkles className="h-3 w-3 mr-1" />
                        AI
                      </Badge>
                    )}
                    <div className="text-xs text-muted-foreground">
                      {playlistTrack.track?.duration_seconds && 
                        `${Math.floor(playlistTrack.track.duration_seconds / 60)}:${(playlistTrack.track.duration_seconds % 60).toString().padStart(2, '0')}`
                      }
                    </div>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => removeTrack(playlistTrack.id)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Music Library */}
      <Card>
        <CardHeader>
          <CardTitle>Add Tracks</CardTitle>
          <div className="flex items-center gap-4">
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Search tracks..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-9"
              />
            </div>
            
            <Select value={filterGenre} onValueChange={setFilterGenre}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Genre" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">All Genres</SelectItem>
                <SelectItem value="pop">Pop</SelectItem>
                <SelectItem value="rock">Rock</SelectItem>
                <SelectItem value="romantic">Romantic</SelectItem>
                <SelectItem value="jazz">Jazz</SelectItem>
                <SelectItem value="classical">Classical</SelectItem>
              </SelectContent>
            </Select>

            <Select value={filterMood} onValueChange={setFilterMood}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Mood" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">All Moods</SelectItem>
                <SelectItem value="romantic">Romantic</SelectItem>
                <SelectItem value="upbeat">Upbeat</SelectItem>
                <SelectItem value="peaceful">Peaceful</SelectItem>
                <SelectItem value="energetic">Energetic</SelectItem>
                <SelectItem value="celebratory">Celebratory</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardHeader>
        
        <CardContent>
          <div className="space-y-2 max-h-64 overflow-y-auto">
            {filteredAvailableTracks.map((track) => (
              <div 
                key={track.id}
                className="flex items-center justify-between p-3 rounded border hover:bg-accent/50"
              >
                <div className="flex items-center gap-3">
                  <PlayCircle className="h-4 w-4 text-muted-foreground" />
                  <div>
                    <h4 className="font-medium">{track.title}</h4>
                    <p className="text-sm text-muted-foreground">{track.artist}</p>
                  </div>
                </div>
                
                <div className="flex items-center gap-4">
                  <div className="flex gap-2">
                    <Badge variant="secondary">{track.mood}</Badge>
                    <Badge variant="outline">Energy: {track.energy_level}</Badge>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    {Math.floor(track.duration_seconds / 60)}:{(track.duration_seconds % 60).toString().padStart(2, '0')}
                  </div>
                  <Button
                    size="sm"
                    onClick={() => addTrackToPlaylist(track)}
                    className="gap-1"
                  >
                    <Plus className="h-4 w-4" />
                    Add
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}