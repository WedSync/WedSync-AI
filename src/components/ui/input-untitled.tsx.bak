import * as React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'

const inputVariants = cva(
  'flex w-full rounded-md border bg-white px-3 py-2 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'border-gray-300 focus-visible:border-brand-300 focus-visible:ring-brand-500',
        wedding: 'border-rose-200 bg-rose-50/30 focus-visible:border-rose-300 focus-visible:ring-rose-500',
        elegant: 'border-purple-200 bg-purple-50/30 focus-visible:border-purple-300 focus-visible:ring-purple-500',
        error: 'border-red-300 bg-red-50 text-red-900 placeholder:text-red-300 focus-visible:border-red-500 focus-visible:ring-red-500',
        success: 'border-green-300 bg-green-50 text-green-900 placeholder:text-green-300 focus-visible:border-green-500 focus-visible:ring-green-500',
        warning: 'border-yellow-300 bg-yellow-50 text-yellow-900 placeholder:text-yellow-300 focus-visible:border-yellow-500 focus-visible:ring-yellow-500',
      },
      size: {
        xs: 'h-8 px-2.5 text-xs',
        sm: 'h-9 px-3 text-sm',
        md: 'h-10 px-3 text-sm',
        lg: 'h-11 px-3.5 text-base',
        xl: 'h-12 px-4 text-base',
        // Touch-optimized sizes
        touch: 'min-h-[44px] px-4 text-base',
        touchLg: 'min-h-[48px] px-5 text-lg',
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'md',
    },
  }
)

// Helper text component
const HelperText = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement> & { variant?: 'default' | 'error' | 'success' | 'warning' }
>(({ className, variant = 'default', ...props }, ref) => {
  const variantClasses = {
    default: 'text-gray-500',
    error: 'text-red-600',
    success: 'text-green-600',
    warning: 'text-yellow-600',
  }
  
  return (
    <p
      ref={ref}
      className={cn('text-sm mt-1.5', variantClasses[variant], className)}
      {...props}
    />
  )
})
HelperText.displayName = 'HelperText'

// Label component
const Label = React.forwardRef<
  HTMLLabelElement,
  React.LabelHTMLAttributes<HTMLLabelElement> & { required?: boolean }
>(({ className, children, required, ...props }, ref) => (
  <label
    ref={ref}
    className={cn(
      'block text-sm font-medium text-gray-700 mb-1.5',
      className
    )}
    {...props}
  >
    {children}
    {required && (
      <span className="text-red-500 ml-1" aria-label="required">
        *
      </span>
    )}
  </label>
))
Label.displayName = 'Label'

export interface InputProps
  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,
    VariantProps<typeof inputVariants> {
  label?: string
  helperText?: string
  error?: string | boolean
  success?: boolean
  warning?: string
  leftIcon?: React.ReactNode
  rightIcon?: React.ReactNode
  required?: boolean
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ 
    className, 
    type = 'text',
    variant,
    size,
    label,
    helperText,
    error,
    success,
    warning,
    leftIcon,
    rightIcon,
    required,
    disabled,
    id: providedId,
    ...props 
  }, ref) => {
    const inputId = providedId || React.useId()
    const helperId = `${inputId}-helper`
    const errorId = `${inputId}-error`
    
    // Determine variant based on state
    let finalVariant = variant
    if (error) finalVariant = 'error'
    else if (success) finalVariant = 'success'
    else if (warning) finalVariant = 'warning'
    
    // Ensure touch-optimized size on mobile
    const touchOptimizedSize = props.onTouchStart && (size === 'xs' || size === 'sm') ? 'touch' : size
    
    return (
      <div className="w-full">
        {label && (
          <Label htmlFor={inputId} required={required}>
            {label}
          </Label>
        )}
        
        <div className="relative">
          {leftIcon && (
            <div className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none">
              {leftIcon}
            </div>
          )}
          
          <input
            ref={ref}
            id={inputId}
            type={type}
            className={cn(
              inputVariants({ variant: finalVariant, size: touchOptimizedSize }),
              leftIcon && 'pl-10',
              rightIcon && 'pr-10',
              className
            )}
            disabled={disabled}
            aria-invalid={!!error}
            aria-describedby={
              error ? errorId : helperText ? helperId : undefined
            }
            aria-required={required}
            {...props}
          />
          
          {rightIcon && (
            <div className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none">
              {rightIcon}
            </div>
          )}
        </div>
        
        {error && typeof error === 'string' && (
          <HelperText id={errorId} variant="error" role="alert">
            {error}
          </HelperText>
        )}
        
        {warning && !error && (
          <HelperText variant="warning">
            {warning}
          </HelperText>
        )}
        
        {helperText && !error && !warning && (
          <HelperText id={helperId}>
            {helperText}
          </HelperText>
        )}
      </div>
    )
  }
)
Input.displayName = 'Input'

// Wedding-specific input presets
export const WeddingInput = React.forwardRef<HTMLInputElement, Omit<InputProps, 'variant'>>(
  (props, ref) => <Input {...props} variant="wedding" ref={ref} />
)
WeddingInput.displayName = 'WeddingInput'

export const ElegantInput = React.forwardRef<HTMLInputElement, Omit<InputProps, 'variant'>>(
  (props, ref) => <Input {...props} variant="elegant" ref={ref} />
)
ElegantInput.displayName = 'ElegantInput'

export { Input, inputVariants, Label, HelperText }