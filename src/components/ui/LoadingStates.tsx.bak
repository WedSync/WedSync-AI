/**
 * Unified Loading States for Better UX
 * Provides consistent loading experiences across the application
 */

import { Loader2, CheckCircle, XCircle, AlertCircle, Info } from 'lucide-react';
import { cn } from '@/lib/utils';

// Spinner Loading Component
export const Spinner = ({ 
  size = 'md', 
  className = '' 
}: { 
  size?: 'sm' | 'md' | 'lg' | 'xl';
  className?: string;
}) => {
  const sizeMap = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
    xl: 'h-12 w-12',
  };

  return (
    <Loader2 
      className={cn(
        'animate-spin text-blue-600',
        sizeMap[size],
        className
      )} 
    />
  );
};

// Full Page Loading
export const PageLoading = ({ message = 'Loading...' }: { message?: string }) => (
  <div className="flex flex-col items-center justify-center min-h-[400px]">
    <Spinner size="xl" />
    <p className="mt-4 text-gray-600">{message}</p>
  </div>
);

// Section Loading Overlay
export const SectionLoading = ({ 
  message = 'Loading...',
  overlay = true 
}: { 
  message?: string;
  overlay?: boolean;
}) => (
  <div className={cn(
    "flex flex-col items-center justify-center p-8",
    overlay && "absolute inset-0 bg-white/80 backdrop-blur-sm z-10"
  )}>
    <Spinner size="lg" />
    <p className="mt-3 text-sm text-gray-600">{message}</p>
  </div>
);

// Inline Loading (for buttons, forms)
export const InlineLoading = ({ 
  text = 'Processing...',
  size = 'sm' 
}: { 
  text?: string;
  size?: 'sm' | 'md';
}) => (
  <span className="inline-flex items-center gap-2">
    <Spinner size={size} />
    <span className="text-sm">{text}</span>
  </span>
);

// Skeleton Loaders
export const SkeletonText = ({ 
  lines = 1,
  className = '' 
}: { 
  lines?: number;
  className?: string;
}) => (
  <div className={cn("space-y-2", className)}>
    {Array.from({ length: lines }).map((_, i) => (
      <div 
        key={i}
        className={cn(
          "h-4 bg-gray-200 rounded animate-pulse",
          i === lines - 1 && lines > 1 && "w-3/4"
        )} 
      />
    ))}
  </div>
);

export const SkeletonCard = ({ className = '' }: { className?: string }) => (
  <div className={cn("bg-white rounded-lg shadow p-6", className)}>
    <div className="h-6 w-1/3 bg-gray-200 rounded animate-pulse mb-4" />
    <SkeletonText lines={3} />
    <div className="mt-4 flex gap-2">
      <div className="h-8 w-20 bg-gray-200 rounded animate-pulse" />
      <div className="h-8 w-20 bg-gray-200 rounded animate-pulse" />
    </div>
  </div>
);

// Table Skeleton
export const SkeletonTable = ({ 
  rows = 5,
  columns = 4 
}: { 
  rows?: number;
  columns?: number;
}) => (
  <div className="overflow-hidden rounded-lg border border-gray-200">
    <div className="bg-gray-50 px-6 py-3">
      <div className="flex gap-4">
        {Array.from({ length: columns }).map((_, i) => (
          <div key={i} className="h-4 w-24 bg-gray-200 rounded animate-pulse" />
        ))}
      </div>
    </div>
    <div className="divide-y divide-gray-200">
      {Array.from({ length: rows }).map((_, rowIndex) => (
        <div key={rowIndex} className="px-6 py-4">
          <div className="flex gap-4">
            {Array.from({ length: columns }).map((_, colIndex) => (
              <div 
                key={colIndex} 
                className="h-4 w-24 bg-gray-200 rounded animate-pulse" 
              />
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
);

// Loading Button
export const LoadingButton = ({ 
  loading,
  children,
  loadingText = 'Processing...',
  className = '',
  ...props
}: { 
  loading: boolean;
  children: React.ReactNode;
  loadingText?: string;
  className?: string;
  [key: string]: any;
}) => (
  <button
    disabled={loading}
    className={cn(
      "relative",
      loading && "cursor-not-allowed opacity-75",
      className
    )}
    {...props}
  >
    {loading ? (
      <span className="flex items-center gap-2">
        <Spinner size="sm" className="text-white" />
        <span>{loadingText}</span>
      </span>
    ) : (
      children
    )}
  </button>
);

// Progress Bar
export const ProgressBar = ({ 
  progress,
  showPercentage = true,
  className = ''
}: { 
  progress: number;
  showPercentage?: boolean;
  className?: string;
}) => (
  <div className={cn("w-full", className)}>
    <div className="flex items-center justify-between mb-1">
      <span className="text-sm text-gray-600">Progress</span>
      {showPercentage && (
        <span className="text-sm font-medium text-gray-900">{progress}%</span>
      )}
    </div>
    <div className="w-full bg-gray-200 rounded-full h-2.5">
      <div 
        className="bg-blue-600 h-2.5 rounded-full transition-all duration-300"
        style={{ width: `${Math.min(100, Math.max(0, progress))}%` }}
      />
    </div>
  </div>
);

// Empty State
export const EmptyState = ({ 
  icon: Icon = Info,
  title,
  description,
  action
}: { 
  icon?: any;
  title: string;
  description?: string;
  action?: React.ReactNode;
}) => (
  <div className="flex flex-col items-center justify-center py-12 px-4">
    <Icon className="h-12 w-12 text-gray-400 mb-4" />
    <h3 className="text-lg font-medium text-gray-900 mb-1">{title}</h3>
    {description && (
      <p className="text-sm text-gray-500 text-center max-w-sm mb-4">
        {description}
      </p>
    )}
    {action}
  </div>
);

// Loading States Provider Hook
import { createContext, useContext, useState } from 'react';

interface LoadingState {
  [key: string]: boolean;
}

const LoadingContext = createContext<{
  loading: LoadingState;
  setLoading: (key: string, value: boolean) => void;
}>({
  loading: {},
  setLoading: () => {},
});

export const LoadingProvider = ({ children }: { children: React.ReactNode }) => {
  const [loading, setLoadingState] = useState<LoadingState>({});

  const setLoading = (key: string, value: boolean) => {
    setLoadingState(prev => ({
      ...prev,
      [key]: value
    }));
  };

  return (
    <LoadingContext.Provider value={{ loading, setLoading }}>
      {children}
    </LoadingContext.Provider>
  );
};

export const useLoading = (key: string) => {
  const { loading, setLoading } = useContext(LoadingContext);
  
  return {
    isLoading: loading[key] || false,
    startLoading: () => setLoading(key, true),
    stopLoading: () => setLoading(key, false),
  };
};