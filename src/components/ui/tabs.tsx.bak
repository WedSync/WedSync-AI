'use client'

import { createContext, useContext, useState } from 'react'
import { clsx } from 'clsx'

interface TabsContextType {
  activeTab: string
  setActiveTab: (tab: string) => void
}

const TabsContext = createContext<TabsContextType | undefined>(undefined)

export function Tabs({ 
  children, 
  defaultValue,
  className 
}: { 
  children: React.ReactNode
  defaultValue: string
  className?: string 
}) {
  const [activeTab, setActiveTab] = useState(defaultValue)
  
  return (
    <TabsContext.Provider value={{ activeTab, setActiveTab }}>
      <div className={className}>
        {children}
      </div>
    </TabsContext.Provider>
  )
}

export function TabsList({ 
  children,
  className 
}: { 
  children: React.ReactNode
  className?: string 
}) {
  return (
    <div className={clsx(
      'flex border-b border-zinc-950/10 dark:border-white/10',
      className
    )}>
      {children}
    </div>
  )
}

export function TabsTrigger({ 
  value,
  children,
  className 
}: { 
  value: string
  children: React.ReactNode
  className?: string 
}) {
  const context = useContext(TabsContext)
  if (!context) throw new Error('TabsTrigger must be used within Tabs')
  
  const { activeTab, setActiveTab } = context
  const isActive = activeTab === value
  
  return (
    <button
      onClick={() => setActiveTab(value)}
      className={clsx(
        'px-4 py-2 text-sm font-medium transition-colors',
        'border-b-2 -mb-px',
        isActive ? [
          'border-zinc-950 dark:border-white',
          'text-zinc-950 dark:text-white'
        ] : [
          'border-transparent',
          'text-zinc-500 dark:text-zinc-400',
          'hover:text-zinc-700 dark:hover:text-zinc-300'
        ],
        className
      )}
    >
      {children}
    </button>
  )
}

export function TabsContent({ 
  value,
  children,
  className 
}: { 
  value: string
  children: React.ReactNode
  className?: string 
}) {
  const context = useContext(TabsContext)
  if (!context) throw new Error('TabsContent must be used within Tabs')
  
  const { activeTab } = context
  
  if (activeTab !== value) return null
  
  return (
    <div className={clsx('mt-6', className)}>
      {children}
    </div>
  )
}