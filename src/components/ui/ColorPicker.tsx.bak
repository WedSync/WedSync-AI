'use client';

import * as React from 'react';
import { useState } from 'react';
import { Button } from './button';
import { cn } from '@/lib/utils';

interface ColorPickerProps {
  onColorSelect?: (color: string) => void;
  disabled?: boolean;
  className?: string;
  defaultColor?: string;
}

// Predefined color palette for quick selection
const PRESET_COLORS = [
  '#FF69B4', // Hot Pink
  '#FFB6C1', // Light Pink
  '#FFC0CB', // Pink
  '#E6E6FA', // Lavender
  '#DDA0DD', // Plum
  '#98FB98', // Pale Green
  '#90EE90', // Light Green
  '#87CEEB', // Sky Blue
  '#4169E1', // Royal Blue
  '#FFE4B5', // Moccasin
  '#F5DEB3', // Wheat
  '#D2691E', // Chocolate
  '#FFFFFF', // White
  '#F5F5DC', // Beige
  '#D3D3D3', // Light Gray
];

const ColorPicker = React.forwardRef<HTMLDivElement, ColorPickerProps>(
  ({ onColorSelect, disabled = false, className, defaultColor = '#FF69B4', ...props }, ref) => {
    const [selectedColor, setSelectedColor] = useState(defaultColor);
    const [customColor, setCustomColor] = useState(defaultColor);
    const [isOpen, setIsOpen] = useState(false);

    const handleColorSelect = (color: string) => {
      setSelectedColor(color);
      setCustomColor(color);
      onColorSelect?.(color);
      setIsOpen(false);
    };

    const handleCustomColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      const color = e.target.value;
      setCustomColor(color);
      setSelectedColor(color);
      onColorSelect?.(color);
    };

    return (
      <div ref={ref} className={cn('relative', className)} {...props}>
        <Button
          type="button"
          variant="outline"
          disabled={disabled}
          onClick={() => setIsOpen(!isOpen)}
          className="w-full justify-start gap-2 h-10"
          aria-label={`Selected color: ${selectedColor}`}
          aria-expanded={isOpen}
          aria-haspopup="dialog"
        >
          <div
            className="w-4 h-4 rounded-full border border-gray-300 flex-shrink-0"
            style={{ backgroundColor: selectedColor }}
            aria-hidden="true"
          />
          <span className="font-mono text-sm">{selectedColor}</span>
          <div className="ml-auto">
            <svg
              className={cn("h-4 w-4 transition-transform", isOpen && "rotate-180")}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </Button>

        {isOpen && (
          <div 
            className="absolute z-50 mt-1 w-64 p-4 bg-white border border-gray-200 rounded-lg shadow-lg"
            role="dialog"
            aria-label="Color picker"
          >
            {/* Custom Color Input */}
            <div className="mb-4">
              <label htmlFor="custom-color" className="block text-sm font-medium text-gray-700 mb-2">
                Custom Color
              </label>
              <div className="flex gap-2 items-center">
                <input
                  id="custom-color"
                  type="color"
                  value={customColor}
                  onChange={handleCustomColorChange}
                  className="w-12 h-8 rounded border border-gray-300 cursor-pointer"
                  aria-label="Choose custom color"
                />
                <input
                  type="text"
                  value={customColor}
                  onChange={(e) => {
                    const value = e.target.value;
                    if (/^#[0-9A-Fa-f]{0,6}$/.test(value)) {
                      setCustomColor(value);
                      if (value.length === 7) {
                        setSelectedColor(value);
                        onColorSelect?.(value);
                      }
                    }
                  }}
                  className="flex-1 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                  placeholder="#FF69B4"
                  aria-label="Color hex value"
                />
              </div>
            </div>

            {/* Preset Colors */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Preset Colors
              </label>
              <div className="grid grid-cols-5 gap-2">
                {PRESET_COLORS.map((color, index) => (
                  <button
                    key={color}
                    type="button"
                    onClick={() => handleColorSelect(color)}
                    className={cn(
                      "w-8 h-8 rounded-full border-2 transition-all hover:scale-110 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1",
                      selectedColor === color 
                        ? "border-gray-900 ring-2 ring-blue-500" 
                        : "border-gray-300 hover:border-gray-400"
                    )}
                    style={{ backgroundColor: color }}
                    aria-label={`Select color ${color}`}
                    title={color}
                  />
                ))}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="mt-4 flex justify-end gap-2">
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => setIsOpen(false)}
              >
                Cancel
              </Button>
              <Button
                type="button"
                size="sm"
                onClick={() => {
                  handleColorSelect(customColor);
                }}
              >
                Select
              </Button>
            </div>
          </div>
        )}

        {/* Overlay to close picker when clicking outside */}
        {isOpen && (
          <div
            className="fixed inset-0 z-40"
            onClick={() => setIsOpen(false)}
            aria-hidden="true"
          />
        )}
      </div>
    );
  }
);

ColorPicker.displayName = 'ColorPicker';

export { ColorPicker };