'use client'

import { useState, useEffect } from 'react'
import { Card } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { 
  UsersIcon,
  MagnifyingGlassIcon,
  MapPinIcon,
  StarIcon,
  UserPlusIcon,
  CheckIcon,
  ClockIcon,
  XMarkIcon,
  ChatBubbleLeftRightIcon
} from '@heroicons/react/24/outline'

interface VendorConnection {
  id: string
  vendor_id: string
  business_name: string
  primary_category: string
  secondary_categories: string[]
  city: string
  county: string
  average_rating: number
  total_reviews: number
  is_verified: boolean
  featured_image?: string
  years_in_business: number
  service_radius_miles: number
  connection_status: 'none' | 'pending_sent' | 'pending_received' | 'connected'
  mutual_connections_count: number
  shared_weddings_count: number
  last_active_at: string
  profile_completion_score: number
}

interface ConnectionRequest {
  id: string
  from_vendor_id: string
  to_vendor_id: string
  from_business_name: string
  to_business_name: string
  message: string
  status: 'pending' | 'accepted' | 'declined'
  created_at: string
  category: string
  mutual_connections: number
}

interface Props {
  currentVendorId: string
  organizationId: string
}

export function VendorConnectionHub({ currentVendorId, organizationId }: Props) {
  const [vendors, setVendors] = useState<VendorConnection[]>([])
  const [connectionRequests, setConnectionRequests] = useState<ConnectionRequest[]>([])
  const [searchQuery, setSearchQuery] = useState('')
  const [categoryFilter, setCategoryFilter] = useState('all')
  const [locationFilter, setLocationFilter] = useState('all')
  const [activeTab, setActiveTab] = useState<'discover' | 'connections' | 'requests'>('discover')
  const [loading, setLoading] = useState(true)

  const categories = [
    'Photography', 'Videography', 'Venue', 'Catering', 'Florist', 
    'DJ/Music', 'Transport', 'Hair & Makeup', 'Wedding Planning'
  ]

  useEffect(() => {
    fetchVendors()
    fetchConnectionRequests()
  }, [])

  const fetchVendors = async () => {
    try {
      setLoading(true)
      const response = await fetch("/api/placeholder")
      if (response.ok) {
        const data = await response.json()
        setVendors(data.vendors || [])
      }
    } catch (error) {
      console.error('Failed to fetch vendors:', error)
    } finally {
      setLoading(false)
    }
  }

  const fetchConnectionRequests = async () => {
    try {
      const response = await fetch("/api/placeholder")
      if (response.ok) {
        const data = await response.json()
        setConnectionRequests(data.requests || [])
      }
    } catch (error) {
      console.error('Failed to fetch connection requests:', error)
    }
  }

  const sendConnectionRequest = async (targetVendorId: string) => {
    try {
      const response = await fetch('/api/vendors/connections/request', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          from_vendor_id: currentVendorId,
          to_vendor_id: targetVendorId,
          message: `Hi! I'd love to connect and explore potential collaboration opportunities.`
        })
      })

      if (response.ok) {
        setVendors(vendors.map(v => 
          v.vendor_id === targetVendorId 
            ? { ...v, connection_status: 'pending_sent' }
            : v
        ))
      }
    } catch (error) {
      console.error('Failed to send connection request:', error)
    }
  }

  const respondToRequest = async (requestId: string, response: 'accepted' | 'declined') => {
    try {
      const apiResponse = await fetch(`/api/vendors/connections/respond`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ request_id: requestId, response })
      })

      if (apiResponse.ok) {
        setConnectionRequests(connectionRequests.filter(req => req.id !== requestId))
        if (response === 'accepted') {
          fetchVendors() // Refresh to update connection statuses
        }
      }
    } catch (error) {
      console.error('Failed to respond to connection request:', error)
    }
  }

  const filteredVendors = vendors.filter(vendor => {
    const matchesSearch = vendor.business_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         vendor.primary_category.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         vendor.city.toLowerCase().includes(searchQuery.toLowerCase())
    
    const matchesCategory = categoryFilter === 'all' || 
                          vendor.primary_category === categoryFilter ||
                          vendor.secondary_categories.includes(categoryFilter)
    
    const matchesLocation = locationFilter === 'all' || vendor.county === locationFilter

    return matchesSearch && matchesCategory && matchesLocation
  })

  const connectedVendors = vendors.filter(v => v.connection_status === 'connected')
  const pendingRequests = connectionRequests.filter(req => req.status === 'pending')

  const getConnectionButtonText = (status: string) => {
    switch (status) {
      case 'connected': return 'Connected'
      case 'pending_sent': return 'Request Sent'
      case 'pending_received': return 'Accept Request'
      default: return 'Connect'
    }
  }

  const getConnectionButtonVariant = (status: string) => {
    switch (status) {
      case 'connected': return 'secondary'
      case 'pending_sent': return 'outline'
      case 'pending_received': return 'default'
      default: return 'default'
    }
  }

  const formatTimeAgo = (dateString: string) => {
    const now = new Date()
    const date = new Date(dateString)
    const diffMs = now.getTime() - date.getTime()
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24))
    
    if (diffDays === 0) return 'Today'
    if (diffDays === 1) return 'Yesterday'
    if (diffDays < 7) return `${diffDays} days ago`
    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`
    return `${Math.floor(diffDays / 30)} months ago`
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Vendor Network</h2>
          <p className="text-gray-600">Discover and connect with other wedding professionals</p>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="secondary" className="flex items-center gap-1">
            <UsersIcon className="size-4" />
            {connectedVendors.length} Connections
          </Badge>
          {pendingRequests.length > 0 && (
            <Badge variant="outline" className="flex items-center gap-1">
              <ClockIcon className="size-4" />
              {pendingRequests.length} Pending
            </Badge>
          )}
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-200">
        <nav className="flex space-x-8">
          {['discover', 'connections', 'requests'].map((tab) => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab as any)}
              className={`py-2 px-1 border-b-2 font-medium text-sm capitalize ${
                activeTab === tab
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              {tab}
              {tab === 'requests' && pendingRequests.length > 0 && (
                <Badge variant="destructive" className="ml-2 text-xs">
                  {pendingRequests.length}
                </Badge>
              )}
            </button>
          ))}
        </nav>
      </div>

      {/* Discover Tab */}
      {activeTab === 'discover' && (
        <div className="space-y-4">
          {/* Filters */}
          <Card className="p-4">
            <div className="flex flex-wrap gap-4">
              <div className="flex-1 min-w-64">
                <div className="relative">
                  <MagnifyingGlassIcon className="size-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                  <Input
                    placeholder="Search vendors by name, category, or location..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <Select value={categoryFilter} onValueChange={setCategoryFilter}>
                <SelectTrigger className="w-48">
                  <SelectValue placeholder="All Categories" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  {categories.map(category => (
                    <SelectItem key={category} value={category}>{category}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Select value={locationFilter} onValueChange={setLocationFilter}>
                <SelectTrigger className="w-48">
                  <SelectValue placeholder="All Locations" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Locations</SelectItem>
                  <SelectItem value="London">London</SelectItem>
                  <SelectItem value="Birmingham">Birmingham</SelectItem>
                  <SelectItem value="Manchester">Manchester</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </Card>

          {/* Vendor Grid */}
          {loading ? (
            <div className="text-center py-12">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
              <p className="mt-4 text-gray-600">Loading vendors...</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredVendors.map(vendor => (
                <Card key={vendor.id} className="p-6 hover:shadow-lg transition-shadow">
                  <div className="flex items-start gap-4">
                    <div className="size-12 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                      <UsersIcon className="size-6 text-blue-600" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-2">
                        <h3 className="font-semibold truncate">{vendor.business_name}</h3>
                        {vendor.is_verified && (
                          <CheckIcon className="size-4 text-green-500 flex-shrink-0" />
                        )}
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{vendor.primary_category}</p>
                      <div className="flex items-center gap-1 text-sm text-gray-500 mb-2">
                        <MapPinIcon className="size-4" />
                        <span>{vendor.city}, {vendor.county}</span>
                      </div>
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center gap-1">
                          <StarIcon className="size-4 text-yellow-400 fill-current" />
                          <span className="text-sm font-medium">{vendor.average_rating.toFixed(1)}</span>
                          <span className="text-sm text-gray-500">({vendor.total_reviews})</span>
                        </div>
                        <span className="text-xs text-gray-500">
                          {vendor.years_in_business}+ years
                        </span>
                      </div>
                      
                      {/* Connection Stats */}
                      {(vendor.mutual_connections_count > 0 || vendor.shared_weddings_count > 0) && (
                        <div className="flex gap-4 text-xs text-gray-500 mb-4">
                          {vendor.mutual_connections_count > 0 && (
                            <span>{vendor.mutual_connections_count} mutual connections</span>
                          )}
                          {vendor.shared_weddings_count > 0 && (
                            <span>{vendor.shared_weddings_count} shared weddings</span>
                          )}
                        </div>
                      )}

                      <Button
                        onClick={() => sendConnectionRequest(vendor.vendor_id)}
                        disabled={vendor.connection_status !== 'none'}
                        variant={getConnectionButtonVariant(vendor.connection_status) as any}
                        size="sm"
                        className="w-full"
                      >
                        {vendor.connection_status === 'connected' && <CheckIcon className="size-4 mr-1" />}
                        {vendor.connection_status === 'pending_sent' && <ClockIcon className="size-4 mr-1" />}
                        {vendor.connection_status === 'none' && <UserPlusIcon className="size-4 mr-1" />}
                        {getConnectionButtonText(vendor.connection_status)}
                      </Button>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Connections Tab */}
      {activeTab === 'connections' && (
        <div className="space-y-4">
          <Card className="p-4">
            <h3 className="font-semibold mb-4">Your Network ({connectedVendors.length} vendors)</h3>
            {connectedVendors.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <UsersIcon className="size-12 mx-auto mb-3 text-gray-300" />
                <p>No connections yet</p>
                <p className="text-sm mt-1">Start networking to grow your professional circle</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {connectedVendors.map(vendor => (
                  <div key={vendor.id} className="p-4 border border-gray-200 rounded-lg">
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium">{vendor.business_name}</h4>
                        <p className="text-sm text-gray-600">{vendor.primary_category}</p>
                        <p className="text-xs text-gray-500">{vendor.city}, {vendor.county}</p>
                      </div>
                      <Button variant="outline" size="sm">
                        <ChatBubbleLeftRightIcon className="size-4 mr-1" />
                        Message
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </Card>
        </div>
      )}

      {/* Requests Tab */}
      {activeTab === 'requests' && (
        <div className="space-y-4">
          <Card className="p-4">
            <h3 className="font-semibold mb-4">Connection Requests ({pendingRequests.length})</h3>
            {pendingRequests.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <ClockIcon className="size-12 mx-auto mb-3 text-gray-300" />
                <p>No pending requests</p>
                <p className="text-sm mt-1">New connection requests will appear here</p>
              </div>
            ) : (
              <div className="space-y-4">
                {pendingRequests.map(request => (
                  <div key={request.id} className="p-4 border border-gray-200 rounded-lg">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <h4 className="font-medium">{request.from_business_name}</h4>
                        <p className="text-sm text-gray-600">{request.category}</p>
                        <p className="text-sm text-gray-700 mt-2">{request.message}</p>
                        <p className="text-xs text-gray-500 mt-2">
                          {formatTimeAgo(request.created_at)}
                          {request.mutual_connections > 0 && (
                            <span className="ml-2">• {request.mutual_connections} mutual connections</span>
                          )}
                        </p>
                      </div>
                      <div className="flex gap-2 ml-4">
                        <Button
                          onClick={() => respondToRequest(request.id, 'accepted')}
                          size="sm"
                          variant="default"
                        >
                          <CheckIcon className="size-4 mr-1" />
                          Accept
                        </Button>
                        <Button
                          onClick={() => respondToRequest(request.id, 'declined')}
                          size="sm"
                          variant="outline"
                        >
                          <XMarkIcon className="size-4 mr-1" />
                          Decline
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </Card>
        </div>
      )}
    </div>
  )
}