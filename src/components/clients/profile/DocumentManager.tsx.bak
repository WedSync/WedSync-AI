'use client'

import { useState, useCallback } from 'react'
import { Button } from '@/components/ui/button-untitled'
import { Card } from '@/components/ui/card-untitled'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { 
  Upload, 
  File, 
  Image, 
  FileText, 
  Download, 
  Trash2, 
  Eye, 
  Share2,
  FolderPlus,
  Search,
  Filter,
  MoreHorizontal,
  AlertTriangle,
  Check
} from 'lucide-react'
import { format } from 'date-fns'
import { useRBAC } from '@/lib/security/rbac-system'
import { PERMISSIONS } from '@/lib/security/rbac-system'

interface Document {
  id: string
  name: string
  type: string
  size: number
  url: string
  thumbnail_url?: string
  uploaded_at: string
  uploaded_by: string
  uploaded_by_name: string
  category?: string
  tags?: string[]
  is_secured?: boolean
  access_level?: 'public' | 'private' | 'restricted'
  virus_scan_status?: 'pending' | 'clean' | 'infected' | 'failed'
  metadata?: Record<string, any>
}

interface DocumentManagerProps {
  clientId: string
  documents: Document[]
  onDocumentUpload?: (document: Document) => void
  onDocumentDelete?: (documentId: string) => void
  currentUserId?: string
}

const documentIcons = {
  'image/': Image,
  'application/pdf': FileText,
  'text/': FileText,
  'application/msword': FileText,
  'application/vnd.openxmlformats-officedocument': FileText,
  default: File
}

const documentCategories = [
  'Contract',
  'Invoice',
  'Photo',
  'Timeline',
  'Venue Info',
  'Vendor Info',
  'Guest List',
  'Other'
]

export default function DocumentManager({ 
  clientId, 
  documents, 
  onDocumentUpload, 
  onDocumentDelete,
  currentUserId 
}: DocumentManagerProps) {
  const [uploadProgress, setUploadProgress] = useState(0)
  const [isUploading, setIsUploading] = useState(false)
  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null)
  const [selectedCategory, setSelectedCategory] = useState<string>('')
  const [searchQuery, setSearchQuery] = useState('')
  const [filterCategory, setFilterCategory] = useState<string>('all')
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const [showUploadForm, setShowUploadForm] = useState(false)

  const { hasPermission } = useRBAC()
  const [canUpload, setCanUpload] = useState(false)
  const [canDelete, setCanDelete] = useState(false)

  // Check permissions
  useState(() => {
    const checkPermissions = async () => {
      if (currentUserId) {
        const hasUploadPermission = await hasPermission(currentUserId, PERMISSIONS.WEDDING_EDIT)
        const hasDeletePermission = await hasPermission(currentUserId, PERMISSIONS.WEDDING_DELETE)
        setCanUpload(hasUploadPermission)
        setCanDelete(hasDeletePermission)
      }
    }
    checkPermissions()
  })

  const getDocumentIcon = (type: string) => {
    for (const [key, Icon] of Object.entries(documentIcons)) {
      if (type.startsWith(key)) {
        return Icon
      }
    }
    return documentIcons.default
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (files && files.length > 0) {
      setSelectedFiles(files)
      setShowUploadForm(true)
    }
  }

  const handleUpload = useCallback(async () => {
    if (!selectedFiles || !canUpload) return

    setIsUploading(true)
    setUploadProgress(0)

    try {
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i]
        const formData = new FormData()
        formData.append('file', file)
        formData.append('clientId', clientId)
        formData.append('category', selectedCategory)

        const response = await fetch('/api/documents/upload', {
          method: 'POST',
          headers: {
            'x-csrf-token': document.cookie
              .split('; ')
              .find(row => row.startsWith('csrf-token='))
              ?.split('=')[1] || ''
          },
          body: formData
        })

        if (!response.ok) {
          throw new Error(`Failed to upload ${file.name}`)
        }

        const uploadedDocument = await response.json()
        onDocumentUpload?.(uploadedDocument)

        // Update progress
        setUploadProgress(((i + 1) / selectedFiles.length) * 100)
      }

      // Reset form
      setSelectedFiles(null)
      setSelectedCategory('')
      setShowUploadForm(false)
    } catch (error) {
      console.error('Upload failed:', error)
      alert('Upload failed. Please try again.')
    } finally {
      setIsUploading(false)
      setUploadProgress(0)
    }
  }, [selectedFiles, clientId, selectedCategory, canUpload, onDocumentUpload])

  const handleDelete = async (documentId: string) => {
    if (!canDelete) return

    if (!confirm('Are you sure you want to delete this document?')) return

    try {
      const response = await fetch(`/api/documents/${documentId}`, {
        method: 'DELETE',
        headers: {
          'x-csrf-token': document.cookie
            .split('; ')
            .find(row => row.startsWith('csrf-token='))
            ?.split('=')[1] || ''
        }
      })

      if (!response.ok) {
        throw new Error('Failed to delete document')
      }

      onDocumentDelete?.(documentId)
    } catch (error) {
      console.error('Delete failed:', error)
      alert('Delete failed. Please try again.')
    }
  }

  const filteredDocuments = documents.filter(doc => {
    const matchesSearch = doc.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         doc.category?.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesCategory = filterCategory === 'all' || doc.category === filterCategory
    return matchesSearch && matchesCategory
  })

  const getVirusScanBadge = (status?: string) => {
    switch (status) {
      case 'pending':
        return <Badge className="bg-yellow-50 text-yellow-700 border-yellow-200">Scanning...</Badge>
      case 'clean':
        return <Badge className="bg-green-50 text-green-700 border-green-200"><Check className="w-3 h-3 mr-1" />Safe</Badge>
      case 'infected':
        return <Badge className="bg-red-50 text-red-700 border-red-200"><AlertTriangle className="w-3 h-3 mr-1" />Threat Detected</Badge>
      case 'failed':
        return <Badge className="bg-gray-50 text-gray-700 border-gray-200">Scan Failed</Badge>
      default:
        return null
    }
  }

  return (
    <div className="space-y-6" data-testid="document-manager">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h2 className="text-lg font-semibold text-gray-900">Documents</h2>
          <p className="text-sm text-gray-500">
            {documents.length} document{documents.length !== 1 ? 's' : ''} uploaded
          </p>
        </div>
        
        {canUpload && (
          <div className="flex items-center gap-2">
            <input
              type="file"
              multiple
              onChange={handleFileSelect}
              className="hidden"
              id="document-upload"
              accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif"
            />
            <label htmlFor="document-upload">
              <Button className="gap-2 cursor-pointer" asChild>
                <span>
                  <Upload className="w-4 h-4" />
                  Upload Documents
                </span>
              </Button>
            </label>
          </div>
        )}
      </div>

      {/* Upload Form */}
      {showUploadForm && selectedFiles && (
        <Card className="p-4 border border-blue-200 bg-blue-50">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="font-medium text-blue-900">
                Upload {selectedFiles.length} file{selectedFiles.length > 1 ? 's' : ''}
              </h3>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowUploadForm(false)}
                className="text-blue-700 border-blue-200"
              >
                Cancel
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Category
                </label>
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                >
                  <option value="">Select category...</option>
                  {documentCategories.map(category => (
                    <option key={category} value={category}>{category}</option>
                  ))}
                </select>
              </div>

              <div className="flex items-end">
                <Button
                  onClick={handleUpload}
                  disabled={isUploading || !selectedCategory}
                  className="w-full gap-2"
                >
                  {isUploading ? 'Uploading...' : 'Upload Files'}
                </Button>
              </div>
            </div>

            {isUploading && (
              <div className="space-y-2">
                <Progress value={uploadProgress} className="h-2" />
                <p className="text-sm text-blue-700">Uploading... {Math.round(uploadProgress)}%</p>
              </div>
            )}

            {/* File Preview */}
            <div className="space-y-2">
              <h4 className="text-sm font-medium text-gray-700">Files to upload:</h4>
              {Array.from(selectedFiles).map((file, index) => (
                <div key={index} className="flex items-center gap-2 p-2 bg-white rounded border">
                  <File className="w-4 h-4 text-gray-500" />
                  <span className="text-sm text-gray-700">{file.name}</span>
                  <span className="text-xs text-gray-500">({formatFileSize(file.size)})</span>
                </div>
              ))}
            </div>
          </div>
        </Card>
      )}

      {/* Search and Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
          <input
            type="text"
            placeholder="Search documents..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          />
        </div>

        <select
          value={filterCategory}
          onChange={(e) => setFilterCategory(e.target.value)}
          className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
        >
          <option value="all">All Categories</option>
          {documentCategories.map(category => (
            <option key={category} value={category}>{category}</option>
          ))}
        </select>

        <div className="flex items-center bg-gray-100 rounded-lg p-1">
          <button
            onClick={() => setViewMode('grid')}
            className={`px-3 py-1 text-sm rounded-md transition-colors ${
              viewMode === 'grid'
                ? 'bg-white text-gray-900 shadow-xs'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            Grid
          </button>
          <button
            onClick={() => setViewMode('list')}
            className={`px-3 py-1 text-sm rounded-md transition-colors ${
              viewMode === 'list'
                ? 'bg-white text-gray-900 shadow-xs'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            List
          </button>
        </div>
      </div>

      {/* Documents */}
      {filteredDocuments.length === 0 ? (
        <Card className="p-12 text-center border border-gray-200">
          <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No documents found</h3>
          <p className="text-gray-500 mb-4">
            {searchQuery || filterCategory !== 'all'
              ? 'Try adjusting your search or filters'
              : 'Upload documents to get started'}
          </p>
          {canUpload && (
            <label htmlFor="document-upload">
              <Button className="gap-2 cursor-pointer" asChild>
                <span>
                  <Upload className="w-4 h-4" />
                  Upload First Document
                </span>
              </Button>
            </label>
          )}
        </Card>
      ) : (
        <div className={viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' : 'space-y-3'}>
          {filteredDocuments.map(document => {
            const Icon = getDocumentIcon(document.type)

            return viewMode === 'grid' ? (
              <Card key={document.id} className="p-4 hover:shadow-md transition-all duration-200 border border-gray-200">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center gap-2">
                    <Icon className="w-5 h-5 text-gray-500" />
                    {document.category && (
                      <Badge variant="secondary" className="text-xs">
                        {document.category}
                      </Badge>
                    )}
                  </div>
                  
                  <div className="flex items-center gap-1">
                    <Button variant="ghost" size="sm" className="w-8 h-8 p-0">
                      <Eye className="w-4 h-4" />
                    </Button>
                    <Button variant="ghost" size="sm" className="w-8 h-8 p-0">
                      <Download className="w-4 h-4" />
                    </Button>
                    {canDelete && (
                      <Button
                        variant="ghost"
                        size="sm"
                        className="w-8 h-8 p-0 text-red-500 hover:text-red-700"
                        onClick={() => handleDelete(document.id)}
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    )}
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-gray-900 mb-1 truncate" title={document.name}>
                    {document.name}
                  </h4>
                  <div className="text-xs text-gray-500 space-y-1">
                    <div>{formatFileSize(document.size)}</div>
                    <div>{format(new Date(document.uploaded_at), 'MMM d, yyyy')}</div>
                    <div>by {document.uploaded_by_name}</div>
                  </div>
                  {getVirusScanBadge(document.virus_scan_status)}
                </div>
              </Card>
            ) : (
              <Card key={document.id} className="p-4 hover:bg-gray-50 transition-colors border border-gray-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <Icon className="w-5 h-5 text-gray-500" />
                    <div>
                      <h4 className="font-medium text-gray-900">{document.name}</h4>
                      <div className="flex items-center gap-3 text-xs text-gray-500">
                        <span>{formatFileSize(document.size)}</span>
                        <span>{format(new Date(document.uploaded_at), 'MMM d, yyyy')}</span>
                        <span>by {document.uploaded_by_name}</span>
                        {document.category && (
                          <Badge variant="secondary" className="text-xs">
                            {document.category}
                          </Badge>
                        )}
                        {getVirusScanBadge(document.virus_scan_status)}
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center gap-1">
                    <Button variant="ghost" size="sm">
                      <Eye className="w-4 h-4" />
                    </Button>
                    <Button variant="ghost" size="sm">
                      <Download className="w-4 h-4" />
                    </Button>
                    <Button variant="ghost" size="sm">
                      <Share2 className="w-4 h-4" />
                    </Button>
                    {canDelete && (
                      <Button
                        variant="ghost"
                        size="sm"
                        className="text-red-500 hover:text-red-700"
                        onClick={() => handleDelete(document.id)}
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    )}
                  </div>
                </div>
              </Card>
            )
          })}
        </div>
      )}
    </div>
  )
}