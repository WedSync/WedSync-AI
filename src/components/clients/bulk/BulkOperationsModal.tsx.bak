'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button-untitled'
import { Input } from '@/components/ui/input-untitled'
import { Badge } from '@/components/ui/badge'
import { 
  X,
  AlertTriangle,
  Users,
  CheckCircle,
  Clock,
  Tag,
  Edit,
  Download,
  Trash2
} from 'lucide-react'
import { ClientData } from '@/components/clients/ClientListViews'
import { BulkOperation } from './BulkSelectionInterface'

interface BulkOperationsModalProps {
  isOpen: boolean
  onClose: () => void
  selectedClients: ClientData[]
  operations: BulkOperation[]
  selectedOperation: BulkOperation | null
  onExecute: (operation: string, parameters: any) => Promise<void>
  isProcessing: boolean
}

interface OperationParameters {
  status_update: {
    new_status: 'lead' | 'booked' | 'completed' | 'archived'
  }
  tag_add: {
    tags: string[]
  }
  tag_remove: {
    tags: string[]
  }
  delete: {
    confirmation: string
  }
  export: {
    format: 'csv' | 'excel'
    include_fields: string[]
  }
}

const STATUS_OPTIONS = [
  { value: 'lead', label: 'Lead', color: 'amber' },
  { value: 'booked', label: 'Booked', color: 'green' },
  { value: 'completed', label: 'Completed', color: 'blue' },
  { value: 'archived', label: 'Archived', color: 'gray' }
]

const EXPORT_FIELDS = [
  { key: 'basic_info', label: 'Basic Information', description: 'Name, email, phone' },
  { key: 'wedding_details', label: 'Wedding Details', description: 'Date, venue, status' },
  { key: 'package_info', label: 'Package Information', description: 'Package name, price' },
  { key: 'activity_history', label: 'Activity History', description: 'Recent activities' }
]

export function BulkOperationsModal({
  isOpen,
  onClose,
  selectedClients,
  operations,
  selectedOperation,
  onExecute,
  isProcessing
}: BulkOperationsModalProps) {
  const [currentStep, setCurrentStep] = useState<'select' | 'configure' | 'confirm'>('select')
  const [currentOperation, setCurrentOperation] = useState<BulkOperation | null>(selectedOperation)
  const [parameters, setParameters] = useState<any>({})
  const [confirmationText, setConfirmationText] = useState('')

  if (!isOpen) return null

  const handleOperationSelect = (operation: BulkOperation) => {
    setCurrentOperation(operation)
    setCurrentStep('configure')
    setParameters({})
    setConfirmationText('')
  }

  const handleNext = () => {
    if (currentStep === 'configure') {
      setCurrentStep('confirm')
    }
  }

  const handleBack = () => {
    if (currentStep === 'confirm') {
      setCurrentStep('configure')
    } else if (currentStep === 'configure') {
      setCurrentStep('select')
      setCurrentOperation(null)
    }
  }

  const handleExecute = async () => {
    if (!currentOperation) return

    await onExecute(currentOperation.type, parameters)
  }

  const isValidConfiguration = () => {
    if (!currentOperation) return false

    switch (currentOperation.type) {
      case 'status_update':
        return parameters.new_status
      case 'tag_add':
        return parameters.tags?.length > 0
      case 'tag_remove':
        return parameters.tags?.length > 0
      case 'delete':
        return confirmationText === 'DELETE'
      case 'export':
        return parameters.format && parameters.include_fields?.length > 0
      default:
        return true
    }
  }

  const renderOperationSelector = () => (
    <div className="space-y-4">
      <div className="flex items-center gap-3 mb-6">
        <Users className="w-5 h-5 text-blue-600" />
        <div>
          <h3 className="text-lg font-semibold text-gray-900">
            Bulk Operations
          </h3>
          <p className="text-sm text-gray-500">
            Choose an operation to apply to {selectedClients.length} selected client{selectedClients.length !== 1 ? 's' : ''}
          </p>
        </div>
      </div>

      <div className="grid gap-3">
        {operations.map((operation) => {
          const Icon = operation.icon
          return (
            <button
              key={operation.type}
              onClick={() => handleOperationSelect(operation)}
              className={`flex items-start gap-4 p-4 rounded-lg border-2 transition-all duration-200 text-left hover:border-blue-300 hover:bg-blue-50 ${
                operation.destructive 
                  ? 'border-red-200 hover:border-red-300 hover:bg-red-50' 
                  : 'border-gray-200'
              }`}
              data-testid={`bulk-${operation.type}`}
            >
              <div className={`p-2 rounded-lg ${
                operation.destructive 
                  ? 'bg-red-100 text-red-600' 
                  : 'bg-blue-100 text-blue-600'
              }`}>
                <Icon className="w-5 h-5" />
              </div>
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <span className="font-medium text-gray-900">{operation.label}</span>
                  {operation.destructive && (
                    <AlertTriangle className="w-4 h-4 text-red-500" />
                  )}
                </div>
                <p className="text-sm text-gray-500">{operation.description}</p>
              </div>
            </button>
          )
        })}
      </div>
    </div>
  )

  const renderOperationConfiguration = () => {
    if (!currentOperation) return null

    return (
      <div className="space-y-6">
        <div className="flex items-center gap-3 mb-6">
          <currentOperation.icon className="w-5 h-5 text-blue-600" />
          <div>
            <h3 className="text-lg font-semibold text-gray-900">
              Configure {currentOperation.label}
            </h3>
            <p className="text-sm text-gray-500">
              Set parameters for {selectedClients.length} selected client{selectedClients.length !== 1 ? 's' : ''}
            </p>
          </div>
        </div>

        {currentOperation.type === 'status_update' && (
          <div className="space-y-4">
            <label className="block text-sm font-medium text-gray-700">
              New Status
            </label>
            <div className="grid grid-cols-2 gap-3">
              {STATUS_OPTIONS.map((status) => (
                <button
                  key={status.value}
                  onClick={() => setParameters({ ...parameters, new_status: status.value })}
                  className={`flex items-center gap-3 p-3 rounded-lg border-2 transition-all duration-200 ${
                    parameters.new_status === status.value
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                  data-testid={`new-status-${status.value}`}
                >
                  <div className={`w-3 h-3 rounded-full ${
                    status.color === 'amber' ? 'bg-amber-400' :
                    status.color === 'green' ? 'bg-green-400' :
                    status.color === 'blue' ? 'bg-blue-400' :
                    'bg-gray-400'
                  }`} />
                  <span className="font-medium">{status.label}</span>
                </button>
              ))}
            </div>
          </div>
        )}

        {currentOperation.type === 'tag_add' && (
          <div className="space-y-4">
            <label className="block text-sm font-medium text-gray-700">
              Tags to Add
            </label>
            <Input
              placeholder="Enter tags separated by commas"
              value={parameters.tags?.join(', ') || ''}
              onChange={(e) => {
                const tags = e.target.value.split(',').map(t => t.trim()).filter(Boolean)
                setParameters({ ...parameters, tags })
              }}
              className="w-full"
            />
            <div className="flex flex-wrap gap-2">
              {parameters.tags?.map((tag: string, index: number) => (
                <Badge key={index} className="bg-blue-100 text-blue-800">
                  {tag}
                </Badge>
              ))}
            </div>
          </div>
        )}

        {currentOperation.type === 'export' && (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Export Format
              </label>
              <div className="flex gap-3">
                {['csv', 'excel'].map((format) => (
                  <button
                    key={format}
                    onClick={() => setParameters({ ...parameters, format })}
                    className={`px-4 py-2 rounded-lg border-2 transition-all duration-200 ${
                      parameters.format === format
                        ? 'border-blue-500 bg-blue-50 text-blue-700'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    {format.toUpperCase()}
                  </button>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Include Fields
              </label>
              <div className="space-y-2">
                {EXPORT_FIELDS.map((field) => (
                  <label key={field.key} className="flex items-start gap-3 p-2 rounded hover:bg-gray-50">
                    <input
                      type="checkbox"
                      checked={parameters.include_fields?.includes(field.key) || false}
                      onChange={(e) => {
                        const current = parameters.include_fields || []
                        const updated = e.target.checked
                          ? [...current, field.key]
                          : current.filter((f: string) => f !== field.key)
                        setParameters({ ...parameters, include_fields: updated })
                      }}
                      className="mt-0.5 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <div>
                      <div className="font-medium text-gray-900">{field.label}</div>
                      <div className="text-sm text-gray-500">{field.description}</div>
                    </div>
                  </label>
                ))}
              </div>
            </div>
          </div>
        )}

        {currentOperation.type === 'delete' && (
          <div className="space-y-4">
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <AlertTriangle className="w-5 h-5 text-red-500 mt-0.5" />
                <div>
                  <h4 className="font-medium text-red-900 mb-2">
                    Permanent Deletion Warning
                  </h4>
                  <p className="text-sm text-red-700 mb-4">
                    This action will permanently delete {selectedClients.length} client{selectedClients.length !== 1 ? 's' : ''} and all associated data. This cannot be undone.
                  </p>
                  <div className="space-y-2">
                    <p className="text-sm font-medium text-red-800">Clients to be deleted:</p>
                    <div className="max-h-32 overflow-y-auto space-y-1">
                      {selectedClients.slice(0, 10).map((client) => (
                        <div key={client.id} className="text-sm text-red-700">
                          • {client.first_name} {client.last_name} {client.partner_first_name && `& ${client.partner_first_name} ${client.partner_last_name}`}
                        </div>
                      ))}
                      {selectedClients.length > 10 && (
                        <div className="text-sm text-red-600 font-medium">
                          ... and {selectedClients.length - 10} more
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Type "DELETE" to confirm
              </label>
              <Input
                value={confirmationText}
                onChange={(e) => setConfirmationText(e.target.value)}
                placeholder="Type DELETE to confirm"
                className="w-full"
                data-testid="confirm-delete-input"
              />
            </div>
          </div>
        )}
      </div>
    )
  }

  const renderConfirmation = () => {
    if (!currentOperation) return null

    return (
      <div className="space-y-6">
        <div className="flex items-center gap-3 mb-6">
          <CheckCircle className="w-5 h-5 text-green-600" />
          <div>
            <h3 className="text-lg font-semibold text-gray-900">
              Confirm Operation
            </h3>
            <p className="text-sm text-gray-500">
              Review and confirm the bulk operation
            </p>
          </div>
        </div>

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-start gap-3">
            <currentOperation.icon className="w-5 h-5 text-blue-600 mt-0.5" />
            <div>
              <h4 className="font-medium text-blue-900 mb-2">
                {currentOperation.label}
              </h4>
              <div className="space-y-2 text-sm text-blue-800">
                <p>• {selectedClients.length} client{selectedClients.length !== 1 ? 's' : ''} will be affected</p>
                
                {currentOperation.type === 'status_update' && parameters.new_status && (
                  <p>• Status will be changed to "{parameters.new_status}"</p>
                )}
                
                {currentOperation.type === 'tag_add' && parameters.tags && (
                  <p>• Tags to add: {parameters.tags.join(', ')}</p>
                )}
                
                {currentOperation.type === 'export' && (
                  <p>• Export format: {parameters.format?.toUpperCase()}</p>
                )}
                
                {currentOperation.destructive && (
                  <p className="text-red-600 font-medium">• This action cannot be undone</p>
                )}
              </div>
            </div>
          </div>
        </div>

        <div className="bg-gray-50 rounded-lg p-4">
          <h4 className="font-medium text-gray-900 mb-3">Affected Clients:</h4>
          <div className="max-h-40 overflow-y-auto space-y-2">
            {selectedClients.map((client) => (
              <div key={client.id} className="flex items-center justify-between text-sm">
                <span className="text-gray-900">
                  {client.first_name} {client.last_name}
                  {client.partner_first_name && ` & ${client.partner_first_name} ${client.partner_last_name}`}
                </span>
                <Badge className={`text-xs ${
                  client.status === 'lead' ? 'bg-amber-100 text-amber-800' :
                  client.status === 'booked' ? 'bg-green-100 text-green-800' :
                  client.status === 'completed' ? 'bg-blue-100 text-blue-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {client.status}
                </Badge>
              </div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="fixed inset-0 z-50 bg-gray-900/50 backdrop-blur-sm flex items-center justify-center">
      <div className="bg-white rounded-2xl max-w-2xl w-full mx-4 shadow-xl overflow-hidden max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center gap-3">
            {currentStep === 'configure' && currentOperation && (
              <Button
                variant="ghost"
                size="sm"
                onClick={handleBack}
                className="p-2"
              >
                ←
              </Button>
            )}
            {currentStep === 'confirm' && (
              <Button
                variant="ghost"
                size="sm"
                onClick={handleBack}
                className="p-2"
              >
                ←
              </Button>
            )}
            <div className="flex items-center gap-2">
              <div className={`w-2 h-2 rounded-full ${currentStep === 'select' ? 'bg-blue-600' : 'bg-gray-300'}`} />
              <div className={`w-2 h-2 rounded-full ${currentStep === 'configure' ? 'bg-blue-600' : 'bg-gray-300'}`} />
              <div className={`w-2 h-2 rounded-full ${currentStep === 'confirm' ? 'bg-blue-600' : 'bg-gray-300'}`} />
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={onClose}
            className="p-2"
            disabled={isProcessing}
          >
            <X className="w-5 h-5" />
          </Button>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6">
          {currentStep === 'select' && renderOperationSelector()}
          {currentStep === 'configure' && renderOperationConfiguration()}
          {currentStep === 'confirm' && renderConfirmation()}
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50">
          <div className="text-sm text-gray-500">
            Step {currentStep === 'select' ? 1 : currentStep === 'configure' ? 2 : 3} of 3
          </div>
          
          <div className="flex items-center gap-3">
            {currentStep === 'configure' && (
              <Button
                onClick={handleNext}
                disabled={!isValidConfiguration()}
                className="bg-blue-600 hover:bg-blue-700"
              >
                Review & Confirm
              </Button>
            )}
            
            {currentStep === 'confirm' && (
              <Button
                onClick={handleExecute}
                disabled={isProcessing}
                className={`${
                  currentOperation?.destructive
                    ? 'bg-red-600 hover:bg-red-700'
                    : 'bg-blue-600 hover:bg-blue-700'
                } text-white`}
                data-testid="confirm-bulk-operation"
              >
                {isProcessing ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                    Processing...
                  </>
                ) : (
                  `Execute ${currentOperation?.label}`
                )}
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}