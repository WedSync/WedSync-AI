'use client'

import { useState, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Mail,
  FileText,
  Tag,
  Edit,
  Trash2,
  Download,
  X,
  ChevronDown,
  Send,
  Clock,
  Users
} from 'lucide-react'
import { ClientData } from '../ClientListViews'

interface MobileBulkActionsProps {
  isOpen: boolean
  onClose: () => void
  selectedClients: ClientData[]
  onExecute: (action: string, parameters: any) => Promise<void>
}

interface ActionConfig {
  id: string
  label: string
  icon: React.ComponentType<{ className?: string }>
  color: string
  description: string
  requiresConfiguration?: boolean
}

const ACTIONS: ActionConfig[] = [
  {
    id: 'email',
    label: 'Send Email',
    icon: Mail,
    color: 'bg-blue-500',
    description: 'Send custom email to selected clients',
    requiresConfiguration: true
  },
  {
    id: 'form',
    label: 'Send Form',
    icon: FileText,
    color: 'bg-green-500',
    description: 'Send form or questionnaire',
    requiresConfiguration: true
  },
  {
    id: 'status',
    label: 'Update Status',
    icon: Edit,
    color: 'bg-purple-500',
    description: 'Change client status',
    requiresConfiguration: true
  },
  {
    id: 'tag',
    label: 'Add Tags',
    icon: Tag,
    color: 'bg-orange-500',
    description: 'Add tags to clients',
    requiresConfiguration: true
  },
  {
    id: 'export',
    label: 'Export CSV',
    icon: Download,
    color: 'bg-gray-600',
    description: 'Download client data',
    requiresConfiguration: false
  }
]

const EMAIL_TEMPLATES = [
  { id: 'timeline_request', label: 'Timeline Request', description: 'Request wedding day timeline details' },
  { id: 'payment_reminder', label: 'Payment Reminder', description: 'Remind about outstanding payments' },
  { id: 'final_details', label: 'Final Details', description: 'Pre-wedding final details check' },
  { id: 'custom', label: 'Custom Email', description: 'Write a custom message' }
]

const FORM_TEMPLATES = [
  { id: 'timeline_form', label: 'Timeline Form', description: 'Wedding day timeline questionnaire' },
  { id: 'details_form', label: 'Details Form', description: 'Wedding details collection form' },
  { id: 'preferences_form', label: 'Preferences Form', description: 'Photography preferences form' }
]

const STATUS_OPTIONS = [
  { value: 'lead', label: 'Lead', color: 'bg-amber-100 text-amber-800' },
  { value: 'booked', label: 'Booked', color: 'bg-green-100 text-green-800' },
  { value: 'completed', label: 'Completed', color: 'bg-blue-100 text-blue-800' },
  { value: 'archived', label: 'Archived', color: 'bg-gray-100 text-gray-800' }
]

export function MobileBulkActions({
  isOpen,
  onClose,
  selectedClients,
  onExecute
}: MobileBulkActionsProps) {
  const [currentStep, setCurrentStep] = useState<'select' | 'configure'>('select')
  const [selectedAction, setSelectedAction] = useState<ActionConfig | null>(null)
  const [configuration, setConfiguration] = useState<any>({})

  const handleActionSelect = useCallback((action: ActionConfig) => {
    setSelectedAction(action)
    setConfiguration({})
    
    if (action.requiresConfiguration) {
      setCurrentStep('configure')
    } else {
      // Execute immediately for actions that don't need configuration
      onExecute(action.id, {})
      onClose()
    }
  }, [onExecute, onClose])

  const handleExecute = useCallback(async () => {
    if (!selectedAction) return
    
    await onExecute(selectedAction.id, configuration)
    onClose()
  }, [selectedAction, configuration, onExecute, onClose])

  const renderActionSelector = () => (
    <div className="space-y-4">
      {/* Header */}
      <div className="text-center py-4 border-b border-gray-200">
        <div className="flex items-center justify-center gap-2 text-blue-600 mb-2">
          <Users className="w-5 h-5" />
          <span className="font-semibold">{selectedClients.length} Selected</span>
        </div>
        <p className="text-sm text-gray-600">Choose an action to perform</p>
      </div>

      {/* Actions Grid */}
      <div className="px-4 pb-4 space-y-3">
        {ACTIONS.map((action) => {
          const Icon = action.icon
          return (
            <button
              key={action.id}
              onClick={() => handleActionSelect(action)}
              className="w-full flex items-center gap-4 p-4 rounded-xl border border-gray-200 hover:border-gray-300 active:bg-gray-50 transition-all"
              data-testid={`mobile-bulk-${action.id}`}
            >
              <div className={`w-12 h-12 ${action.color} rounded-xl flex items-center justify-center`}>
                <Icon className="w-6 h-6 text-white" />
              </div>
              <div className="flex-1 text-left">
                <h3 className="font-semibold text-gray-900">{action.label}</h3>
                <p className="text-sm text-gray-600">{action.description}</p>
              </div>
              <ChevronDown className="w-5 h-5 text-gray-400 -rotate-90" />
            </button>
          )
        })}
      </div>
    </div>
  )

  const renderConfiguration = () => {
    if (!selectedAction) return null

    const Icon = selectedAction.icon

    return (
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center gap-3 px-4 py-4 border-b border-gray-200">
          <button
            onClick={() => {
              setCurrentStep('select')
              setSelectedAction(null)
            }}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <ChevronDown className="w-5 h-5 text-gray-600 rotate-90" />
          </button>
          <div className={`w-10 h-10 ${selectedAction.color} rounded-lg flex items-center justify-center`}>
            <Icon className="w-5 h-5 text-white" />
          </div>
          <div>
            <h3 className="font-semibold text-gray-900">{selectedAction.label}</h3>
            <p className="text-sm text-gray-600">{selectedClients.length} clients</p>
          </div>
        </div>

        {/* Configuration Form */}
        <div className="px-4 space-y-6">
          {selectedAction.id === 'email' && (
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Email Template
                </label>
                <div className="space-y-2">
                  {EMAIL_TEMPLATES.map((template) => (
                    <button
                      key={template.id}
                      onClick={() => setConfiguration({ ...configuration, template: template.id })}
                      className={`w-full text-left p-3 rounded-lg border transition-all ${
                        configuration.template === template.id
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="font-medium text-gray-900">{template.label}</div>
                      <div className="text-sm text-gray-600">{template.description}</div>
                    </button>
                  ))}
                </div>
              </div>
              
              {configuration.template === 'custom' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Custom Message
                  </label>
                  <textarea
                    value={configuration.message || ''}
                    onChange={(e) => setConfiguration({ ...configuration, message: e.target.value })}
                    placeholder="Enter your custom message..."
                    className="w-full h-32 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  />
                </div>
              )}
            </div>
          )}

          {selectedAction.id === 'form' && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Form Template
              </label>
              <div className="space-y-2">
                {FORM_TEMPLATES.map((form) => (
                  <button
                    key={form.id}
                    onClick={() => setConfiguration({ ...configuration, form: form.id })}
                    className={`w-full text-left p-3 rounded-lg border transition-all ${
                      configuration.form === form.id
                        ? 'border-green-500 bg-green-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="font-medium text-gray-900">{form.label}</div>
                    <div className="text-sm text-gray-600">{form.description}</div>
                  </button>
                ))}
              </div>
            </div>
          )}

          {selectedAction.id === 'status' && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                New Status
              </label>
              <div className="grid grid-cols-2 gap-3">
                {STATUS_OPTIONS.map((status) => (
                  <button
                    key={status.value}
                    onClick={() => setConfiguration({ ...configuration, new_status: status.value })}
                    className={`flex items-center justify-center gap-2 p-3 rounded-lg border transition-all ${
                      configuration.new_status === status.value
                        ? 'border-purple-500 bg-purple-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className={`w-3 h-3 rounded-full ${status.color.split(' ')[0]}`} />
                    <span className="font-medium text-gray-900">{status.label}</span>
                  </button>
                ))}
              </div>
            </div>
          )}

          {selectedAction.id === 'tag' && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tags to Add
              </label>
              <input
                type="text"
                value={configuration.tags_text || ''}
                onChange={(e) => {
                  const tags = e.target.value.split(',').map(t => t.trim()).filter(Boolean)
                  setConfiguration({ ...configuration, tags_text: e.target.value, tags })
                }}
                placeholder="Enter tags separated by commas"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
              {configuration.tags?.length > 0 && (
                <div className="flex flex-wrap gap-2 mt-3">
                  {configuration.tags.map((tag: string, index: number) => (
                    <span
                      key={index}
                      className="px-2 py-1 bg-orange-100 text-orange-800 text-sm rounded-md"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>

        {/* Execute Button */}
        <div className="px-4 pb-4">
          <button
            onClick={handleExecute}
            disabled={!isConfigurationValid()}
            className={`w-full flex items-center justify-center gap-2 py-4 rounded-xl font-semibold text-white transition-all ${
              isConfigurationValid()
                ? `${selectedAction.color} hover:opacity-90 active:scale-95`
                : 'bg-gray-300 cursor-not-allowed'
            }`}
          >
            <Send className="w-5 h-5" />
            Execute {selectedAction.label}
          </button>
        </div>
      </div>
    )
  }

  const isConfigurationValid = () => {
    if (!selectedAction) return false

    switch (selectedAction.id) {
      case 'email':
        return configuration.template && (
          configuration.template !== 'custom' || configuration.message?.trim()
        )
      case 'form':
        return configuration.form
      case 'status':
        return configuration.new_status
      case 'tag':
        return configuration.tags?.length > 0
      default:
        return true
    }
  }

  if (!isOpen) return null

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-50 md:hidden">
        {/* Backdrop */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="absolute inset-0 bg-gray-900/50"
          onClick={onClose}
        />

        {/* Bottom Sheet */}
        <motion.div
          initial={{ y: '100%' }}
          animate={{ y: 0 }}
          exit={{ y: '100%' }}
          transition={{ type: 'spring', stiffness: 300, damping: 30 }}
          className="absolute bottom-0 left-0 right-0 bg-white rounded-t-2xl shadow-2xl max-h-[80vh] overflow-hidden"
          style={{ paddingBottom: 'env(safe-area-inset-bottom)' }}
        >
          {/* Pull handle */}
          <div className="flex justify-center pt-3 pb-1">
            <div className="w-10 h-1 bg-gray-300 rounded-full" />
          </div>

          {/* Close button */}
          <button
            onClick={onClose}
            className="absolute top-4 right-4 p-2 hover:bg-gray-100 rounded-lg transition-colors z-10"
          >
            <X className="w-5 h-5 text-gray-600" />
          </button>

          {/* Content */}
          <div className="overflow-y-auto">
            {currentStep === 'select' ? renderActionSelector() : renderConfiguration()}
          </div>
        </motion.div>
      </div>
    </AnimatePresence>
  )
}