'use client';

import React, { useState, useCallback, useRef } from 'react';
import { Brand, BrandTheme, BrandUploadResponse, CreateBrandRequest, BRAND_FONT_FAMILIES, HEX_COLOR_REGEX } from '@/types/branding';

interface BrandingCustomizerProps {
  brand?: Brand;
  onSave: (brandData: CreateBrandRequest) => Promise<void>;
  onUploadAsset: (file: File, type: 'logo' | 'banner') => Promise<BrandUploadResponse>;
  isLoading?: boolean;
}

export default function BrandingCustomizer({
  brand,
  onSave,
  onUploadAsset,
  isLoading = false
}: BrandingCustomizerProps) {
  const [formData, setFormData] = useState<CreateBrandRequest>({
    name: brand?.name || '',
    primaryColor: brand?.primaryColor || '#3B82F6',
    secondaryColor: brand?.secondaryColor || '#64748B',
    accentColor: brand?.accentColor || '#F59E0B',
    fontFamily: brand?.fontFamily || 'Inter',
    customCss: brand?.customCss || '',
    brandGuidelines: brand?.brandGuidelines || ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [previewTheme, setPreviewTheme] = useState<BrandTheme | null>(null);
  const [uploadingAsset, setUploadingAsset] = useState(false);
  const logoInputRef = useRef<HTMLInputElement>(null);

  // Generate theme preview from colors
  const generateTheme = useCallback((colors: {
    primaryColor: string;
    secondaryColor: string;
    accentColor: string;
  }): BrandTheme => {
    return {
      primary: colors.primaryColor,
      secondary: colors.secondaryColor,
      accent: colors.accentColor,
      background: '#FFFFFF',
      text: '#1F2937',
      border: '#E5E7EB',
      muted: '#6B7280'
    };
  }, []);

  // Validate form data
  const validateForm = useCallback(() => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Brand name is required';
    }

    if (!HEX_COLOR_REGEX.test(formData.primaryColor)) {
      newErrors.primaryColor = 'Invalid hex color format';
    }

    if (!HEX_COLOR_REGEX.test(formData.secondaryColor)) {
      newErrors.secondaryColor = 'Invalid hex color format';
    }

    if (!HEX_COLOR_REGEX.test(formData.accentColor)) {
      newErrors.accentColor = 'Invalid hex color format';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [formData]);

  // Handle form field changes
  const handleFieldChange = useCallback((field: keyof CreateBrandRequest, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // Clear specific field error
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }

    // Update preview for color changes
    if (['primaryColor', 'secondaryColor', 'accentColor'].includes(field)) {
      const updatedData = { ...formData, [field]: value };
      setPreviewTheme(generateTheme(updatedData));
    }
  }, [formData, errors, generateTheme]);

  // Handle form submission
  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      await onSave(formData);
    } catch (error) {
      console.error('Error saving brand:', error);
      setErrors({ submit: 'Failed to save brand. Please try again.' });
    }
  }, [formData, validateForm, onSave]);

  // Handle file upload
  const handleFileUpload = useCallback(async (e: React.ChangeEvent<HTMLInputElement>, type: 'logo' | 'banner') => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Validate file
    const maxSize = 5 * 1024 * 1024; // 5MB
    const allowedTypes = ['image/jpeg', 'image/png', 'image/svg+xml', 'image/webp'];

    if (file.size > maxSize) {
      setErrors(prev => ({ ...prev, [type]: 'File size must be less than 5MB' }));
      return;
    }

    if (!allowedTypes.includes(file.type)) {
      setErrors(prev => ({ ...prev, [type]: 'Only JPEG, PNG, SVG, and WebP files are allowed' }));
      return;
    }

    setUploadingAsset(true);
    try {
      const result = await onUploadAsset(file, type);
      if (result.success) {
        setErrors(prev => ({ ...prev, [type]: '' }));
      } else {
        setErrors(prev => ({ ...prev, [type]: result.error || 'Upload failed' }));
      }
    } catch (error) {
      setErrors(prev => ({ ...prev, [type]: 'Upload failed. Please try again.' }));
    } finally {
      setUploadingAsset(false);
    }
  }, [onUploadAsset]);

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        
        {/* Form Section */}
        <div className="space-y-6">
          <div>
            <h2 className="text-2xl font-bold text-gray-900 mb-2">Brand Customization</h2>
            <p className="text-gray-600">Customize your brand appearance across WedSync</p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            
            {/* Brand Name */}
            <div>
              <label htmlFor="brand-name" className="block text-sm font-medium text-gray-700 mb-2">
                Brand Name *
              </label>
              <input
                id="brand-name"
                type="text"
                value={formData.name}
                onChange={(e) => handleFieldChange('name', e.target.value)}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.name ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="Enter your brand name"
                disabled={isLoading}
              />
              {errors.name && <p className="mt-1 text-sm text-red-600">{errors.name}</p>}
            </div>

            {/* Logo Upload */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Brand Logo
              </label>
              <div className="flex items-center space-x-4">
                <button
                  type="button"
                  onClick={() => logoInputRef.current?.click()}
                  disabled={uploadingAsset || isLoading}
                  className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
                >
                  {uploadingAsset ? 'Uploading...' : 'Upload Logo'}
                </button>
                <span className="text-xs text-gray-500">Max 5MB, JPEG/PNG/SVG/WebP</span>
              </div>
              <input
                ref={logoInputRef}
                type="file"
                accept="image/*"
                onChange={(e) => handleFileUpload(e, 'logo')}
                className="hidden"
              />
              {errors.logo && <p className="mt-1 text-sm text-red-600">{errors.logo}</p>}
            </div>

            {/* Color Inputs */}
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
              <div>
                <label htmlFor="primary-color" className="block text-sm font-medium text-gray-700 mb-2">
                  Primary Color *
                </label>
                <div className="flex items-center space-x-2">
                  <input
                    id="primary-color"
                    type="color"
                    value={formData.primaryColor}
                    onChange={(e) => handleFieldChange('primaryColor', e.target.value)}
                    className="w-12 h-10 border border-gray-300 rounded cursor-pointer disabled:opacity-50"
                    disabled={isLoading}
                  />
                  <input
                    type="text"
                    value={formData.primaryColor}
                    onChange={(e) => handleFieldChange('primaryColor', e.target.value)}
                    className={`flex-1 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.primaryColor ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="#3B82F6"
                    disabled={isLoading}
                  />
                </div>
                {errors.primaryColor && <p className="mt-1 text-sm text-red-600">{errors.primaryColor}</p>}
              </div>

              <div>
                <label htmlFor="secondary-color" className="block text-sm font-medium text-gray-700 mb-2">
                  Secondary Color *
                </label>
                <div className="flex items-center space-x-2">
                  <input
                    id="secondary-color"
                    type="color"
                    value={formData.secondaryColor}
                    onChange={(e) => handleFieldChange('secondaryColor', e.target.value)}
                    className="w-12 h-10 border border-gray-300 rounded cursor-pointer disabled:opacity-50"
                    disabled={isLoading}
                  />
                  <input
                    type="text"
                    value={formData.secondaryColor}
                    onChange={(e) => handleFieldChange('secondaryColor', e.target.value)}
                    className={`flex-1 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.secondaryColor ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="#64748B"
                    disabled={isLoading}
                  />
                </div>
                {errors.secondaryColor && <p className="mt-1 text-sm text-red-600">{errors.secondaryColor}</p>}
              </div>

              <div>
                <label htmlFor="accent-color" className="block text-sm font-medium text-gray-700 mb-2">
                  Accent Color *
                </label>
                <div className="flex items-center space-x-2">
                  <input
                    id="accent-color"
                    type="color"
                    value={formData.accentColor}
                    onChange={(e) => handleFieldChange('accentColor', e.target.value)}
                    className="w-12 h-10 border border-gray-300 rounded cursor-pointer disabled:opacity-50"
                    disabled={isLoading}
                  />
                  <input
                    type="text"
                    value={formData.accentColor}
                    onChange={(e) => handleFieldChange('accentColor', e.target.value)}
                    className={`flex-1 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.accentColor ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="#F59E0B"
                    disabled={isLoading}
                  />
                </div>
                {errors.accentColor && <p className="mt-1 text-sm text-red-600">{errors.accentColor}</p>}
              </div>
            </div>

            {/* Font Family */}
            <div>
              <label htmlFor="font-family" className="block text-sm font-medium text-gray-700 mb-2">
                Font Family
              </label>
              <select
                id="font-family"
                value={formData.fontFamily}
                onChange={(e) => handleFieldChange('fontFamily', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={isLoading}
              >
                {BRAND_FONT_FAMILIES.map((font) => (
                  <option key={font} value={font} style={{ fontFamily: font }}>
                    {font}
                  </option>
                ))}
              </select>
            </div>

            {/* Custom CSS */}
            <div>
              <label htmlFor="custom-css" className="block text-sm font-medium text-gray-700 mb-2">
                Custom CSS (Advanced)
              </label>
              <textarea
                id="custom-css"
                value={formData.customCss}
                onChange={(e) => handleFieldChange('customCss', e.target.value)}
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Add custom CSS rules..."
                disabled={isLoading}
              />
            </div>

            {/* Brand Guidelines */}
            <div>
              <label htmlFor="brand-guidelines" className="block text-sm font-medium text-gray-700 mb-2">
                Brand Guidelines
              </label>
              <textarea
                id="brand-guidelines"
                value={formData.brandGuidelines}
                onChange={(e) => handleFieldChange('brandGuidelines', e.target.value)}
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Describe your brand guidelines and style notes..."
                disabled={isLoading}
              />
            </div>

            {/* Submit Button */}
            <div className="flex items-center justify-end space-x-4">
              {errors.submit && <p className="text-sm text-red-600">{errors.submit}</p>}
              <button
                type="submit"
                disabled={isLoading || uploadingAsset}
                className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Saving...' : brand ? 'Update Brand' : 'Create Brand'}
              </button>
            </div>
          </form>
        </div>

        {/* Preview Section */}
        <div className="space-y-6">
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Live Preview</h3>
            
            {/* Mock UI Preview */}
            <div 
              className="border rounded-lg overflow-hidden"
              style={{
                '--brand-primary': formData.primaryColor,
                '--brand-secondary': formData.secondaryColor,
                '--brand-accent': formData.accentColor,
                fontFamily: formData.fontFamily
              } as React.CSSProperties}
            >
              {/* Header Preview */}
              <div 
                className="px-6 py-4 text-white"
                style={{ backgroundColor: formData.primaryColor }}
              >
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                    <span className="text-xs font-bold">L</span>
                  </div>
                  <span className="font-semibold">{formData.name || 'Your Brand'}</span>
                </div>
              </div>

              {/* Content Preview */}
              <div className="p-6 bg-white">
                <h4 className="text-lg font-semibold mb-2" style={{ color: formData.primaryColor }}>
                  Welcome to Your Wedding Dashboard
                </h4>
                <p className="text-gray-600 mb-4">
                  Manage your wedding planning with style using your custom brand.
                </p>
                
                {/* Button Preview */}
                <div className="flex space-x-3">
                  <button
                    className="px-4 py-2 rounded-md text-white font-medium"
                    style={{ backgroundColor: formData.primaryColor }}
                  >
                    Primary Button
                  </button>
                  <button
                    className="px-4 py-2 rounded-md font-medium border"
                    style={{ 
                      color: formData.accentColor,
                      borderColor: formData.accentColor
                    }}
                  >
                    Secondary Button
                  </button>
                </div>

                {/* Card Preview */}
                <div className="mt-6 p-4 rounded-lg border border-gray-200">
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium">Wedding Tasks</span>
                    <span 
                      className="px-2 py-1 rounded-full text-xs font-medium text-white"
                      style={{ backgroundColor: formData.accentColor }}
                    >
                      3 Active
                    </span>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center space-x-2">
                      <div 
                        className="w-3 h-3 rounded-full"
                        style={{ backgroundColor: formData.secondaryColor }}
                      ></div>
                      <span className="text-sm text-gray-700">Book photographer</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div 
                        className="w-3 h-3 rounded-full"
                        style={{ backgroundColor: formData.accentColor }}
                      ></div>
                      <span className="text-sm text-gray-700">Choose flowers</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Theme Colors Display */}
          <div>
            <h4 className="text-sm font-medium text-gray-700 mb-3">Color Palette</h4>
            <div className="grid grid-cols-3 gap-3">
              <div className="text-center">
                <div 
                  className="w-full h-16 rounded-lg border"
                  style={{ backgroundColor: formData.primaryColor }}
                ></div>
                <span className="text-xs text-gray-600 mt-1 block">Primary</span>
              </div>
              <div className="text-center">
                <div 
                  className="w-full h-16 rounded-lg border"
                  style={{ backgroundColor: formData.secondaryColor }}
                ></div>
                <span className="text-xs text-gray-600 mt-1 block">Secondary</span>
              </div>
              <div className="text-center">
                <div 
                  className="w-full h-16 rounded-lg border"
                  style={{ backgroundColor: formData.accentColor }}
                ></div>
                <span className="text-xs text-gray-600 mt-1 block">Accent</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}