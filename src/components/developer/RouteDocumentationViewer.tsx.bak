'use client';

import React, { useState, useMemo } from 'react';
import { 
  DocumentTextIcon, 
  CodeBracketIcon,
  HeartIcon,
  ExclamationCircleIcon,
  CheckCircleIcon,
  CopyIcon,
  EyeIcon,
  ShieldCheckIcon
} from '@heroicons/react/24/outline';

/**
 * API Route Information Interface
 */
interface APIRoute {
  id: string;
  name: string;
  method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
  path: string;
  description: string;
  weddingContext: string;
  category: string;
  requiresAuth: boolean;
  userTypes: string[];
  parameters: APIParameter[];
  responses: APIResponse[];
  examples: WeddingExample[];
  security: SecurityInfo;
  rateLimit: RateLimit;
  realTime: boolean;
}

interface APIParameter {
  name: string;
  type: string;
  required: boolean;
  description: string;
  weddingExample: string;
  validation?: ValidationRule[];
}

interface APIResponse {
  status: number;
  description: string;
  schema: Record<string, any>;
  example: any;
  headers?: Record<string, string>;
}

interface WeddingExample {
  title: string;
  scenario: string;
  userType: string;
  code: CodeExample[];
  explanation: string;
}

interface CodeExample {
  language: string;
  code: string;
  description: string;
}

interface SecurityInfo {
  authentication: string[];
  permissions: string[];
  rateLimiting: string;
  dataAccess: string;
}

interface RateLimit {
  requests: number;
  window: string;
  burst?: number;
}

interface ValidationRule {
  type: string;
  value: any;
  message: string;
}

/**
 * Route Documentation Viewer Component
 * Comprehensive API documentation with wedding industry examples
 */
export default function RouteDocumentationViewer({ route }: { route: APIRoute }) {
  const [selectedTab, setSelectedTab] = useState<'overview' | 'parameters' | 'responses' | 'examples' | 'security'>('overview');
  const [selectedLanguage, setSelectedLanguage] = useState<string>('typescript');
  const [copiedCode, setCopiedCode] = useState<string>('');

  /**
   * Available programming languages for examples
   */
  const supportedLanguages = [
    { id: 'typescript', name: 'TypeScript', icon: '🔷' },
    { id: 'javascript', name: 'JavaScript', icon: '🟡' },
    { id: 'python', name: 'Python', icon: '🐍' },
    { id: 'curl', name: 'cURL', icon: '🌐' },
    { id: 'php', name: 'PHP', icon: '🐘' }
  ];

  /**
   * Generate code examples for different languages
   */
  const generateCodeExample = useMemo(() => {
    const baseUrl = 'https://api.wedsync.com';
    const endpoint = route.path;
    
    const examples: Record<string, string> = {
      typescript: `// WedSync API - ${route.name}
import { WedSyncClient } from '@wedsync/api-client';

const client = new WedSyncClient({
  apiKey: process.env.WEDSYNC_API_KEY,
  environment: 'production'
});

// ${route.weddingContext}
async function ${route.name.toLowerCase().replace(/\s+/g, '')}() {
  try {
    const response = await client.${route.method.toLowerCase()}('${endpoint}', {
      ${route.parameters.filter(p => p.required).map(p => 
        `${p.name}: '${p.weddingExample}' // ${p.description}`
      ).join(',\n      ')}
    });
    
    console.log('Success:', response.data);
    return response.data;
  } catch (error) {
    console.error('Wedding API Error:', error);
    throw error;
  }
}`,

      javascript: `// WedSync API - ${route.name}
const fetch = require('node-fetch');

// ${route.weddingContext}
async function ${route.name.toLowerCase().replace(/\s+/g, '')}() {
  const response = await fetch('${baseUrl}${endpoint}', {
    method: '${route.method}',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': \`Bearer \${process.env.WEDSYNC_API_KEY}\`,
      'User-Agent': 'WedSync-Wedding-App/1.0'
    },
    ${route.method !== 'GET' ? `body: JSON.stringify({
      ${route.parameters.filter(p => p.required).map(p => 
        `${p.name}: '${p.weddingExample}' // ${p.description}`
      ).join(',\n      ')}
    })` : ''}
  });
  
  if (!response.ok) {
    throw new Error(\`Wedding API Error: \${response.statusText}\`);
  }
  
  return await response.json();
}`,

      python: `# WedSync API - ${route.name}
import requests
import os
from typing import Dict, Any

# ${route.weddingContext}
def ${route.name.toLowerCase().replace(/\s+/g, '_')}() -> Dict[str, Any]:
    url = "${baseUrl}${endpoint}"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {os.environ['WEDSYNC_API_KEY']}",
        "User-Agent": "WedSync-Wedding-App/1.0"
    }
    
    ${route.method !== 'GET' ? `data = {
        ${route.parameters.filter(p => p.required).map(p => 
          `"${p.name}": "${p.weddingExample}",  # ${p.description}`
        ).join('\n        ')}
    }
    
    response = requests.${route.method.toLowerCase()}(url, headers=headers, json=data)` : 
    `response = requests.${route.method.toLowerCase()}(url, headers=headers)`}
    
    if response.status_code != 200:
        raise Exception(f"Wedding API Error: {response.status_code} - {response.text}")
    
    return response.json()`,

      curl: `# WedSync API - ${route.name}
# ${route.weddingContext}

curl -X ${route.method} "${baseUrl}${endpoint}" \\
  -H "Content-Type: application/json" \\
  -H "Authorization: Bearer \$WEDSYNC_API_KEY" \\
  -H "User-Agent: WedSync-Wedding-App/1.0" \\${route.method !== 'GET' ? `
  -d '{
    ${route.parameters.filter(p => p.required).map(p => 
      `"${p.name}": "${p.weddingExample}"`
    ).join(',\n    ')}
  }'` : ''}`,

      php: `<?php
// WedSync API - ${route.name}

// ${route.weddingContext}
function ${route.name.toLowerCase().replace(/\s+/g, '_')}() {
    $url = "${baseUrl}${endpoint}";
    $headers = [
        "Content-Type: application/json",
        "Authorization: Bearer " . $_ENV['WEDSYNC_API_KEY'],
        "User-Agent: WedSync-Wedding-App/1.0"
    ];
    
    ${route.method !== 'GET' ? `$data = [
        ${route.parameters.filter(p => p.required).map(p => 
          `"${p.name}" => "${p.weddingExample}", // ${p.description}`
        ).join('\n        ')}
    ];
    
    $options = [
        'http' => [
            'method' => '${route.method}',
            'header' => implode("\\r\\n", $headers),
            'content' => json_encode($data)
        ]
    ];` : `$options = [
        'http' => [
            'method' => '${route.method}',
            'header' => implode("\\r\\n", $headers)
        ]
    ];`}
    
    $context = stream_context_create($options);
    $result = file_get_contents($url, false, $context);
    
    if ($result === FALSE) {
        throw new Exception('Wedding API Error: Request failed');
    }
    
    return json_decode($result, true);
}
?>`
    };
    
    return examples;
  }, [route, selectedLanguage]);

  /**
   * Copy code to clipboard
   */
  const copyToClipboard = async (code: string, language: string) => {
    try {
      await navigator.clipboard.writeText(code);
      setCopiedCode(language);
      setTimeout(() => setCopiedCode(''), 2000);
    } catch (err) {
      console.error('Failed to copy code:', err);
    }
  };

  /**
   * Get method color
   */
  const getMethodColor = (method: string) => {
    const colors = {
      GET: 'bg-green-100 text-green-800',
      POST: 'bg-blue-100 text-blue-800',
      PUT: 'bg-yellow-100 text-yellow-800',
      PATCH: 'bg-purple-100 text-purple-800',
      DELETE: 'bg-red-100 text-red-800'
    };
    return colors[method as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  /**
   * Navigation tabs
   */
  const tabs = [
    { id: 'overview', name: 'Overview', icon: DocumentTextIcon },
    { id: 'parameters', name: 'Parameters', icon: CogIcon },
    { id: 'responses', name: 'Responses', icon: CheckCircleIcon },
    { id: 'examples', name: 'Examples', icon: CodeBracketIcon },
    { id: 'security', name: 'Security', icon: ShieldCheckIcon }
  ];

  return (
    <div className="max-w-6xl mx-auto bg-white">
      {/* Header */}
      <div className="border-b border-gray-200 pb-6 mb-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <span className={`px-3 py-1 text-sm font-medium rounded-full ${getMethodColor(route.method)}`}>
              {route.method}
            </span>
            <h1 className="text-2xl font-bold text-gray-900">{route.name}</h1>
            {route.realTime && (
              <div className="flex items-center space-x-1 bg-green-50 text-green-700 px-2 py-1 rounded-full text-sm">
                <div className="h-2 w-2 bg-green-500 rounded-full animate-pulse"></div>
                <span>Real-time</span>
              </div>
            )}
          </div>
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <ShieldCheckIcon className="h-4 w-4 text-green-600" />
              <span>WCAG 2.1 AA</span>
            </div>
            {route.requiresAuth && (
              <div className="flex items-center space-x-2 text-sm text-amber-600">
                <ExclamationCircleIcon className="h-4 w-4" />
                <span>Auth Required</span>
              </div>
            )}
          </div>
        </div>

        <div className="mb-4">
          <code className="text-lg font-mono bg-gray-100 px-4 py-2 rounded-lg text-gray-800">
            {route.path}
          </code>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
          <div>
            <span className="font-medium text-gray-700">Description:</span>
            <p className="text-gray-600 mt-1">{route.description}</p>
          </div>
          <div>
            <span className="font-medium text-gray-700">Wedding Context:</span>
            <p className="text-rose-600 mt-1 flex items-center space-x-1">
              <HeartIcon className="h-4 w-4 flex-shrink-0" />
              <span>{route.weddingContext}</span>
            </p>
          </div>
          <div>
            <span className="font-medium text-gray-700">User Types:</span>
            <div className="mt-1 flex space-x-2">
              {route.userTypes.map((type, index) => (
                <span key={index} className="bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs capitalize">
                  {type}
                </span>
              ))}
            </div>
          </div>
          <div>
            <span className="font-medium text-gray-700">Rate Limit:</span>
            <p className="text-gray-600 mt-1">
              {route.rateLimit.requests} requests per {route.rateLimit.window}
            </p>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="border-b border-gray-200 mb-6">
        <nav className="flex space-x-8">
          {tabs.map((tab) => {
            const IconComponent = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setSelectedTab(tab.id as any)}
                className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                  selectedTab === tab.id
                    ? 'border-rose-500 text-rose-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <IconComponent className="h-4 w-4" />
                <span>{tab.name}</span>
              </button>
            );
          })}
        </nav>
      </div>

      {/* Tab Content */}
      <div className="space-y-6">
        {/* Overview Tab */}
        {selectedTab === 'overview' && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-rose-50 border border-rose-200 rounded-lg p-4">
                <h3 className="font-semibold text-rose-900 mb-2 flex items-center space-x-2">
                  <HeartIcon className="h-5 w-5" />
                  <span>Wedding Industry Context</span>
                </h3>
                <p className="text-rose-800">{route.weddingContext}</p>
                <div className="mt-3 text-sm text-rose-700">
                  <strong>Category:</strong> {route.category}
                </div>
              </div>

              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h3 className="font-semibold text-blue-900 mb-2">Quick Start</h3>
                <p className="text-blue-800 text-sm mb-3">
                  Get started with this endpoint in just a few steps
                </p>
                <ol className="list-decimal list-inside text-sm text-blue-700 space-y-1">
                  <li>Set up authentication with your API key</li>
                  <li>Configure required parameters</li>
                  <li>Make your first request</li>
                  <li>Handle the response in your wedding app</li>
                </ol>
              </div>
            </div>

            {/* Quick Code Example */}
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center justify-between mb-3">
                <h3 className="font-semibold text-gray-900">Quick Example</h3>
                <div className="flex items-center space-x-2">
                  <select
                    value={selectedLanguage}
                    onChange={(e) => setSelectedLanguage(e.target.value)}
                    className="text-sm border border-gray-300 rounded px-2 py-1"
                  >
                    {supportedLanguages.map((lang) => (
                      <option key={lang.id} value={lang.id}>
                        {lang.icon} {lang.name}
                      </option>
                    ))}
                  </select>
                  <button
                    onClick={() => copyToClipboard(generateCodeExample[selectedLanguage], selectedLanguage)}
                    className="flex items-center space-x-1 text-sm text-gray-600 hover:text-gray-900"
                  >
                    <CopyIcon className="h-4 w-4" />
                    <span>{copiedCode === selectedLanguage ? 'Copied!' : 'Copy'}</span>
                  </button>
                </div>
              </div>
              <pre className="text-sm overflow-x-auto bg-white rounded border p-4">
                <code>{generateCodeExample[selectedLanguage]}</code>
              </pre>
            </div>
          </div>
        )}

        {/* Parameters Tab */}
        {selectedTab === 'parameters' && (
          <div className="space-y-4">
            <div className="flex items-center space-x-2 mb-4">
              <CogIcon className="h-5 w-5 text-gray-600" />
              <h3 className="text-lg font-semibold text-gray-900">Request Parameters</h3>
            </div>

            {route.parameters.length === 0 ? (
              <div className="text-center py-8 bg-gray-50 rounded-lg">
                <p className="text-gray-500">This endpoint doesn't require any parameters.</p>
              </div>
            ) : (
              <div className="space-y-4">
                {route.parameters.map((param, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center space-x-2">
                        <span className="font-medium text-gray-900">{param.name}</span>
                        {param.required && (
                          <span className="bg-red-100 text-red-800 text-xs px-2 py-1 rounded">Required</span>
                        )}
                        <span className="bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded font-mono">
                          {param.type}
                        </span>
                      </div>
                    </div>

                    <p className="text-gray-600 text-sm mb-3">{param.description}</p>

                    <div className="bg-rose-50 border border-rose-200 rounded p-3">
                      <div className="flex items-center space-x-2 mb-1">
                        <HeartIcon className="h-4 w-4 text-rose-600" />
                        <span className="text-sm font-medium text-rose-900">Wedding Example</span>
                      </div>
                      <code className="text-rose-800 text-sm">{param.weddingExample}</code>
                    </div>

                    {param.validation && param.validation.length > 0 && (
                      <div className="mt-3">
                        <span className="text-sm font-medium text-gray-700">Validation Rules:</span>
                        <ul className="mt-1 text-sm text-gray-600 space-y-1">
                          {param.validation.map((rule, ruleIndex) => (
                            <li key={ruleIndex} className="flex items-center space-x-2">
                              <span className="w-2 h-2 bg-gray-400 rounded-full"></span>
                              <span>{rule.message}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Responses Tab */}
        {selectedTab === 'responses' && (
          <div className="space-y-4">
            <div className="flex items-center space-x-2 mb-4">
              <CheckCircleIcon className="h-5 w-5 text-gray-600" />
              <h3 className="text-lg font-semibold text-gray-900">API Responses</h3>
            </div>

            <div className="space-y-4">
              {route.responses.map((response, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-2">
                      <span className={`px-2 py-1 text-sm font-medium rounded ${
                        response.status >= 200 && response.status < 300 ? 'bg-green-100 text-green-800' :
                        response.status >= 400 ? 'bg-red-100 text-red-800' :
                        'bg-blue-100 text-blue-800'
                      }`}>
                        {response.status}
                      </span>
                      <span className="font-medium text-gray-900">{response.description}</span>
                    </div>
                  </div>

                  {response.headers && (
                    <div className="mb-4">
                      <h4 className="font-medium text-gray-700 mb-2">Response Headers</h4>
                      <div className="bg-gray-50 rounded p-3 text-sm">
                        {Object.entries(response.headers).map(([key, value]) => (
                          <div key={key} className="flex">
                            <span className="font-mono text-gray-600 w-48">{key}:</span>
                            <span className="font-mono text-gray-800">{value}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  <div>
                    <h4 className="font-medium text-gray-700 mb-2">Response Body</h4>
                    <pre className="bg-gray-50 rounded p-4 text-sm overflow-x-auto">
                      <code>{JSON.stringify(response.example, null, 2)}</code>
                    </pre>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Examples Tab */}
        {selectedTab === 'examples' && (
          <div className="space-y-6">
            <div className="flex items-center space-x-2 mb-4">
              <CodeBracketIcon className="h-5 w-5 text-gray-600" />
              <h3 className="text-lg font-semibold text-gray-900">Wedding Industry Examples</h3>
            </div>

            {route.examples.map((example, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-6">
                <div className="mb-4">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-semibold text-gray-900">{example.title}</h4>
                    <span className="bg-rose-100 text-rose-800 text-sm px-2 py-1 rounded capitalize">
                      {example.userType}
                    </span>
                  </div>
                  <p className="text-gray-600">{example.scenario}</p>
                </div>

                <div className="space-y-4">
                  {example.code.map((codeEx, codeIndex) => (
                    <div key={codeIndex}>
                      <div className="flex items-center justify-between mb-2">
                        <h5 className="font-medium text-gray-700">{codeEx.language}</h5>
                        <button
                          onClick={() => copyToClipboard(codeEx.code, `${index}-${codeIndex}`)}
                          className="flex items-center space-x-1 text-sm text-gray-600 hover:text-gray-900"
                        >
                          <CopyIcon className="h-4 w-4" />
                          <span>{copiedCode === `${index}-${codeIndex}` ? 'Copied!' : 'Copy'}</span>
                        </button>
                      </div>
                      <pre className="bg-gray-50 rounded p-4 text-sm overflow-x-auto border">
                        <code>{codeEx.code}</code>
                      </pre>
                      <p className="text-sm text-gray-600 mt-2">{codeEx.description}</p>
                    </div>
                  ))}
                </div>

                <div className="mt-4 bg-blue-50 border border-blue-200 rounded p-4">
                  <h5 className="font-medium text-blue-900 mb-2">Explanation</h5>
                  <p className="text-blue-800 text-sm">{example.explanation}</p>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Security Tab */}
        {selectedTab === 'security' && (
          <div className="space-y-6">
            <div className="flex items-center space-x-2 mb-4">
              <ShieldCheckIcon className="h-5 w-5 text-gray-600" />
              <h3 className="text-lg font-semibold text-gray-900">Security & Authentication</h3>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="border border-gray-200 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-3">Authentication Methods</h4>
                  <div className="space-y-2">
                    {route.security.authentication.map((auth, index) => (
                      <div key={index} className="flex items-center space-x-2">
                        <CheckCircleIcon className="h-4 w-4 text-green-600" />
                        <span className="text-gray-700">{auth}</span>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="border border-gray-200 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-3">Required Permissions</h4>
                  <div className="space-y-2">
                    {route.security.permissions.map((permission, index) => (
                      <div key={index} className="flex items-center space-x-2">
                        <EyeIcon className="h-4 w-4 text-blue-600" />
                        <code className="text-sm bg-gray-100 px-2 py-1 rounded">{permission}</code>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div className="border border-gray-200 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-3">Rate Limiting</h4>
                  <p className="text-gray-700">{route.security.rateLimiting}</p>
                </div>

                <div className="border border-gray-200 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-3">Data Access</h4>
                  <p className="text-gray-700">{route.security.dataAccess}</p>
                </div>
              </div>
            </div>

            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="flex items-center space-x-2 mb-2">
                <ExclamationCircleIcon className="h-5 w-5 text-yellow-600" />
                <h4 className="font-medium text-yellow-900">Wedding Data Security</h4>
              </div>
              <p className="text-yellow-800 text-sm">
                All wedding data is encrypted at rest and in transit. Personal information like guest lists,
                vendor contacts, and wedding details are protected under GDPR and wedding industry privacy standards.
                Never log or store sensitive wedding information in client-side code.
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}