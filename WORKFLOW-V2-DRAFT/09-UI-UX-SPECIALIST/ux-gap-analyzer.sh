#!/bin/bash
# UX Gap Analyzer for WedSync UI/UX Specialist
# Systematically identifies missing pages, workflow breaks, and UX gaps

SCRIPT_DIR="/Users/skyphotography/CODE/WedSync-2.0/WedSync2/WORKFLOW-V2-DRAFT/09-UI-UX-SPECIALIST"
WEDSYNC_DIR="/Users/skyphotography/CODE/WedSync-2.0/WedSync2/wedsync"
GAP_REPORT="$SCRIPT_DIR/ux-gap-analysis-$(date +%Y-%m-%d).md"

echo "# 🔍 UX GAP ANALYSIS REPORT - $(date)" > "$GAP_REPORT"
echo "**Generated by UI/UX Specialist - Systematic Gap Detection**" >> "$GAP_REPORT"
echo "" >> "$GAP_REPORT"

# Counter for tracking gaps
TOTAL_GAPS=0
CRITICAL_GAPS=0
WORKFLOW_BREAKS=0
MOBILE_GAPS=0

# Function to check for complete user journeys
check_photographer_journey() {
    echo "## 📸 PHOTOGRAPHER USER JOURNEY ANALYSIS" >> "$GAP_REPORT"
    echo "" >> "$GAP_REPORT"
    
    # Required photographer workflow pages
    declare -a photographer_pages=(
        "portfolio-setup"
        "client-onboarding" 
        "proposal-builder"
        "contract-generator"
        "wedding-timeline-builder"
        "live-photo-upload"
        "gallery-delivery"
        "client-communication"
        "payment-invoicing"
        "business-analytics"
    )
    
    local missing_pages=()
    
    for page in "${photographer_pages[@]}"; do
        # Check if page exists in pages directory or components
        if ! find "$WEDSYNC_DIR/src" -name "*${page}*" -o -name "*$(echo $page | tr '-' '_')*" | head -1 | grep -q .; then
            missing_pages+=("$page")
            TOTAL_GAPS=$((TOTAL_GAPS + 1))
            CRITICAL_GAPS=$((CRITICAL_GAPS + 1))
        fi
    done
    
    if [ ${#missing_pages[@]} -gt 0 ]; then
        echo "### 🚨 CRITICAL MISSING PAGES:" >> "$GAP_REPORT"
        for page in "${missing_pages[@]}"; do
            echo "- ❌ **${page}** - Essential for photographer workflow" >> "$GAP_REPORT"
        done
        echo "" >> "$GAP_REPORT"
    else
        echo "### ✅ Photographer Journey Complete" >> "$GAP_REPORT"
        echo "" >> "$GAP_REPORT"
    fi
    
    # Check for workflow transitions
    echo "### 📊 Photographer Workflow Transitions:" >> "$GAP_REPORT"
    check_workflow_transitions "photographer" "${photographer_pages[@]}"
}

# Function to check venue coordinator journey  
check_venue_coordinator_journey() {
    echo "## 🏛️ VENUE COORDINATOR USER JOURNEY ANALYSIS" >> "$GAP_REPORT"
    echo "" >> "$GAP_REPORT"
    
    declare -a coordinator_pages=(
        "venue-setup-checklist"
        "vendor-coordination-hub"
        "wedding-day-timeline"
        "emergency-contact-system"
        "setup-documentation"
        "real-time-vendor-messaging"
        "timeline-delay-management"
        "post-wedding-cleanup"
    )
    
    local missing_pages=()
    
    for page in "${coordinator_pages[@]}"; do
        if ! find "$WEDSYNC_DIR/src" -name "*${page}*" -o -name "*$(echo $page | tr '-' '_')*" | head -1 | grep -q .; then
            missing_pages+=("$page")
            TOTAL_GAPS=$((TOTAL_GAPS + 1))
            CRITICAL_GAPS=$((CRITICAL_GAPS + 1))
        fi
    done
    
    if [ ${#missing_pages[@]} -gt 0 ]; then
        echo "### 🚨 CRITICAL MISSING PAGES:" >> "$GAP_REPORT"
        for page in "${missing_pages[@]}"; do
            echo "- ❌ **${page}** - Essential for venue coordination" >> "$GAP_REPORT"
        done
        echo "" >> "$GAP_REPORT"
    fi
}

# Function to check couple portal journey
check_couple_portal_journey() {
    echo "## 💒 COUPLE PORTAL USER JOURNEY ANALYSIS" >> "$GAP_REPORT"
    echo "" >> "$GAP_REPORT"
    
    declare -a couple_pages=(
        "wedding-planning-dashboard"
        "vendor-communication-hub"
        "photo-gallery-sharing"
        "guest-management-system"
        "wedding-website-builder"
        "vendor-review-system"
        "payment-tracking"
        "timeline-collaboration"
    )
    
    local missing_pages=()
    
    for page in "${couple_pages[@]}"; do
        if ! find "$WEDSYNC_DIR/src" -name "*${page}*" -o -name "*$(echo $page | tr '-' '_')*" | head -1 | grep -q .; then
            missing_pages+=("$page")
            TOTAL_GAPS=$((TOTAL_GAPS + 1))
        fi
    done
    
    if [ ${#missing_pages[@]} -gt 0 ]; then
        echo "### ⚠️ MISSING COUPLE PORTAL PAGES:" >> "$GAP_REPORT"
        for page in "${missing_pages[@]}"; do
            echo "- ❌ **${page}** - Important for couple experience" >> "$GAP_REPORT"
        done
        echo "" >> "$GAP_REPORT"
    fi
}

# Function to check mobile-specific gaps
check_mobile_gaps() {
    echo "## 📱 MOBILE EXPERIENCE GAP ANALYSIS" >> "$GAP_REPORT"
    echo "" >> "$GAP_REPORT"
    
    # Check for mobile-specific implementations
    echo "### Mobile Responsiveness Check:" >> "$GAP_REPORT"
    
    # Find pages without mobile optimization indicators
    pages_without_mobile=$(find "$WEDSYNC_DIR/src/app" -name "*.tsx" -exec grep -L "mobile\|responsive\|@media\|sm:\|md:\|lg:" {} \; | head -10)
    
    if [ -n "$pages_without_mobile" ]; then
        echo "**Pages potentially missing mobile optimization:**" >> "$GAP_REPORT"
        while read -r page; do
            if [ -n "$page" ]; then
                basename_page=$(basename "$page")
                echo "- ⚠️ $basename_page - No mobile optimization indicators found" >> "$GAP_REPORT"
                MOBILE_GAPS=$((MOBILE_GAPS + 1))
                TOTAL_GAPS=$((TOTAL_GAPS + 1))
            fi
        done <<< "$pages_without_mobile"
        echo "" >> "$GAP_REPORT"
    fi
    
    # Check for touch-friendly interactions
    echo "### Touch Interaction Analysis:" >> "$GAP_REPORT"
    
    # Look for components that might need touch optimization
    touch_components=$(find "$WEDSYNC_DIR/src" -name "*.tsx" -exec grep -l "onClick\|onMouseEnter\|hover:" {} \; | head -5)
    
    if [ -n "$touch_components" ]; then
        echo "**Components potentially needing touch optimization:**" >> "$GAP_REPORT"
        while read -r component; do
            if [ -n "$component" ]; then
                basename_comp=$(basename "$component")
                # Check if it has touch-specific handlers
                if ! grep -q "onTouchStart\|onTouchEnd\|touch:" "$component"; then
                    echo "- 👆 $basename_comp - Interactive but no touch handlers detected" >> "$GAP_REPORT"
                    MOBILE_GAPS=$((MOBILE_GAPS + 1))
                fi
            fi
        done <<< "$touch_components"
        echo "" >> "$GAP_REPORT"
    fi
}

# Function to check for emergency access patterns
check_emergency_access_gaps() {
    echo "## 🚨 WEDDING DAY EMERGENCY ACCESS ANALYSIS" >> "$GAP_REPORT"
    echo "" >> "$GAP_REPORT"
    
    # Pages that should have emergency access patterns
    declare -a emergency_critical_pages=(
        "timeline"
        "vendor-coordination"
        "emergency-contacts"
        "photo-upload"
        "real-time-messaging"
    )
    
    local missing_emergency_access=()
    
    for page in "${emergency_critical_pages[@]}"; do
        # Check if emergency access patterns exist
        if ! find "$WEDSYNC_DIR/src" -name "*${page}*" -exec grep -l "emergency\|quick.access\|floating.action\|fab" {} \; | head -1 | grep -q .; then
            missing_emergency_access+=("$page")
            WORKFLOW_BREAKS=$((WORKFLOW_BREAKS + 1))
            TOTAL_GAPS=$((TOTAL_GAPS + 1))
        fi
    done
    
    if [ ${#missing_emergency_access[@]} -gt 0 ]; then
        echo "### 🚨 MISSING EMERGENCY ACCESS PATTERNS:" >> "$GAP_REPORT"
        for page in "${missing_emergency_access[@]}"; do
            echo "- ⚠️ **${page}** - Wedding day critical but no quick access detected" >> "$GAP_REPORT"
        done
        echo "" >> "$GAP_REPORT"
        
        echo "**Recommended Emergency Patterns:**" >> "$GAP_REPORT"
        echo "- Floating Action Button (FAB) for critical actions" >> "$GAP_REPORT"
        echo "- Swipe gestures for common tasks" >> "$GAP_REPORT"
        echo "- Voice commands for hands-free operation" >> "$GAP_REPORT"
        echo "- Large touch targets for stressed users" >> "$GAP_REPORT"
        echo "" >> "$GAP_REPORT"
    fi
}

# Function to check workflow transitions
check_workflow_transitions() {
    local workflow_type=$1
    shift
    local pages=("$@")
    
    echo "#### Workflow Transition Analysis:" >> "$GAP_REPORT"
    
    # Check for navigation between workflow steps
    for i in "${!pages[@]}"; do
        current_page=${pages[i]}
        if [ $i -lt $((${#pages[@]} - 1)) ]; then
            next_page=${pages[$((i + 1))]}
            
            # Check if current page has navigation to next step
            if find "$WEDSYNC_DIR/src" -name "*${current_page}*" -exec grep -l "$next_page\|next.step\|continue\|proceed" {} \; | head -1 | grep -q .; then
                echo "- ✅ $current_page → $next_page (navigation found)" >> "$GAP_REPORT"
            else
                echo "- ⚠️ $current_page → $next_page (no clear navigation path)" >> "$GAP_REPORT"
                WORKFLOW_BREAKS=$((WORKFLOW_BREAKS + 1))
            fi
        fi
    done
    echo "" >> "$GAP_REPORT"
}

# Function to check for external tool dependencies
check_external_tool_gaps() {
    echo "## 🔗 EXTERNAL TOOL DEPENDENCY ANALYSIS" >> "$GAP_REPORT"
    echo "" >> "$GAP_REPORT"
    
    # Look for external redirects that break workflow
    external_redirects=$(find "$WEDSYNC_DIR/src" -name "*.tsx" -exec grep -l "window\.open\|href.*http\|target.*_blank" {} \; 2>/dev/null)
    
    if [ -n "$external_redirects" ]; then
        echo "### External Tool Dependencies Found:" >> "$GAP_REPORT"
        while read -r file; do
            if [ -n "$file" ]; then
                basename_file=$(basename "$file")
                echo "- 🔗 $basename_file - Contains external redirects" >> "$GAP_REPORT"
                
                # Extract the actual external URLs
                external_urls=$(grep -o "https\?://[^'\"]*" "$file" 2>/dev/null | head -3)
                if [ -n "$external_urls" ]; then
                    while read -r url; do
                        if [ -n "$url" ]; then
                            echo "  - URL: $url" >> "$GAP_REPORT"
                        fi
                    done <<< "$external_urls"
                fi
                WORKFLOW_BREAKS=$((WORKFLOW_BREAKS + 1))
            fi
        done <<< "$external_redirects"
        echo "" >> "$GAP_REPORT"
        
        echo "**Recommendation:** Consider building internal alternatives to reduce workflow breaks." >> "$GAP_REPORT"
        echo "" >> "$GAP_REPORT"
    fi
}

# Function to analyze competitor feature gaps
check_competitor_feature_gaps() {
    echo "## 🏆 COMPETITOR FEATURE GAP ANALYSIS" >> "$GAP_REPORT"
    echo "" >> "$GAP_REPORT"
    
    # HoneyBook features we might be missing
    echo "### HoneyBook Feature Comparison:" >> "$GAP_REPORT"
    declare -a honeybook_features=(
        "automated-workflow-sequences"
        "smart-questionnaire-builder"
        "invoice-automation-rules" 
        "client-project-timelines"
        "branded-proposal-templates"
    )
    
    for feature in "${honeybook_features[@]}"; do
        if ! find "$WEDSYNC_DIR/src" -name "*${feature}*" -o -name "*$(echo $feature | tr '-' '_')*" | head -1 | grep -q .; then
            echo "- ❌ $feature - HoneyBook competitive advantage" >> "$GAP_REPORT"
            TOTAL_GAPS=$((TOTAL_GAPS + 1))
        fi
    done
    echo "" >> "$GAP_REPORT"
    
    # Tave features we might be missing
    echo "### Tave Feature Comparison:" >> "$GAP_REPORT"
    declare -a tave_features=(
        "advanced-calendar-integration"
        "workflow-template-library"
        "automated-email-sequences"
        "tax-category-automation"
    )
    
    for feature in "${tave_features[@]}"; do
        if ! find "$WEDSYNC_DIR/src" -name "*${feature}*" -o -name "*$(echo $feature | tr '-' '_')*" | head -1 | grep -q .; then
            echo "- ❌ $feature - Tave competitive advantage" >> "$GAP_REPORT"
            TOTAL_GAPS=$((TOTAL_GAPS + 1))
        fi
    done
    echo "" >> "$GAP_REPORT"
}

# Main execution
echo "🔍 Starting UX Gap Analysis..." | tee -a "$GAP_REPORT"
echo "Analyzing WedSync for missing pages, workflow breaks, and UX gaps..." | tee -a "$GAP_REPORT"
echo "" >> "$GAP_REPORT"

# Run all gap analysis functions
check_photographer_journey
check_venue_coordinator_journey  
check_couple_portal_journey
check_mobile_gaps
check_emergency_access_gaps
check_external_tool_gaps
check_competitor_feature_gaps

# Generate summary
echo "## 📊 GAP ANALYSIS SUMMARY" >> "$GAP_REPORT"
echo "" >> "$GAP_REPORT"
echo "**Total Gaps Identified:** $TOTAL_GAPS" >> "$GAP_REPORT"
echo "**Critical Gaps (Missing Essential Pages):** $CRITICAL_GAPS" >> "$GAP_REPORT"
echo "**Workflow Breaks:** $WORKFLOW_BREAKS" >> "$GAP_REPORT"
echo "**Mobile Experience Gaps:** $MOBILE_GAPS" >> "$GAP_REPORT"
echo "" >> "$GAP_REPORT"

# Priority recommendations
echo "## 🎯 PRIORITY RECOMMENDATIONS" >> "$GAP_REPORT"
echo "" >> "$GAP_REPORT"

if [ $CRITICAL_GAPS -gt 0 ]; then
    echo "### 🚨 IMMEDIATE ACTION REQUIRED:" >> "$GAP_REPORT"
    echo "- **$CRITICAL_GAPS critical workflow pages missing**" >> "$GAP_REPORT"
    echo "- These gaps prevent core wedding vendor workflows" >> "$GAP_REPORT"
    echo "- Recommend immediate development prioritization" >> "$GAP_REPORT"
    echo "" >> "$GAP_REPORT"
fi

if [ $MOBILE_GAPS -gt 0 ]; then
    echo "### 📱 MOBILE OPTIMIZATION NEEDED:" >> "$GAP_REPORT"
    echo "- **$MOBILE_GAPS mobile experience gaps identified**" >> "$GAP_REPORT"
    echo "- Critical for 60% of wedding vendors who use mobile devices" >> "$GAP_REPORT"
    echo "- Focus on touch optimization and responsive design" >> "$GAP_REPORT"
    echo "" >> "$GAP_REPORT"
fi

if [ $WORKFLOW_BREAKS -gt 0 ]; then
    echo "### 🔗 WORKFLOW CONTINUITY ISSUES:" >> "$GAP_REPORT"
    echo "- **$WORKFLOW_BREAKS workflow breaks detected**" >> "$GAP_REPORT"
    echo "- External tool dependencies break user experience" >> "$GAP_REPORT"
    echo "- Emergency access patterns missing for wedding day scenarios" >> "$GAP_REPORT"
    echo "" >> "$GAP_REPORT"
fi

# Next steps
echo "## 📋 NEXT STEPS FOR UI/UX SPECIALIST" >> "$GAP_REPORT"
echo "" >> "$GAP_REPORT"
echo "1. **Route Critical Gaps** → Send to Dev Manager for immediate prioritization" >> "$GAP_REPORT"
echo "2. **Design Missing Pages** → Create wireframes and user flow diagrams" >> "$GAP_REPORT"
echo "3. **Mobile Optimization Plan** → Design touch-friendly interaction patterns" >> "$GAP_REPORT"
echo "4. **Emergency Access Design** → Create quick access pattern library" >> "$GAP_REPORT"
echo "5. **Workflow Continuity Fix** → Design internal alternatives to external tools" >> "$GAP_REPORT"
echo "" >> "$GAP_REPORT"

# Alert routing
if [ $TOTAL_GAPS -gt 0 ]; then
    # Create alert for Workflow Manager
    echo "🚨 UX GAP ALERT: $TOTAL_GAPS gaps identified ($CRITICAL_GAPS critical)" > "$SCRIPT_DIR/../OUTBOX/ui-ux-specialist/gap-analysis-alert-$(date +%Y-%m-%d).md"
    echo "Full report: $GAP_REPORT" >> "$SCRIPT_DIR/../OUTBOX/ui-ux-specialist/gap-analysis-alert-$(date +%Y-%m-%d).md"
    
    # Create actionable items for development teams
    if [ $CRITICAL_GAPS -gt 0 ]; then
        echo "$CRITICAL_GAPS critical wedding workflow pages missing - immediate development needed" > "$SCRIPT_DIR/../OUTBOX/ui-ux-specialist/critical-gaps-dev-manager.md"
        echo "See detailed analysis: $GAP_REPORT" >> "$SCRIPT_DIR/../OUTBOX/ui-ux-specialist/critical-gaps-dev-manager.md"
    fi
fi

echo ""
echo "🎯 UX Gap Analysis Complete!"
echo "📊 Total Gaps: $TOTAL_GAPS (Critical: $CRITICAL_GAPS, Mobile: $MOBILE_GAPS, Workflow: $WORKFLOW_BREAKS)"
echo "📄 Full Report: $GAP_REPORT"

if [ $TOTAL_GAPS -gt 10 ]; then
    echo "🚨 HIGH PRIORITY: Significant UX gaps detected - immediate attention recommended"
elif [ $CRITICAL_GAPS -gt 0 ]; then
    echo "⚠️ MEDIUM PRIORITY: Critical workflow gaps need addressing"
else
    echo "✅ LOW PRIORITY: Minor gaps only - UX quality is good"
fi