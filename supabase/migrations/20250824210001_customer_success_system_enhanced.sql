-- WS-142: Enhanced Customer Success System Database Migration
-- Creates comprehensive tables and infrastructure for customer success tracking

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- =============================================
-- ACTIVITY TRACKING SYSTEM
-- =============================================

-- Activity events tracking table
CREATE TABLE IF NOT EXISTS activity_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
    event_type TEXT NOT NULL,
    feature_key TEXT NOT NULL,
    event_data JSONB DEFAULT '{}',
    session_id TEXT NOT NULL,
    duration INTEGER, -- in seconds
    value_generated INTEGER DEFAULT 0,
    context_data JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Feature definitions for tracking
CREATE TABLE IF NOT EXISTS feature_definitions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    feature_key TEXT UNIQUE NOT NULL,
    feature_name TEXT NOT NULL,
    category TEXT NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Progress rules for automated tracking
CREATE TABLE IF NOT EXISTS progress_rules (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    rule_id TEXT UNIQUE NOT NULL,
    milestone_type TEXT NOT NULL,
    trigger_event TEXT NOT NULL,
    progress_calculation JSONB NOT NULL,
    conditions JSONB DEFAULT '[]',
    is_active BOOLEAN DEFAULT true,
    priority INTEGER DEFAULT 5,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Progress events for monitoring
CREATE TABLE IF NOT EXISTS progress_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    event_id TEXT UNIQUE NOT NULL,
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    event_type TEXT NOT NULL,
    event_data JSONB DEFAULT '{}',
    timestamp TIMESTAMPTZ NOT NULL,
    source TEXT DEFAULT 'automatic',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Progress insights generated by monitoring
CREATE TABLE IF NOT EXISTS progress_insights (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    milestone_id UUID REFERENCES success_milestones(id) ON DELETE CASCADE,
    insight_type TEXT NOT NULL,
    message TEXT NOT NULL,
    recommendations JSONB DEFAULT '[]',
    severity TEXT DEFAULT 'medium',
    detected_at TIMESTAMPTZ NOT NULL,
    acknowledged_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- =============================================
-- MILESTONE TRACKING SYSTEM
-- =============================================

-- Milestone progress history
CREATE TABLE IF NOT EXISTS milestone_progress_history (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    milestone_id UUID NOT NULL REFERENCES success_milestones(id) ON DELETE CASCADE,
    previous_value INTEGER NOT NULL,
    new_value INTEGER NOT NULL,
    increment_amount INTEGER NOT NULL,
    progress_date TIMESTAMPTZ NOT NULL,
    source TEXT DEFAULT 'automatic',
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Milestone events log
CREATE TABLE IF NOT EXISTS milestone_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    event_type TEXT NOT NULL,
    event_data JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Celebration events
CREATE TABLE IF NOT EXISTS celebration_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    event_id TEXT UNIQUE NOT NULL,
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    milestone_id UUID NOT NULL REFERENCES success_milestones(id) ON DELETE CASCADE,
    celebration_type TEXT NOT NULL,
    template TEXT NOT NULL,
    status TEXT DEFAULT 'pending',
    scheduled_for TIMESTAMPTZ,
    sent_at TIMESTAMPTZ,
    metadata JSONB DEFAULT '{}',
    personalization_data JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- =============================================
-- REWARD MANAGEMENT SYSTEM
-- =============================================

-- User reward accounts
CREATE TABLE IF NOT EXISTS user_reward_accounts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID UNIQUE NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    total_points_earned INTEGER DEFAULT 0,
    current_points_balance INTEGER DEFAULT 0,
    points_redeemed INTEGER DEFAULT 0,
    tier TEXT DEFAULT 'starter',
    rewards_unlocked INTEGER DEFAULT 0,
    rewards_redeemed INTEGER DEFAULT 0,
    streak_days INTEGER DEFAULT 0,
    last_activity TIMESTAMPTZ DEFAULT NOW(),
    achievements JSONB DEFAULT '[]',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Reward definitions
CREATE TABLE IF NOT EXISTS rewards (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    reward_id TEXT UNIQUE NOT NULL,
    user_id UUID REFERENCES user_profiles(id) ON DELETE CASCADE,
    milestone_id UUID REFERENCES success_milestones(id) ON DELETE SET NULL,
    reward_type TEXT NOT NULL,
    category TEXT NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    point_value INTEGER NOT NULL DEFAULT 0,
    cash_value INTEGER, -- in cents
    is_active BOOLEAN DEFAULT true,
    is_redeemable BOOLEAN DEFAULT true,
    expires_at TIMESTAMPTZ,
    minimum_points INTEGER DEFAULT 0,
    tier_requirement TEXT,
    prerequisites JSONB DEFAULT '[]',
    status TEXT DEFAULT 'available',
    redeemed_at TIMESTAMPTZ,
    tags JSONB DEFAULT '[]',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Reward transactions
CREATE TABLE IF NOT EXISTS reward_transactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transaction_id TEXT UNIQUE NOT NULL,
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    transaction_type TEXT NOT NULL,
    points_change INTEGER NOT NULL,
    balance_after INTEGER NOT NULL,
    reason TEXT NOT NULL,
    milestone_id UUID REFERENCES success_milestones(id) ON DELETE SET NULL,
    reward_id TEXT REFERENCES rewards(reward_id) ON DELETE SET NULL,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Reward redemptions
CREATE TABLE IF NOT EXISTS reward_redemptions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    redemption_id TEXT UNIQUE NOT NULL,
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    reward_id TEXT NOT NULL REFERENCES rewards(reward_id) ON DELETE CASCADE,
    points_cost INTEGER NOT NULL,
    status TEXT DEFAULT 'pending',
    requested_at TIMESTAMPTZ NOT NULL,
    fulfilled_at TIMESTAMPTZ,
    fulfillment_data JSONB,
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Achievement badges
CREATE TABLE IF NOT EXISTS user_achievement_badges (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    badge_id TEXT NOT NULL,
    badge_name TEXT NOT NULL,
    badge_description TEXT,
    icon_url TEXT,
    rarity TEXT DEFAULT 'common',
    milestone_id UUID REFERENCES success_milestones(id) ON DELETE SET NULL,
    earned_at TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, badge_id)
);

-- =============================================
-- RISK ASSESSMENT SYSTEM
-- =============================================

-- Risk assessment history
CREATE TABLE IF NOT EXISTS risk_assessment_history (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
    overall_risk_score INTEGER NOT NULL,
    risk_level TEXT NOT NULL,
    risk_category TEXT NOT NULL,
    churn_probability INTEGER NOT NULL,
    time_to_churn INTEGER NOT NULL,
    risk_trend TEXT NOT NULL,
    risk_velocity DECIMAL(5,2) DEFAULT 0,
    risk_indicators JSONB DEFAULT '[]',
    intervention_recommendations JSONB DEFAULT '[]',
    assessed_at TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- =============================================
-- METRICS AGGREGATION SYSTEM
-- =============================================

-- Metrics aggregation jobs
CREATE TABLE IF NOT EXISTS metrics_aggregation_jobs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    job_id TEXT UNIQUE NOT NULL,
    job_type TEXT NOT NULL,
    status TEXT DEFAULT 'pending',
    organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
    config JSONB NOT NULL,
    scheduled_for TIMESTAMPTZ NOT NULL,
    started_at TIMESTAMPTZ,
    completed_at TIMESTAMPTZ,
    duration INTEGER, -- in milliseconds
    total_items INTEGER DEFAULT 0,
    processed_items INTEGER DEFAULT 0,
    failed_items INTEGER DEFAULT 0,
    progress_percentage INTEGER DEFAULT 0,
    results JSONB DEFAULT '{}',
    errors JSONB DEFAULT '[]',
    retry_count INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- =============================================
-- NOTIFICATION SYSTEM
-- =============================================

-- In-app notifications
CREATE TABLE IF NOT EXISTS in_app_notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    type TEXT NOT NULL,
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    data JSONB DEFAULT '{}',
    read_at TIMESTAMPTZ,
    expires_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- =============================================
-- INDEXES FOR PERFORMANCE
-- =============================================

-- Activity events indexes
CREATE INDEX IF NOT EXISTS idx_activity_events_user_id ON activity_events(user_id);
CREATE INDEX IF NOT EXISTS idx_activity_events_created_at ON activity_events(created_at);
CREATE INDEX IF NOT EXISTS idx_activity_events_event_type ON activity_events(event_type);
CREATE INDEX IF NOT EXISTS idx_activity_events_feature_key ON activity_events(feature_key);
CREATE INDEX IF NOT EXISTS idx_activity_events_org_created ON activity_events(organization_id, created_at);

-- Milestone progress indexes
CREATE INDEX IF NOT EXISTS idx_milestone_progress_user_id ON milestone_progress_history(user_id);
CREATE INDEX IF NOT EXISTS idx_milestone_progress_milestone_id ON milestone_progress_history(milestone_id);
CREATE INDEX IF NOT EXISTS idx_milestone_progress_date ON milestone_progress_history(progress_date);

-- Reward system indexes
CREATE INDEX IF NOT EXISTS idx_reward_transactions_user_id ON reward_transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_reward_transactions_created_at ON reward_transactions(created_at);
CREATE INDEX IF NOT EXISTS idx_rewards_active ON rewards(is_active, is_redeemable);
CREATE INDEX IF NOT EXISTS idx_rewards_tier ON rewards(tier_requirement, minimum_points);

-- Risk assessment indexes
CREATE INDEX IF NOT EXISTS idx_risk_assessment_user_id ON risk_assessment_history(user_id);
CREATE INDEX IF NOT EXISTS idx_risk_assessment_org_level ON risk_assessment_history(organization_id, risk_level);
CREATE INDEX IF NOT EXISTS idx_risk_assessment_assessed_at ON risk_assessment_history(assessed_at);

-- Celebration events indexes
CREATE INDEX IF NOT EXISTS idx_celebration_events_user_id ON celebration_events(user_id);
CREATE INDEX IF NOT EXISTS idx_celebration_events_status ON celebration_events(status);
CREATE INDEX IF NOT EXISTS idx_celebration_events_scheduled ON celebration_events(scheduled_for);

-- Progress insights indexes
CREATE INDEX IF NOT EXISTS idx_progress_insights_user_id ON progress_insights(user_id);
CREATE INDEX IF NOT EXISTS idx_progress_insights_severity ON progress_insights(severity, detected_at);

-- Notifications indexes
CREATE INDEX IF NOT EXISTS idx_notifications_user_unread ON in_app_notifications(user_id, read_at) WHERE read_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_notifications_created_at ON in_app_notifications(created_at);

-- =============================================
-- ROW LEVEL SECURITY POLICIES
-- =============================================

-- Enable RLS on all customer success tables
ALTER TABLE activity_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE progress_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE progress_insights ENABLE ROW LEVEL SECURITY;
ALTER TABLE milestone_progress_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE milestone_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE celebration_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_reward_accounts ENABLE ROW LEVEL SECURITY;
ALTER TABLE rewards ENABLE ROW LEVEL SECURITY;
ALTER TABLE reward_transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE reward_redemptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_achievement_badges ENABLE ROW LEVEL SECURITY;
ALTER TABLE risk_assessment_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE in_app_notifications ENABLE ROW LEVEL SECURITY;

-- Activity events policies
CREATE POLICY "Users can view their own activity events"
    ON activity_events FOR SELECT
    USING (user_id = auth.uid());

CREATE POLICY "Users can insert their own activity events"
    ON activity_events FOR INSERT
    WITH CHECK (user_id = auth.uid());

-- Milestone progress policies
CREATE POLICY "Users can view their own milestone progress"
    ON milestone_progress_history FOR SELECT
    USING (user_id = auth.uid());

CREATE POLICY "Users can insert their own milestone progress"
    ON milestone_progress_history FOR INSERT
    WITH CHECK (user_id = auth.uid());

-- Reward system policies
CREATE POLICY "Users can view their own reward account"
    ON user_reward_accounts FOR SELECT
    USING (user_id = auth.uid());

CREATE POLICY "Users can update their own reward account"
    ON user_reward_accounts FOR UPDATE
    USING (user_id = auth.uid());

CREATE POLICY "Users can view their own reward transactions"
    ON reward_transactions FOR SELECT
    USING (user_id = auth.uid());

CREATE POLICY "Users can view their own reward redemptions"
    ON reward_redemptions FOR SELECT
    USING (user_id = auth.uid());

CREATE POLICY "Users can insert their own reward redemptions"
    ON reward_redemptions FOR INSERT
    WITH CHECK (user_id = auth.uid());

-- Badge policies
CREATE POLICY "Users can view their own badges"
    ON user_achievement_badges FOR SELECT
    USING (user_id = auth.uid());

-- Risk assessment policies
CREATE POLICY "Users can view their own risk assessments"
    ON risk_assessment_history FOR SELECT
    USING (user_id = auth.uid());

-- Notification policies
CREATE POLICY "Users can view their own notifications"
    ON in_app_notifications FOR SELECT
    USING (user_id = auth.uid());

CREATE POLICY "Users can update their own notifications"
    ON in_app_notifications FOR UPDATE
    USING (user_id = auth.uid());

-- =============================================
-- TRIGGERS AND FUNCTIONS
-- =============================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers for updated_at
CREATE TRIGGER update_user_reward_accounts_updated_at 
    BEFORE UPDATE ON user_reward_accounts 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_rewards_updated_at 
    BEFORE UPDATE ON rewards 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_progress_rules_updated_at 
    BEFORE UPDATE ON progress_rules 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_metrics_jobs_updated_at 
    BEFORE UPDATE ON metrics_aggregation_jobs 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to automatically create reward account
CREATE OR REPLACE FUNCTION create_user_reward_account()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO user_reward_accounts (
        user_id,
        total_points_earned,
        current_points_balance,
        tier
    ) VALUES (
        NEW.id,
        0,
        0,
        'starter'
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to create reward account for new users
CREATE TRIGGER trigger_create_user_reward_account
    AFTER INSERT ON user_profiles
    FOR EACH ROW
    EXECUTE FUNCTION create_user_reward_account();

-- =============================================
-- DEFAULT DATA
-- =============================================

-- Insert default feature definitions
INSERT INTO feature_definitions (feature_key, feature_name, category, description) VALUES
('client_management', 'Client Management', 'core', 'Managing client profiles and information'),
('form_builder', 'Form Builder', 'core', 'Creating and managing custom forms'),
('journey_creator', 'Journey Creator', 'core', 'Building customer journeys'),
('template_engine', 'Template Engine', 'productivity', 'Using and creating templates'),
('analytics_dashboard', 'Analytics Dashboard', 'insights', 'Viewing analytics and metrics'),
('collaboration_tools', 'Collaboration Tools', 'teamwork', 'Team collaboration features'),
('automation_workflows', 'Automation Workflows', 'automation', 'Setting up automated processes'),
('integration_hub', 'Integration Hub', 'integrations', 'Third-party integrations'),
('mobile_app', 'Mobile App', 'mobile', 'Mobile application usage'),
('api_access', 'API Access', 'developer', 'API usage and development')
ON CONFLICT (feature_key) DO NOTHING;

-- Insert default progress rules
INSERT INTO progress_rules (rule_id, milestone_type, trigger_event, progress_calculation, conditions, priority) VALUES
('profile_completion', 'onboarding', 'profile_updated', '{"calculationType": "set_value", "value": 1}', '[{"field": "profile_completeness", "operator": "equals", "value": 100}]', 1),
('client_creation', 'feature_adoption', 'client_created', '{"calculationType": "increment", "value": 1}', '[]', 2),
('form_creation', 'feature_adoption', 'form_created', '{"calculationType": "increment", "value": 1}', '[]', 2),
('daily_login', 'engagement', 'user_login', '{"calculationType": "increment", "value": 1, "timeframe": "1d"}', '[{"field": "login_type", "operator": "equals", "value": "daily"}]', 3),
('template_usage', 'feature_adoption', 'template_used', '{"calculationType": "increment", "value": 1}', '[]', 2)
ON CONFLICT (rule_id) DO NOTHING;

-- Insert default reward definitions (system-wide rewards)
INSERT INTO rewards (reward_id, reward_type, category, name, description, point_value, is_active, is_redeemable, minimum_points, tier_requirement) VALUES
('feature_unlock_premium_templates', 'feature_unlock', 'achievement', 'Premium Templates Access', 'Unlock access to premium wedding templates', 100, true, true, 100, 'professional'),
('consultation_success_manager', 'consultation', 'milestone', '30-min Success Manager Call', 'One-on-one consultation with a success manager', 200, true, true, 200, 'starter'),
('discount_monthly_subscription', 'discount', 'loyalty', '20% Monthly Discount', 'One month with 20% discount on subscription', 150, true, true, 150, 'starter'),
('template_pack_seasonal', 'template', 'seasonal', 'Seasonal Template Pack', 'Collection of seasonal wedding templates', 75, true, true, 75, 'starter'),
('integration_unlock_advanced', 'integration', 'achievement', 'Advanced Integrations', 'Access to premium third-party integrations', 300, true, true, 300, 'business')
ON CONFLICT (reward_id) DO NOTHING;

-- =============================================
-- GRANTS AND PERMISSIONS
-- =============================================

-- Grant necessary permissions to authenticated users
GRANT SELECT, INSERT ON activity_events TO authenticated;
GRANT SELECT, INSERT ON progress_events TO authenticated;
GRANT SELECT ON progress_insights TO authenticated;
GRANT SELECT, INSERT ON milestone_progress_history TO authenticated;
GRANT SELECT, INSERT ON milestone_events TO authenticated;
GRANT SELECT ON celebration_events TO authenticated;
GRANT SELECT, UPDATE ON user_reward_accounts TO authenticated;
GRANT SELECT ON rewards TO authenticated;
GRANT SELECT ON reward_transactions TO authenticated;
GRANT SELECT, INSERT ON reward_redemptions TO authenticated;
GRANT SELECT ON user_achievement_badges TO authenticated;
GRANT SELECT ON risk_assessment_history TO authenticated;
GRANT SELECT, UPDATE ON in_app_notifications TO authenticated;

-- Grant read access to feature definitions
GRANT SELECT ON feature_definitions TO authenticated;
GRANT SELECT ON progress_rules TO authenticated;

-- Service role permissions for system operations
GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;

-- =============================================
-- MATERIALIZED VIEWS FOR PERFORMANCE
-- =============================================

-- User activity summary view
CREATE MATERIALIZED VIEW IF NOT EXISTS user_activity_summary AS
SELECT 
    user_id,
    COUNT(*) as total_events,
    COUNT(DISTINCT feature_key) as unique_features_used,
    COUNT(DISTINCT DATE(created_at)) as active_days,
    MAX(created_at) as last_activity_at,
    AVG(COALESCE(value_generated, 0)) as avg_value_per_event
FROM activity_events 
WHERE created_at >= NOW() - INTERVAL '90 days'
GROUP BY user_id;

CREATE UNIQUE INDEX IF NOT EXISTS idx_user_activity_summary_user_id ON user_activity_summary(user_id);

-- Feature adoption metrics view
CREATE MATERIALIZED VIEW IF NOT EXISTS feature_adoption_metrics AS
SELECT 
    ae.feature_key,
    fd.feature_name,
    fd.category,
    COUNT(*) as total_usage,
    COUNT(DISTINCT ae.user_id) as unique_users,
    AVG(COALESCE(ae.value_generated, 0)) as avg_value,
    MAX(ae.created_at) as last_used_at
FROM activity_events ae
JOIN feature_definitions fd ON ae.feature_key = fd.feature_key
WHERE ae.created_at >= NOW() - INTERVAL '30 days'
GROUP BY ae.feature_key, fd.feature_name, fd.category;

CREATE UNIQUE INDEX IF NOT EXISTS idx_feature_adoption_metrics_key ON feature_adoption_metrics(feature_key);

-- Refresh materialized views daily (would be scheduled)
-- REFRESH MATERIALIZED VIEW CONCURRENTLY user_activity_summary;
-- REFRESH MATERIALIZED VIEW CONCURRENTLY feature_adoption_metrics;

-- =============================================
-- COMMENTS FOR DOCUMENTATION
-- =============================================

COMMENT ON TABLE activity_events IS 'Tracks all user activity events for customer success analysis';
COMMENT ON TABLE feature_definitions IS 'Defines available features for tracking and analysis';
COMMENT ON TABLE progress_rules IS 'Rules for automated milestone progress tracking';
COMMENT ON TABLE milestone_progress_history IS 'Historical record of milestone progress changes';
COMMENT ON TABLE celebration_events IS 'Milestone achievement celebrations and notifications';
COMMENT ON TABLE user_reward_accounts IS 'User point balances and reward tier information';
COMMENT ON TABLE rewards IS 'Available rewards and their requirements';
COMMENT ON TABLE reward_transactions IS 'All point earning and spending transactions';
COMMENT ON TABLE risk_assessment_history IS 'Historical risk assessments for churn prediction';
COMMENT ON TABLE metrics_aggregation_jobs IS 'Background jobs for metrics calculation';
COMMENT ON TABLE in_app_notifications IS 'In-application notification system';

-- Migration complete
SELECT 'Customer Success System Enhanced Migration completed successfully' as status;