# PDF Analysis System - Docker Compose Configuration
# WS-242: AI PDF Analysis System - Production Deployment

version: '3.8'

services:
  # Main PDF Analysis Service
  pdf-analysis:
    build:
      context: ../../
      dockerfile: docker/pdf-analysis/Dockerfile
    container_name: wedsync-pdf-analysis
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # AI Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_ORGANIZATION=${OPENAI_ORGANIZATION}
      
      # File Storage
      - STORAGE_PROVIDER=supabase
      - MAX_FILE_SIZE=10485760  # 10MB
      - ALLOWED_FILE_TYPES=application/pdf
      
      # Processing Configuration
      - MAX_CONCURRENT_JOBS=5
      - DEFAULT_TIMEOUT=600000  # 10 minutes
      - COST_LIMIT_PER_JOB=500  # Â£5.00 in pence
      - PATTERN_CACHE_TTL=3600  # 1 hour
      
      # Rate Limiting
      - RATE_LIMIT_WINDOW=3600000  # 1 hour
      - RATE_LIMIT_MAX_REQUESTS=100
      
      # Monitoring
      - LOG_LEVEL=info
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      
      # Security
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - pdf_uploads:/app/uploads
      - pdf_temp:/app/temp
      - pdf_logs:/app/logs
    networks:
      - wedsync-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/pdf-analysis/upload"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '0.5'
        reservations:
          memory: 512MB
          cpus: '0.25'

  # Redis for job queue and caching
  redis:
    image: redis:7-alpine
    container_name: wedsync-pdf-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - wedsync-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for wedding field patterns (if not using external Supabase)
  postgres:
    image: postgres:15-alpine
    container_name: wedsync-pdf-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=wedsync_pdf_patterns
      - POSTGRES_USER=${POSTGRES_USER:-wedsync}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - wedsync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-wedsync}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background job processor
  job-processor:
    build:
      context: ../../
      dockerfile: docker/pdf-analysis/Dockerfile
    container_name: wedsync-pdf-processor
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PROCESSOR_MODE=worker
      - CONCURRENT_JOBS=3
      - JOB_TIMEOUT=600000
      # Copy same environment as main service
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    volumes:
      - pdf_uploads:/app/uploads
      - pdf_temp:/app/temp
      - pdf_logs:/app/logs
    networks:
      - wedsync-network
    depends_on:
      - redis
      - postgres
    command: ["node", "scripts/job-processor.js"]
    deploy:
      resources:
        limits:
          memory: 2GB
          cpus: '1.0'

  # Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: wedsync-pdf-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - wedsync-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: wedsync-pdf-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - wedsync-network
    depends_on:
      - prometheus

  # Log aggregation
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: wedsync-pdf-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - wedsync-network

  # Log collection
  filebeat:
    image: elastic/filebeat:8.8.0
    container_name: wedsync-pdf-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - pdf_logs:/var/log/wedsync:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - wedsync-network
    depends_on:
      - elasticsearch

  # Reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: wedsync-pdf-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - wedsync-network
    depends_on:
      - pdf-analysis

volumes:
  pdf_uploads:
    driver: local
  pdf_temp:
    driver: local
  pdf_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  wedsync-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16