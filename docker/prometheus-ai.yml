# Prometheus Configuration for AI Version Intelligence Services
# WS-200 API Versioning Strategy - Team D Implementation
#
# Comprehensive monitoring for wedding industry AI systems

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    environment: 'production'
    service_group: 'ai_version_intelligence'
    industry: 'wedding'

# Wedding Day Alert Rules
rule_files:
  - "wedding_day_alerts.yml"
  - "cultural_intelligence_alerts.yml"
  - "performance_alerts.yml"

# Alert Manager Configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Scrape Configurations
scrape_configs:
  # AI Version Intelligence Engine Metrics
  - job_name: 'ai-version-intelligence'
    static_configs:
      - targets: ['ai-version-intelligence:3000']
    metrics_path: '/api/metrics'
    scrape_interval: 10s # More frequent for wedding day critical service
    scrape_timeout: 5s
    params:
      format: ['prometheus']
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: ai-version-intelligence:3000
    metric_relabel_configs:
      # Add wedding industry context to metrics
      - source_labels: [__name__]
        regex: 'ai_(.+)'
        target_label: wedding_service
        replacement: 'version_intelligence'

  # API Evolution Intelligence Metrics
  - job_name: 'api-evolution-intelligence'
    static_configs:
      - targets: ['ai-version-intelligence:3000']
    metrics_path: '/api/metrics/evolution'
    scrape_interval: 30s
    params:
      component: ['api_evolution']
    metric_relabel_configs:
      - source_labels: [supplier_type]
        target_label: wedding_supplier_type
      - source_labels: [cultural_tradition]
        target_label: wedding_culture

  # Version Compatibility Intelligence
  - job_name: 'compatibility-intelligence'
    static_configs:
      - targets: ['ai-version-intelligence:3000']
    metrics_path: '/api/metrics/compatibility'
    scrape_interval: 30s
    params:
      component: ['compatibility']
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'compatibility_(.+)'
        target_label: metric_type
        replacement: 'wedding_compatibility'

  # Migration Intelligence Orchestrator
  - job_name: 'migration-intelligence'
    static_configs:
      - targets: ['ai-version-intelligence:3000']
    metrics_path: '/api/metrics/migration'
    scrape_interval: 45s
    params:
      component: ['migration']
    metric_relabel_configs:
      - source_labels: [wedding_season]
        target_label: is_wedding_season
      - source_labels: [migration_phase]
        target_label: current_phase

  # Performance Prediction Engine
  - job_name: 'performance-prediction'
    static_configs:
      - targets: ['ai-version-intelligence:3000']
    metrics_path: '/api/metrics/performance'
    scrape_interval: 20s
    params:
      component: ['performance']
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'performance_prediction_(.+)'
        target_label: prediction_type
        replacement: '$1'

  # Cultural API Intelligence
  - job_name: 'cultural-intelligence'
    static_configs:
      - targets: ['ai-version-intelligence:3000']
    metrics_path: '/api/metrics/cultural'
    scrape_interval: 60s # Less frequent as cultural data changes slowly
    params:
      component: ['cultural']
    metric_relabel_configs:
      - source_labels: [cultural_tradition]
        target_label: wedding_tradition
      - source_labels: [cultural_region]
        target_label: geographic_region

  # Version Recommendation AI
  - job_name: 'recommendation-ai'
    static_configs:
      - targets: ['ai-version-intelligence:3000']
    metrics_path: '/api/metrics/recommendations'
    scrape_interval: 30s
    params:
      component: ['recommendations']
    metric_relabel_configs:
      - source_labels: [business_type]
        target_label: wedding_business_type
      - source_labels: [recommendation_confidence]
        target_label: ai_confidence_score

  # Redis Metrics for AI Caching
  - job_name: 'ai-redis'
    static_configs:
      - targets: ['ai-redis:6379']
    metrics_path: '/metrics'
    scrape_interval: 15s
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'redis_(.+)'
        target_label: cache_component
        replacement: 'ai_cache'

  # PostgreSQL Metrics for AI Training Data
  - job_name: 'ai-postgres'
    static_configs:
      - targets: ['ai-postgres:9187']  # Assumes postgres_exporter
    scrape_interval: 30s
    params:
      database: ['wedsync_ai']
    metric_relabel_configs:
      - source_labels: [datname]
        target_label: ai_database
      - source_labels: [__name__]
        regex: 'pg_(.+)'
        target_label: db_metric_type
        replacement: 'ai_training_db'

  # Wedding Day Performance Monitor
  - job_name: 'wedding-day-monitor'
    static_configs:
      - targets: ['wedding-day-monitor:3000']
    metrics_path: '/metrics/wedding-day'
    scrape_interval: 5s # Very frequent during wedding days
    params:
      priority: ['emergency']
    metric_relabel_configs:
      - source_labels: [is_wedding_day]
        target_label: wedding_day_active
      - source_labels: [venue_type]
        target_label: wedding_venue_type

  # Cultural Calendar Service
  - job_name: 'cultural-calendar'
    static_configs:
      - targets: ['cultural-calendar:3000']
    metrics_path: '/metrics/cultural-calendar'
    scrape_interval: 300s # 5 minutes - calendar data changes slowly
    metric_relabel_configs:
      - source_labels: [cultural_event]
        target_label: active_cultural_event
      - source_labels: [event_impact_level]
        target_label: cultural_impact_level

  # OpenAI API Metrics (via proxy)
  - job_name: 'openai-proxy'
    static_configs:
      - targets: ['ai-version-intelligence:3000']
    metrics_path: '/api/metrics/openai'
    scrape_interval: 30s
    params:
      service: ['openai']
    metric_relabel_configs:
      - source_labels: [model_name]
        target_label: openai_model
      - source_labels: [request_type]
        target_label: ai_request_type

  # Node.js Application Metrics
  - job_name: 'nodejs-ai-app'
    static_configs:
      - targets: ['ai-version-intelligence:3000']
    metrics_path: '/api/metrics/nodejs'
    scrape_interval: 15s
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'nodejs_(.+)'
        target_label: nodejs_metric
        replacement: '$1'

  # Docker Container Metrics
  - job_name: 'docker-containers'
    static_configs:
      - targets: ['cadvisor:8080']
    metrics_path: '/metrics'
    scrape_interval: 30s
    metric_relabel_configs:
      - source_labels: [container_label_com_docker_compose_service]
        target_label: compose_service
      - source_labels: [container_label_com_docker_compose_project]
        regex: 'wedsync.*'
        target_label: project
        replacement: 'wedsync_ai'

# Wedding Season Dynamic Configuration
# This section adjusts scraping frequency based on wedding season
# Peak season (May-October): More frequent monitoring
# Off season (November-April): Standard monitoring

# Global relabeling for wedding context
metric_relabel_configs:
  # Add timestamp labels for wedding day context
  - source_labels: [__name__]
    target_label: scraped_at
    replacement: '{{ .Timestamp }}'
  
  # Add wedding season context
  - source_labels: [__name__]
    target_label: wedding_season
    replacement: '{{ if ge (.Month) 5 and le (.Month) 10 }}peak{{ else }}off{{ end }}'
  
  # Add service criticality
  - source_labels: [job]
    regex: '(wedding-day-monitor|ai-version-intelligence)'
    target_label: service_criticality
    replacement: 'critical'
  
  - source_labels: [job]
    regex: '(cultural-intelligence|recommendation-ai)'
    target_label: service_criticality
    replacement: 'high'
  
  - source_labels: [job]
    regex: '(ai-postgres|ai-redis)'
    target_label: service_criticality
    replacement: 'medium'

# Remote Write for Long-term Storage (Optional)
# remote_write:
#   - url: "https://prometheus-remote-write.example.com/api/v1/write"
#     headers:
#       Authorization: "Bearer ${PROMETHEUS_REMOTE_WRITE_TOKEN}"
#     queue_config:
#       capacity: 2500
#       max_shards: 200
#       min_shards: 1
#       max_samples_per_send: 500
#       batch_send_deadline: 5s