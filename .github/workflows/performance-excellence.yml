# WS-145 Production Performance Excellence Pipeline
# Team A - Batch 12 - Round 3 - Automated Performance Testing

name: Performance Excellence Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lighthouse-performance:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        page: ['/dashboard', '/clients', '/forms/new', '/photos/gallery']
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./wedsync
        
      - name: Build application
        run: npm run build
        working-directory: ./wedsync
        env:
          NODE_ENV: production
          
      - name: Start application
        run: npm start &
        working-directory: ./wedsync
        env:
          PORT: 3000
          
      - name: Wait for app readiness
        run: npx wait-on http://localhost:3000 --timeout 60000
        
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --config=./lighthouserc-${{ matrix.page }}.js
        working-directory: ./wedsync
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Performance Budget Validation
        run: |
          PERFORMANCE_SCORE=$(cat .lighthouseci/lhr-*.json | jq '.categories.performance.score * 100')
          ACCESSIBILITY_SCORE=$(cat .lighthouseci/lhr-*.json | jq '.categories.accessibility.score * 100')
          
          echo "Page: ${{ matrix.page }}"
          echo "Performance: $PERFORMANCE_SCORE"
          echo "Accessibility: $ACCESSIBILITY_SCORE"
          
          # Strict production requirements
          if (( $(echo "$PERFORMANCE_SCORE < 95" | bc -l) )); then
            echo "‚ùå Performance score $PERFORMANCE_SCORE below 95 for ${{ matrix.page }}"
            exit 1
          fi
          
          if (( $(echo "$ACCESSIBILITY_SCORE < 98" | bc -l) )); then
            echo "‚ùå Accessibility score $ACCESSIBILITY_SCORE below 98 for ${{ matrix.page }}"
            exit 1
          fi
          
          echo "‚úÖ Performance and accessibility meet production standards"
        working-directory: ./wedsync

  bundle-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./wedsync
      
      - name: Advanced Bundle Analysis
        run: |
          ANALYZE=true npm run build
          
          # Parse detailed bundle statistics
          MAIN_SIZE=$(cat .next/analyze/client.json | jq '.assets[] | select(.name | test("main.*\\.js$")) | .size')
          VENDOR_SIZE=$(cat .next/analyze/client.json | jq '.assets[] | select(.name | test("vendors.*\\.js$")) | .size')
          FORMS_SIZE=$(cat .next/analyze/client.json | jq '.assets[] | select(.name | test("forms.*\\.js$")) | .size')
          DASHBOARD_SIZE=$(cat .next/analyze/client.json | jq '.assets[] | select(.name | test("dashboard.*\\.js$")) | .size')
          
          echo "Bundle Size Analysis:"
          echo "Main: $MAIN_SIZE bytes (target: <200KB)"
          echo "Vendor: $VENDOR_SIZE bytes (target: <300KB)" 
          echo "Forms: $FORMS_SIZE bytes (target: <150KB)"
          echo "Dashboard: $DASHBOARD_SIZE bytes (target: <180KB)"
          
          # Strict bundle size enforcement
          [[ $MAIN_SIZE -gt 200000 ]] && echo "‚ùå Main bundle exceeds 200KB" && exit 1
          [[ $VENDOR_SIZE -gt 300000 ]] && echo "‚ùå Vendor bundle exceeds 300KB" && exit 1
          [[ $FORMS_SIZE -gt 150000 ]] && echo "‚ùå Forms bundle exceeds 150KB" && exit 1
          [[ $DASHBOARD_SIZE -gt 180000 ]] && echo "‚ùå Dashboard bundle exceeds 180KB" && exit 1
          
          echo "‚úÖ All bundles within size targets"
        working-directory: ./wedsync

  performance-regression-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need previous commit for comparison
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./wedsync
          
      - name: Run Performance Regression Analysis
        run: |
          # Compare against previous commit
          git checkout HEAD~1
          cd wedsync
          npm ci
          PREV_PERFORMANCE=$(npm run test:performance:json | jq '.overall_score')
          
          git checkout HEAD
          cd wedsync  
          npm ci
          CURRENT_PERFORMANCE=$(npm run test:performance:json | jq '.overall_score')
          
          REGRESSION=$(echo "$PREV_PERFORMANCE - $CURRENT_PERFORMANCE" | bc -l)
          
          if (( $(echo "$REGRESSION > 5" | bc -l) )); then
            echo "‚ùå Performance regression detected: ${REGRESSION}% decrease"
            exit 1
          fi
          
          echo "‚úÖ No significant performance regression"

  core-web-vitals:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./wedsync
        
      - name: Build application
        run: npm run build
        working-directory: ./wedsync
        env:
          NODE_ENV: production
          
      - name: Start application
        run: npm start &
        working-directory: ./wedsync
        env:
          PORT: 3000
          
      - name: Wait for app readiness
        run: npx wait-on http://localhost:3000 --timeout 60000
          
      - name: Install Playwright
        run: npx playwright install --with-deps
        working-directory: ./wedsync
        
      - name: Run Core Web Vitals Tests
        run: npx playwright test tests/performance/core-web-vitals.spec.ts --reporter=json
        working-directory: ./wedsync
        
      - name: Validate Core Web Vitals
        run: |
          LCP_SCORE=$(cat test-results/test-results.json | jq '.tests[] | select(.title | contains("LCP")) | .results[0].attachments[] | select(.name == "lcp") | .body' | tr -d '"')
          FID_SCORE=$(cat test-results/test-results.json | jq '.tests[] | select(.title | contains("FID")) | .results[0].attachments[] | select(.name == "fid") | .body' | tr -d '"')
          CLS_SCORE=$(cat test-results/test-results.json | jq '.tests[] | select(.title | contains("CLS")) | .results[0].attachments[] | select(.name == "cls") | .body' | tr -d '"')
          
          echo "Core Web Vitals Results:"
          echo "LCP: ${LCP_SCORE}ms (target: <2000ms)"
          echo "FID: ${FID_SCORE}ms (target: <75ms)"
          echo "CLS: ${CLS_SCORE} (target: <0.05)"
          
          # Production-grade thresholds
          if (( $(echo "$LCP_SCORE > 2000" | bc -l) )); then
            echo "‚ùå LCP score $LCP_SCORE exceeds 2000ms"
            exit 1
          fi
          
          if (( $(echo "$FID_SCORE > 75" | bc -l) )); then
            echo "‚ùå FID score $FID_SCORE exceeds 75ms"
            exit 1
          fi
          
          if (( $(echo "$CLS_SCORE > 0.05" | bc -l) )); then
            echo "‚ùå CLS score $CLS_SCORE exceeds 0.05"
            exit 1
          fi
          
          echo "‚úÖ All Core Web Vitals meet production standards"
        working-directory: ./wedsync

  performance-budget:
    runs-on: ubuntu-latest
    needs: [lighthouse-performance, bundle-analysis, core-web-vitals]
    if: always()
    steps:
      - name: Performance Budget Summary
        run: |
          echo "## üèÜ Performance Excellence Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### WS-145 Production Performance Standards" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Target | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lighthouse Performance | 95+ | ${{ needs.lighthouse-performance.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bundle Size Limits | <830KB | ${{ needs.bundle-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY  
          echo "| Core Web Vitals | Production Grade | ${{ needs.core-web-vitals.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Gates" >> $GITHUB_STEP_SUMMARY
          echo "- LCP: <2000ms" >> $GITHUB_STEP_SUMMARY
          echo "- FID: <75ms" >> $GITHUB_STEP_SUMMARY
          echo "- CLS: <0.05" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility: 98+" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Team A - Batch 12 - Round 3 - Performance Excellence Achieved! üöÄ*" >> $GITHUB_STEP_SUMMARY