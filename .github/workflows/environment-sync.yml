name: Environment Configuration Sync

# Feature: WS-097 - Environment Management (Round 3)
# Automated environment configuration synchronization and drift detection

on:
  schedule:
    # Run drift detection every 6 hours
    - cron: '0 */6 * * *'
  
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'detect-drift'
        type: choice
        options:
          - detect-drift
          - sync-staging
          - sync-production
          - promote-to-staging
          - promote-to-production
          - test-disaster-recovery
      
      dry_run:
        description: 'Perform dry run'
        required: false
        default: true
        type: boolean
      
      include_secrets:
        description: 'Include secrets in sync'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DRIFT_THRESHOLD: 'medium'

jobs:
  detect-drift:
    name: Detect Configuration Drift
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.action == 'detect-drift'
    
    outputs:
      has_drift: ${{ steps.drift-check.outputs.has_drift }}
      severity: ${{ steps.drift-check.outputs.severity }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd wedsync
          npm ci --production
          
      - name: Check configuration drift
        id: drift-check
        env:
          PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          PRODUCTION_ENCRYPTION_KEY: ${{ secrets.PRODUCTION_ENCRYPTION_KEY }}
        run: |
          cd wedsync
          output=$(./scripts/environment/check-drift.sh --all --format json)
          echo "drift_output<<EOF" >> $GITHUB_OUTPUT
          echo "$output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Parse drift severity
          severity=$(echo "$output" | jq -r '.[] | .drift.severity' | sort -u | head -1)
          has_drift=$(echo "$output" | jq -r '.[] | .drift.hasDrift' | grep -q true && echo true || echo false)
          
          echo "has_drift=$has_drift" >> $GITHUB_OUTPUT
          echo "severity=$severity" >> $GITHUB_OUTPUT
          
      - name: Create drift report
        if: steps.drift-check.outputs.has_drift == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: drift-report-${{ github.run_id }}
          path: wedsync/reports/drift/
          
      - name: Send drift alert
        if: steps.drift-check.outputs.has_drift == 'true' && steps.drift-check.outputs.severity == 'critical'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🚨 Critical Configuration Drift Detected",
              attachments: [{
                color: 'danger',
                text: `Environment configuration drift detected with severity: ${{ steps.drift-check.outputs.severity }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  sync-environments:
    name: Sync Environment Configuration
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.action == 'sync-staging' || github.event.inputs.action == 'sync-production')
    
    environment: ${{ github.event.inputs.action == 'sync-production' && 'production' || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd wedsync
          npm ci --production
          
      - name: Backup current configuration
        run: |
          cd wedsync
          target_env=${{ github.event.inputs.action == 'sync-production' && 'production' || 'staging' }}
          ./scripts/environment/backup-config.sh $target_env
          
      - name: Synchronize configuration
        env:
          PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          PRODUCTION_ENCRYPTION_KEY: ${{ secrets.PRODUCTION_ENCRYPTION_KEY }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
          INCLUDE_SECRETS: ${{ github.event.inputs.include_secrets }}
        run: |
          cd wedsync
          source_env=${{ github.event.inputs.action == 'sync-production' && 'staging' || 'development' }}
          target_env=${{ github.event.inputs.action == 'sync-production' && 'production' || 'staging' }}
          
          if [ "$DRY_RUN" = "true" ]; then
            echo "Running in DRY RUN mode"
            dry_run_flag="--dry-run"
          else
            dry_run_flag=""
          fi
          
          if [ "$INCLUDE_SECRETS" = "true" ]; then
            secrets_flag="--include-secrets"
          else
            secrets_flag=""
          fi
          
          ./scripts/environment/sync-config.sh \
            $dry_run_flag \
            $secrets_flag \
            $source_env \
            $target_env
            
      - name: Verify synchronization
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd wedsync
          target_env=${{ github.event.inputs.action == 'sync-production' && 'production' || 'staging' }}
          ./scripts/environment/verify-sync.sh $target_env

  promote-configuration:
    name: Promote Configuration
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.action == 'promote-to-staging' || github.event.inputs.action == 'promote-to-production')
    
    environment: ${{ github.event.inputs.action == 'promote-to-production' && 'production' || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd wedsync
          npm ci --production
          
      - name: Validate promotion path
        run: |
          source_env=${{ github.event.inputs.action == 'promote-to-production' && 'staging' || 'development' }}
          target_env=${{ github.event.inputs.action == 'promote-to-production' && 'production' || 'staging' }}
          
          echo "Validating promotion: $source_env -> $target_env"
          
          # Ensure we're not skipping environments
          if [ "$source_env" = "development" ] && [ "$target_env" = "production" ]; then
            echo "::error::Direct promotion from development to production is not allowed"
            exit 1
          fi
          
      - name: Run pre-promotion tests
        run: |
          cd wedsync
          npm run test:integration
          npm run test:e2e
          
      - name: Promote configuration
        env:
          PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          PRODUCTION_ENCRYPTION_KEY: ${{ secrets.PRODUCTION_ENCRYPTION_KEY }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
          INCLUDE_SECRETS: ${{ github.event.inputs.include_secrets }}
        run: |
          cd wedsync
          source_env=${{ github.event.inputs.action == 'promote-to-production' && 'staging' || 'development' }}
          target_env=${{ github.event.inputs.action == 'promote-to-production' && 'production' || 'staging' }}
          
          if [ "$DRY_RUN" = "true" ]; then
            dry_run_flag="--dry-run"
          else
            dry_run_flag=""
          fi
          
          if [ "$INCLUDE_SECRETS" = "true" ]; then
            secrets_flag="--include-secrets"
          else
            secrets_flag=""
          fi
          
          ./scripts/environment/promote-config.sh \
            $dry_run_flag \
            $secrets_flag \
            --auto-approve \
            $source_env \
            $target_env
            
      - name: Run post-promotion validation
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd wedsync
          target_env=${{ github.event.inputs.action == 'promote-to-production' && 'production' || 'staging' }}
          
          # Validate configuration
          ./scripts/environment/validate-config.sh $target_env
          
          # Run smoke tests
          npm run test:smoke -- --env=$target_env
          
      - name: Create promotion report
        uses: actions/upload-artifact@v3
        with:
          name: promotion-report-${{ github.run_id }}
          path: wedsync/logs/environment/

  test-disaster-recovery:
    name: Test Disaster Recovery
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'test-disaster-recovery'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd wedsync
          npm ci --production
          
      - name: Run DR tests
        env:
          DR_ENCRYPTION_KEY: ${{ secrets.DR_ENCRYPTION_KEY }}
          DR_DB_HOST: ${{ secrets.DR_DB_HOST }}
          DR_APP_HOST: ${{ secrets.DR_APP_HOST }}
        run: |
          cd wedsync
          
          echo "Testing disaster recovery procedures..."
          
          # Test backup integrity
          ./scripts/disaster-recovery/test-backups.sh
          
          # Test failover simulation
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            ./scripts/disaster-recovery/simulate-failover.sh --dry-run
          else
            echo "Skipping actual failover simulation (requires manual approval)"
          fi
          
          # Test recovery procedures
          ./scripts/disaster-recovery/validate-procedures.sh
          
      - name: Generate DR report
        id: dr-report
        run: |
          cd wedsync
          
          # Generate comprehensive DR report
          node -e "
            const { testDR, getDRMetrics } = require('./src/lib/config/disaster-recovery');
            
            (async () => {
              const testResults = await testDR();
              const metrics = getDRMetrics();
              
              console.log(JSON.stringify({
                testResults,
                metrics,
                timestamp: new Date().toISOString()
              }, null, 2));
            })();
          " > dr-report.json
          
          # Check if tests passed
          passed=$(jq -r '.testResults.passed' dr-report.json)
          echo "tests_passed=$passed" >> $GITHUB_OUTPUT
          
      - name: Upload DR report
        uses: actions/upload-artifact@v3
        with:
          name: dr-report-${{ github.run_id }}
          path: wedsync/dr-report.json
          
      - name: Send DR test results
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "${{ steps.dr-report.outputs.tests_passed == 'true' && '✅' || '❌' }} Disaster Recovery Test Results",
              attachments: [{
                color: "${{ steps.dr-report.outputs.tests_passed == 'true' && 'good' || 'danger' }}",
                text: "DR tests ${{ steps.dr-report.outputs.tests_passed == 'true' && 'passed' || 'failed' }}"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  auto-heal-drift:
    name: Auto-heal Configuration Drift
    runs-on: ubuntu-latest
    needs: detect-drift
    if: |
      needs.detect-drift.outputs.has_drift == 'true' && 
      needs.detect-drift.outputs.severity != 'critical'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd wedsync
          npm ci --production
          
      - name: Attempt auto-heal
        env:
          PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          PRODUCTION_ENCRYPTION_KEY: ${{ secrets.PRODUCTION_ENCRYPTION_KEY }}
        run: |
          cd wedsync
          
          echo "Attempting to auto-heal configuration drift..."
          ./scripts/environment/auto-heal-drift.sh
          
      - name: Verify healing
        run: |
          cd wedsync
          
          # Re-check drift after healing
          ./scripts/environment/check-drift.sh --all
          
      - name: Report healing results
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🔧 Configuration Drift Auto-heal Attempted",
              attachments: [{
                color: 'warning',
                text: "Auto-heal process completed. Please verify configuration."
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}