# WS-173: Performance Budget Enforcement in CI/CD
# Team E - Round 2 Implementation
#
# Automated performance budget enforcement to prevent performance regressions
# Runs on every PR and blocks deployment if performance budgets are exceeded

name: Performance Budget Enforcement

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PERFORMANCE_BASELINE_THRESHOLD: '10' # % increase threshold
  WEDDING_DAY_THRESHOLD: '5' # Stricter for wedding day critical features

jobs:
  performance-budget-check:
    name: Performance Budget Validation
    runs-on: ubuntu-latest
    
    outputs:
      performance-status: ${{ steps.performance-check.outputs.status }}
      regression-report: ${{ steps.performance-check.outputs.report-url }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for performance comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: wedsync/package-lock.json

      - name: Install Dependencies
        working-directory: ./wedsync
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Start Application
        working-directory: ./wedsync
        run: |
          npm run build
          npm run start &
          # Wait for application to be ready
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Performance Baseline Check
        id: performance-check
        working-directory: ./wedsync
        run: |
          echo "🎯 Running WS-173 Performance Budget Enforcement..."
          
          # Run regression detection
          npx tsx scripts/ws-173-performance-regression-automation.ts --mode=ci
          
          # Capture exit code
          PERFORMANCE_EXIT_CODE=$?
          
          # Set outputs based on results
          if [ $PERFORMANCE_EXIT_CODE -eq 0 ]; then
            echo "status=pass" >> $GITHUB_OUTPUT
            echo "✅ Performance budget check passed"
          else
            echo "status=fail" >> $GITHUB_OUTPUT
            echo "❌ Performance budget check failed"
          fi
          
          # Upload performance report
          REPORT_FILE=$(ls reports/regression-report-*.json | head -1)
          if [ -f "$REPORT_FILE" ]; then
            echo "report-url=$REPORT_FILE" >> $GITHUB_OUTPUT
          fi
          
          exit $PERFORMANCE_EXIT_CODE

      - name: Upload Performance Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            wedsync/reports/
            wedsync/performance-baselines/
          retention-days: 30

      - name: Lighthouse CI Performance Audit
        working-directory: ./wedsync
        run: |
          echo "🔍 Running Lighthouse CI performance audit..."
          
          # Set wedding day testing environment
          export WEDDING_DAY_TEST=true
          
          # Run Lighthouse CI with strict performance budgets
          npx lhci autorun --config=lighthouserc.js
          
      - name: Core Web Vitals Budget Check
        working-directory: ./wedsync
        run: |
          echo "📊 Checking Core Web Vitals budgets..."
          
          # Run comprehensive performance test suite
          npm run test -- tests/performance/ws-173-comprehensive-performance-suite.test.ts --timeout=600000

      - name: Generate Performance Summary
        if: always()
        working-directory: ./wedsync
        run: |
          echo "📄 Generating performance summary..."
          
          # Create performance summary for PR comment
          cat > performance-summary.md << EOF
          ## 🎯 WS-173 Performance Budget Enforcement Results
          
          **Status**: ${{ steps.performance-check.outputs.status == 'pass' && '✅ PASSED' || '❌ FAILED' }}
          **Commit**: \`${GITHUB_SHA:0:7}\`
          **Branch**: \`${GITHUB_REF_NAME}\`
          
          ### Core Web Vitals Budget Status
          
          | Metric | Budget | Status |
          |--------|--------|--------|
          | LCP | ≤ 2.5s | ${{ steps.performance-check.outputs.status == 'pass' && '✅' || '❌' }} |
          | FID | ≤ 100ms | ${{ steps.performance-check.outputs.status == 'pass' && '✅' || '❌' }} |
          | CLS | ≤ 0.1 | ${{ steps.performance-check.outputs.status == 'pass' && '✅' || '❌' }} |
          
          ### Wedding Supplier Critical Pages
          
          - **Dashboard Home** (/): Performance budget enforced
          - **Client Management** (/dashboard/clients): Wedding day critical
          - **Timeline View** (/dashboard/timeline): Wedding day critical  
          - **Task Management** (/dashboard/tasks): Performance budget enforced
          - **Communications** (/dashboard/communications): Performance budget enforced
          
          ### Performance Budget Details
          
          - **Mobile LCP Threshold**: ≤ 2000ms (Wedding day: ≤ 1800ms)
          - **Mobile FID Threshold**: ≤ 80ms (Wedding day: ≤ 50ms)
          - **Bundle Size Budget**: ≤ 800KB total
          - **Network Resilience**: 3G network tested
          
          ${{ steps.performance-check.outputs.status == 'fail' && '⚠️ **Action Required**: Performance regressions detected. Please review and optimize before merging.' || '' }}
          
          **Detailed Report**: Available in workflow artifacts
          EOF

      - name: Comment Performance Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './wedsync/performance-summary.md';
            
            if (fs.existsSync(path)) {
              const summary = fs.readFileSync(path, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  performance-regression-detection:
    name: Advanced Regression Detection
    runs-on: ubuntu-latest
    needs: performance-budget-check
    if: always()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: wedsync/package-lock.json

      - name: Install Dependencies
        working-directory: ./wedsync
        run: npm ci

      - name: Download Performance Artifacts
        uses: actions/download-artifact@v4
        with:
          name: performance-reports
          path: ./wedsync/

      - name: Advanced Regression Analysis
        working-directory: ./wedsync
        run: |
          echo "🔍 Running advanced regression analysis..."
          
          # Analyze performance trends over time
          if [ -f "reports/regression-report-*.json" ]; then
            echo "📊 Performance regression report found"
            
            # Extract key metrics from regression report
            REPORT_FILE=$(ls reports/regression-report-*.json | head -1)
            
            # Check for critical regressions that block deployment
            CRITICAL_REGRESSIONS=$(jq -r '.regressions[] | select(.severity == "critical") | .url' "$REPORT_FILE" | wc -l)
            HIGH_REGRESSIONS=$(jq -r '.regressions[] | select(.severity == "high") | .url' "$REPORT_FILE" | wc -l)
            
            echo "Critical regressions: $CRITICAL_REGRESSIONS"
            echo "High severity regressions: $HIGH_REGRESSIONS"
            
            # Fail if critical regressions found
            if [ "$CRITICAL_REGRESSIONS" -gt 0 ]; then
              echo "❌ Critical performance regressions detected - blocking deployment"
              exit 1
            fi
            
            # Warn if high severity regressions found
            if [ "$HIGH_REGRESSIONS" -gt 3 ]; then
              echo "⚠️ Multiple high severity performance regressions detected"
              exit 1
            fi
          fi

      - name: Performance Trend Analysis
        working-directory: ./wedsync
        run: |
          echo "📈 Analyzing performance trends..."
          
          # Create performance trend analysis
          cat > performance-trends.md << EOF
          ## 📈 Performance Trend Analysis
          
          ### Recent Performance Changes
          
          | Commit | LCP Change | FID Change | Bundle Size Change |
          |--------|------------|------------|-------------------|
          EOF
          
          # Add trend data if available
          if [ -f "performance-baselines/current-baseline.json" ]; then
            echo "📊 Performance baseline data available for trend analysis"
          fi

  mobile-performance-validation:
    name: Mobile Performance Validation
    runs-on: ubuntu-latest
    needs: performance-budget-check
    
    strategy:
      matrix:
        device: ['iPhone 12', 'Pixel 5', 'iPhone SE']
        network: ['3G', '4G', 'WiFi']
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: wedsync/package-lock.json

      - name: Install Dependencies
        working-directory: ./wedsync
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Start Application
        working-directory: ./wedsync
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Mobile Network Performance Test
        working-directory: ./wedsync
        run: |
          echo "📱 Testing ${{ matrix.device }} on ${{ matrix.network }} network..."
          
          # Run mobile-specific performance tests
          npx playwright test --project="${{ matrix.device }}" --grep="mobile.*${{ matrix.network }}"

      - name: Wedding Day Mobile Performance
        working-directory: ./wedsync
        run: |
          echo "💒 Testing wedding day mobile performance scenarios..."
          
          # Test critical wedding day workflows on mobile
          export DEVICE="${{ matrix.device }}"
          export NETWORK="${{ matrix.network }}"
          
          # Run wedding day critical path tests
          npm run test -- tests/performance/mobile-wedding-day-critical-path.test.ts

  performance-budget-enforcement-gate:
    name: Performance Gate
    runs-on: ubuntu-latest
    needs: [performance-budget-check, performance-regression-detection, mobile-performance-validation]
    if: always()
    
    steps:
      - name: Performance Gate Decision
        run: |
          echo "🎯 Performance Budget Enforcement Gate"
          
          BUDGET_STATUS="${{ needs.performance-budget-check.outputs.performance-status }}"
          REGRESSION_STATUS="${{ needs.performance-regression-detection.result }}"
          MOBILE_STATUS="${{ needs.mobile-performance-validation.result }}"
          
          echo "Budget Check: $BUDGET_STATUS"
          echo "Regression Analysis: $REGRESSION_STATUS"
          echo "Mobile Validation: $MOBILE_STATUS"
          
          # Determine overall performance gate status
          if [[ "$BUDGET_STATUS" == "fail" ]]; then
            echo "❌ Performance Budget Gate FAILED - Budget exceeded"
            exit 1
          elif [[ "$REGRESSION_STATUS" == "failure" ]]; then
            echo "❌ Performance Budget Gate FAILED - Critical regressions detected"
            exit 1
          elif [[ "$MOBILE_STATUS" == "failure" ]]; then
            echo "⚠️ Performance Budget Gate WARNING - Mobile performance issues detected"
            # Don't fail for mobile issues, but warn
          else
            echo "✅ Performance Budget Gate PASSED"
          fi

      - name: Update Performance Status Badge
        if: github.ref == 'refs/heads/main'
        run: |
          echo "📊 Updating performance status badge..."
          
          # In a real implementation, this would update a status badge
          # showing current performance status
          
      - name: Performance Gate Summary
        run: |
          cat << EOF
          ## 🎯 WS-173 Performance Budget Enforcement Complete
          
          ### Gate Results:
          - **Performance Budget**: ${{ needs.performance-budget-check.outputs.performance-status == 'pass' && '✅ PASSED' || '❌ FAILED' }}
          - **Regression Detection**: ${{ needs.performance-regression-detection.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
          - **Mobile Validation**: ${{ needs.mobile-performance-validation.result == 'success' && '✅ PASSED' || '⚠️ WARNING' }}
          
          ### Performance Standards Enforced:
          - Core Web Vitals budgets for wedding supplier workflows
          - Mobile performance on 3G/4G networks
          - Wedding day critical path performance
          - Bundle size and resource budgets
          - Performance regression prevention
          
          **Wedding suppliers depend on fast, reliable performance during critical moments.**
          **This gate ensures WedSync maintains optimal performance standards.**
          EOF