name: 🔒 Security - Hardcoded Keys Blocker

# 🚨 CRITICAL SECURITY WORKFLOW
# This workflow prevents any code with hardcoded API keys from being deployed
# Runs on every PR and push to ensure production security

on:
  pull_request:
    branches: [ main, stable/* ]
    types: [ opened, synchronize, reopened ]
  
  push:
    branches: [ main, stable/*, develop ]
    paths:
      - 'src/**/*.ts'
      - 'src/**/*.tsx'
      - 'src/**/*.js' 
      - 'src/**/*.jsx'
      - '__tests__/**/*'
      - 'tests/**/*'
      - '.github/workflows/**'
  
  # Manual trigger for security audits
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - critical-only
          - ci-cd-focus

env:
  NODE_VERSION: '18'
  SECURITY_SCAN_LEVEL: ${{ github.event.inputs.scan_level || 'comprehensive' }}

jobs:
  # 🛡️ Pre-flight security check
  security-preflight:
    name: 🔍 Security Preflight Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      scan-required: ${{ steps.check.outputs.scan-required }}
      risk-level: ${{ steps.check.outputs.risk-level }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis
      
      - name: 🔍 Check if security scan required
        id: check
        run: |
          echo "Checking for security-sensitive changes..."
          
          # Check if any security-sensitive files were modified
          if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E "(test|spec|__tests__|\.env|config|secrets)" > /dev/null; then
            echo "scan-required=true" >> $GITHUB_OUTPUT
            echo "risk-level=high" >> $GITHUB_OUTPUT
            echo "🚨 Security-sensitive files modified - full scan required"
          else
            echo "scan-required=true" >> $GITHUB_OUTPUT  # Always scan for safety
            echo "risk-level=standard" >> $GITHUB_OUTPUT
            echo "✅ Standard security scan required"
          fi

  # 🚨 Critical hardcoded key detection
  hardcoded-keys-scanner:
    name: 🔒 Hardcoded Keys Scanner
    runs-on: ubuntu-latest
    needs: security-preflight
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: wedsync/package-lock.json
      
      - name: 📦 Install dependencies
        working-directory: ./wedsync
        run: |
          npm ci --prefer-offline --no-audit
      
      - name: 🔍 Install security scanning tools
        run: |
          # Install ripgrep for fast pattern matching
          sudo apt-get update && sudo apt-get install -y ripgrep
          
          # Install jq for JSON processing
          sudo apt-get install -y jq
          
          echo "Security scanning tools installed"
      
      - name: 🚨 Run hardcoded keys scanner
        working-directory: ./wedsync
        run: |
          echo "🔒 Running WedSync Security Scanner..."
          echo "Scan Level: ${{ env.SECURITY_SCAN_LEVEL }}"
          echo "Risk Level: ${{ needs.security-preflight.outputs.risk-level }}"
          echo ""
          
          # Make scanner executable
          chmod +x ./scripts/security-scan-hardcoded-keys.sh
          
          # Run the security scanner
          ./scripts/security-scan-hardcoded-keys.sh
          
          # Store results for later steps
          SCAN_EXIT_CODE=$?
          echo "SCAN_EXIT_CODE=$SCAN_EXIT_CODE" >> $GITHUB_ENV
          
          if [ $SCAN_EXIT_CODE -ne 0 ]; then
            echo "🚨 SECURITY SCAN FAILED - BLOCKING DEPLOYMENT!"
            exit 1
          fi
      
      - name: 📊 Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results-${{ github.run_number }}
          path: |
            wedsync/security-scan-results/
            !wedsync/security-scan-results/.gitkeep
          retention-days: 30
      
      - name: 💬 Comment on PR with security results
        if: github.event_name == 'pull_request' && env.SCAN_EXIT_CODE != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find the latest scan results
            const resultsDir = 'wedsync/security-scan-results';
            const files = fs.readdirSync(resultsDir).filter(f => f.endsWith('.json'));
            
            if (files.length === 0) {
              console.log('No scan results found');
              return;
            }
            
            const latestFile = files.sort().pop();
            const results = JSON.parse(fs.readFileSync(path.join(resultsDir, latestFile), 'utf8'));
            
            const comment = `## 🚨 Security Scan Failed - Hardcoded API Keys Detected
            
            **Critical Security Issue**: This PR contains hardcoded API keys that could be exposed in production!
            
            ### 📊 Scan Results:
            - **Total Violations**: ${results.summary.total_violations}
            - **🚨 Critical**: ${results.summary.critical_violations}
            - **⚠️ High**: ${results.summary.high_violations}  
            - **ℹ️ Medium**: ${results.summary.medium_violations}
            
            ### 🛠️ Required Actions:
            1. **Replace hardcoded keys** with secure test environment manager
            2. **Use dynamic key generation** for all test scenarios
            3. **Implement proper secret management** for production
            
            ### 📝 Example Fix:
            \`\`\`typescript
            // ❌ WRONG - Hardcoded key
            process.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-role-key';
            
            // ✅ CORRECT - Secure test environment
            import { setupSecureTestEnvironment } from '@/__tests__/utils/secure-test-env';
            const testEnv = setupSecureTestEnvironment();
            \`\`\`
            
            **⛔ This PR cannot be merged until all critical security violations are resolved.**
            
            ---
            📁 Full scan report available in workflow artifacts.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # 🔐 Additional security validations
  security-validation:
    name: 🛡️ Advanced Security Validation
    runs-on: ubuntu-latest
    needs: [security-preflight, hardcoded-keys-scanner]
    if: needs.security-preflight.outputs.risk-level == 'high'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔍 Check for secret patterns in commits
        run: |
          echo "🔍 Scanning commit history for secrets..."
          
          # Check recent commits for potential secrets
          git log --oneline -10 --grep="key\|secret\|token\|password" --ignore-case || true
          
          # Check for potential secrets in commit diffs
          if git log -p -S "test-service-role-key" --since="1 week ago" | grep -q "test-service-role-key"; then
            echo "🚨 Potential hardcoded key found in recent commits!"
            exit 1
          fi
      
      - name: 🔒 Validate secure test patterns
        run: |
          echo "🔍 Validating secure test patterns are being used..."
          
          # Check if secure test environment manager is being imported
          if ! find . -name "*.ts" -exec grep -l "setupSecureTestEnvironment" {} \; | grep -q "__tests__"; then
            echo "⚠️ Warning: Secure test environment manager not widely adopted"
          else
            echo "✅ Secure test patterns detected"
          fi
      
      - name: 🔐 Environment variable security check
        run: |
          echo "🔍 Checking environment variable security..."
          
          # Look for environment files that might contain secrets
          find . -name ".env*" -type f | while read -r file; do
            echo "Checking: $file"
            if [ -f "$file" ] && grep -qE "(SERVICE_ROLE_KEY|WEBHOOK_SECRET)" "$file"; then
              echo "🚨 Potential secrets in environment file: $file"
              exit 1
            fi
          done || exit 1

  # ✅ Security approval gate
  security-gate:
    name: 🚦 Security Approval Gate
    runs-on: ubuntu-latest
    needs: [hardcoded-keys-scanner, security-validation]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 🎯 Evaluate security scan results
        run: |
          echo "🔒 Evaluating security scan results..."
          
          HARDCODED_KEYS_STATUS="${{ needs.hardcoded-keys-scanner.result }}"
          SECURITY_VALIDATION_STATUS="${{ needs.security-validation.result }}"
          
          echo "Hardcoded Keys Scanner: $HARDCODED_KEYS_STATUS"
          echo "Security Validation: $SECURITY_VALIDATION_STATUS"
          
          # Fail if critical security checks failed
          if [ "$HARDCODED_KEYS_STATUS" != "success" ]; then
            echo "🚨 CRITICAL: Hardcoded keys scanner failed!"
            echo "❌ DEPLOYMENT BLOCKED - Security violation detected"
            exit 1
          fi
          
          # Warn on validation failures but don't block (unless critical)
          if [ "$SECURITY_VALIDATION_STATUS" == "failure" ]; then
            echo "⚠️ Security validation failed - review required"
            # Don't exit here unless it's critical
          fi
          
          echo "✅ Security gate passed - safe for deployment"
      
      - name: 📱 Notify security team on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            // In a real implementation, this would integrate with:
            // - Slack notifications
            // - PagerDuty alerts
            // - Security team email notifications
            // - Incident management system
            
            console.log('🚨 SECURITY ALERT: Critical hardcoded key vulnerability detected in WedSync!');
            console.log('Deployment automatically blocked to prevent production exposure.');
            console.log('Security team notification would be sent here.');

  # 📊 Security metrics collection
  security-metrics:
    name: 📊 Security Metrics Collection
    runs-on: ubuntu-latest
    needs: [hardcoded-keys-scanner]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Collect security metrics
        run: |
          echo "📊 Collecting security metrics for WedSync platform..."
          
          # In production, this would:
          # - Send metrics to monitoring system
          # - Update security dashboards
          # - Track vulnerability trends
          # - Generate compliance reports
          
          echo "✅ Security metrics collected successfully"

# 🔒 Workflow security settings
permissions:
  contents: read
  pull-requests: write
  security-events: write
  actions: read

# 🚨 Concurrency - ensure only one security scan runs at a time per PR
concurrency:
  group: security-scan-${{ github.ref }}
  cancel-in-progress: true