{
  "totalTests": 453,
  "testFiles": [
    {
      "path": "src/__tests__/unit/components/GuestListManager.test.tsx",
      "name": "GuestListManager.test.tsx",
      "type": "unit",
      "testCount": 49,
      "lines": 774,
      "coverage": {
        "functions": [
          "expect",
          "fn",
          "forEach",
          "toBeValidGuest",
          "mockRejectedValue",
          "describe",
          "it",
          "vi",
          "beforeEach",
          "screen",
          "fireEvent",
          "waitFor",
          "render",
          "generateWeddingTestData",
          "expectWeddingData",
          "GuestListManager"
        ],
        "components": [
          "GuestListManager"
        ],
        "features": [
          "renders guest list with all required elements",
          "displays wedding guest information correctly",
          "shows loading state correctly",
          "displays empty state when no guests",
          "displays guest statistics",
          "searches guests by name",
          "searches guests by email",
          "searches guests by dietary restrictions",
          "clears search results",
          "filters guests by RSVP status",
          "filters guests by wedding side",
          "filters guests by guest type",
          "filters guests with dietary restrictions",
          "filters guests with plus ones",
          "shows active filter indicators",
          "clears all filters",
          "switches between table and card views",
          "switches to household view for family grouping",
          "shows seating chart view",
          "sorts guests alphabetically by name",
          "sorts guests by RSVP status",
          "sorts guests by table assignment",
          "toggles sort direction",
          "opens add guest modal",
          "opens edit guest modal",
          "deletes guest with confirmation",
          "sends RSVP reminder",
          "selects multiple guests",
          "selects all guests",
          "performs bulk RSVP reminder",
          "performs bulk table assignment",
          "performs bulk export",
          "opens import wizard",
          "opens export modal",
          "validates import data",
          "updates RSVP status",
          "shows RSVP deadline warnings",
          "tracks RSVP response rates",
          "has proper ARIA labels for wedding guest context",
          "supports keyboard navigation",
          "announces RSVP status changes",
          "virtualizes large guest lists",
          "debounces search input",
          "validates guest data structure",
          "handles duplicate guest detection",
          "validates required fields",
          "validates email format",
          "handles API errors gracefully",
          "shows error boundary for component crashes"
        ]
      }
    },
    {
      "path": "src/__tests__/unit/components/GuestListBuilder.test.tsx",
      "name": "GuestListBuilder.test.tsx",
      "type": "unit",
      "testCount": 35,
      "lines": 673,
      "coverage": {
        "functions": [
          "fn",
          "expect",
          "import",
          "mockImplementation",
          "objectContaining",
          "any",
          "mockReturnValue",
          "stringContaining",
          "stringMatching",
          "describe",
          "it",
          "vi",
          "beforeEach",
          "afterEach",
          "render",
          "screen",
          "fireEvent",
          "waitFor",
          "within",
          "GuestListBuilder"
        ],
        "components": [
          "GuestListBuilder"
        ],
        "features": [
          "renders upload step with all required elements",
          "renders progress steps correctly",
          "has proper accessibility attributes",
          "accepts CSV file upload",
          "accepts Excel file upload",
          "rejects unsupported file types",
          "handles CSV parsing errors",
          "advances to mapping step after successful file upload",
          "auto-detects column mappings",
          "renders all mapping fields with proper labels",
          "shows required field indicators",
          "allows navigation back to upload step",
          "validates required first and last name fields",
          "shows preview statistics",
          "displays validation errors",
          "shows duplicate detection",
          "renders saved templates dropdown when templates exist",
          "applies template mappings when selected",
          "generates and downloads sample CSV template",
          "handles network errors during import",
          "shows proper error messages for validation failures",
          "handles large file uploads efficiently",
          "uses batch processing for imports",
          "has proper ARIA labels",
          "supports keyboard navigation",
          "provides screen reader announcements",
          "has sufficient color contrast",
          "supports high contrast mode",
          "renders correctly on mobile viewports",
          "maintains functionality on touch devices",
          "calls onImportComplete callback after successful import",
          "passes correct coupleId to API calls",
          "handles empty CSV files",
          "handles files with special characters",
          "handles maximum file size limits"
        ]
      }
    },
    {
      "path": "src/__tests__/unit/api/guests.test.ts",
      "name": "guests.test.ts",
      "type": "unit",
      "testCount": 32,
      "lines": 1033,
      "coverage": {
        "functions": [
          "mockReturnThis",
          "mockResolvedValue",
          "from",
          "expect",
          "objectContaining",
          "any",
          "stringContaining",
          "describe",
          "it",
          "vi",
          "beforeEach",
          "NextRequest",
          "createMocks",
          "generateWeddingTestData"
        ],
        "components": [],
        "features": [
          "returns wedding guest list for authenticated photographer",
          "filters wedding guests by RSVP status",
          "filters wedding guests by wedding side",
          "searches wedding guests by name and contact info",
          "filters guests with dietary restrictions",
          "groups guests by household/family",
          "requires authentication and client access",
          "adds new wedding guest successfully",
          "validates required wedding guest fields",
          "prevents duplicate wedding guest emails for same client",
          "sanitizes wedding guest input data",
          "automatically generates RSVP token for guest",
          "updates wedding guest information successfully",
          "tracks RSVP status changes for wedding analytics",
          "validates table assignment capacity",
          "handles dietary restriction changes for catering updates",
          "removes wedding guest with confirmation",
          "requires confirmation for guest deletion",
          "updates table assignments when guest is removed",
          "handles bulk guest import from CSV",
          "handles bulk RSVP reminders",
          "handles bulk table assignments",
          "validates bulk operation permissions",
          "processes public RSVP submission",
          "validates RSVP token and prevents unauthorized responses",
          "handles RSVP deadline enforcement",
          "generates wedding guest analytics",
          "exports guest list in multiple formats",
          "generates seating chart data",
          "handles guest import with validation errors",
          "handles concurrent RSVP submissions gracefully",
          "validates guest count limits for wedding packages"
        ]
      }
    },
    {
      "path": "src/__tests__/accessibility/guest-list-accessibility-enhanced.test.ts",
      "name": "guest-list-accessibility-enhanced.test.ts",
      "type": "accessibility",
      "testCount": 26,
      "lines": 934,
      "coverage": {
        "functions": [
          "extend",
          "expect",
          "arrayContaining",
          "stringMatching",
          "mockImplementation",
          "mocked",
          "mockRejectedValueOnce",
          "describe",
          "it",
          "beforeEach",
          "afterEach",
          "vi",
          "render",
          "screen",
          "fireEvent",
          "waitFor",
          "within",
          "axe",
          "toHaveNoViolations",
          "configureAxe",
          "GuestListBuilder"
        ],
        "components": [
          "GuestListBuilder"
        ],
        "features": [
          " ",
          "should pass all WCAG 2.1 AA automated tests",
          "should pass drag-drop specific accessibility tests",
          "should validate complex interactive elements",
          "should support advanced keyboard patterns",
          "should handle keyboard traps correctly",
          "should support spatial navigation",
          "should provide comprehensive announcements",
          "should announce dynamic content changes",
          "should provide context for complex operations",
          "should exceed WCAG AA contrast requirements",
          "should handle forced colors mode",
          "should not convey information through color alone",
          "should meet touch target size requirements",
          "should support gesture-based navigation",
          "should handle orientation changes",
          "should provide clear instructions and help text",
          "should support consistent navigation patterns",
          "should provide timeout warnings for timed interactions",
          "should provide accessible error messages",
          "should provide recovery options",
          "should have valid ARIA attributes throughout the component",
          "should have proper landmark structure",
          "should support right-to-left (RTL) languages",
          "should handle language changes gracefully"
        ]
      }
    },
    {
      "path": "src/__tests__/performance/guest-list-performance.test.ts",
      "name": "guest-list-performance.test.ts",
      "type": "performance",
      "testCount": 25,
      "lines": 746,
      "coverage": {
        "functions": [
          "expect",
          "describe",
          "it",
          "beforeAll",
          "afterAll",
          "beforeEach",
          "createClient",
          "Database"
        ],
        "components": [],
        "features": [
          "should create 1000 test guests within acceptable time",
          "should verify dataset integrity after bulk creation",
          "should load 1000 guests within performance threshold",
          "should load guests with complex joins within threshold",
          "should search guests by name within performance threshold",
          "should handle fuzzy search efficiently",
          "should filter by category within threshold",
          "should handle complex multi-filter queries",
          "should perform bulk category update within threshold",
          "should perform bulk RSVP status update efficiently",
          "should handle bulk table assignments",
          "should import 500 guests within acceptable time",
          "should maintain reasonable memory usage during large operations",
          "should handle paginated guest loading efficiently",
          "should simulate virtual scrolling performance",
          "should handle concurrent read operations",
          "should maintain performance under sustained load"
        ]
      }
    },
    {
      "path": "src/__tests__/unit/components/GuestListBuilder-Enhanced.test.tsx",
      "name": "GuestListBuilder-Enhanced.test.tsx",
      "type": "unit",
      "testCount": 24,
      "lines": 584,
      "coverage": {
        "functions": [
          "extend",
          "expect",
          "createLargeGuestDataset",
          "spyOn",
          "mockImplementation",
          "mockRestore",
          "describe",
          "it",
          "vi",
          "beforeEach",
          "afterEach",
          "render",
          "screen",
          "fireEvent",
          "waitFor",
          "within",
          "axe",
          "toHaveNoViolations",
          "GuestListBuilder"
        ],
        "components": [
          "GuestListBuilder"
        ],
        "features": [
          "should render 500 guests within 2 seconds",
          "should handle 1000 guests without memory leaks",
          "should maintain search performance with large datasets",
          "should handle rapid filter changes efficiently",
          "should handle multi-selection drag across categories",
          "should handle drag and drop with validation constraints",
          "should maintain drag state during scroll operations",
          "should handle concurrent user updates gracefully",
          "should maintain data consistency during bulk operations",
          "should recover gracefully from network errors",
          "should support complex screen reader announcements",
          "should support advanced keyboard navigation patterns",
          "should maintain accessibility during dynamic loading",
          "should handle empty guest lists gracefully",
          "should handle malformed guest data",
          "should handle extreme filter combinations",
          "should handle rapid component unmounting",
          "should validate guest data before operations",
          "should handle duplicate detection accurately",
          "should maintain referential integrity during operations",
          "should collect performance metrics during operations",
          "should report performance degradation warnings",
          "should enforce wedding-specific business rules",
          "should handle complex guest relationships"
        ]
      }
    },
    {
      "path": "src/__tests__/integration/guest-apis-bulk-operations.test.ts",
      "name": "guest-apis-bulk-operations.test.ts",
      "type": "integration",
      "testCount": 24,
      "lines": 875,
      "coverage": {
        "functions": [
          "expect",
          "describe",
          "it",
          "beforeAll",
          "afterAll",
          "beforeEach",
          "createClient",
          "Database"
        ],
        "components": [],
        "features": [
          "should create a single guest via POST /api/guests",
          "should get all guests for a couple via GET /api/guests",
          "should update a guest via PUT /api/guests/[id]",
          "should delete a guest via DELETE /api/guests/[id]",
          "should perform bulk category update via POST /api/guests/bulk",
          "should perform bulk RSVP status update",
          "should perform bulk table assignment",
          "should perform bulk delete operation",
          "should handle CSV import via POST /api/guests/import",
          "should handle validation errors during import",
          "should handle large CSV import (500+ guests)",
          "should handle enhanced import with batch processing",
          "should prevent duplicate email addresses",
          "should validate required fields",
          "should validate email format",
          "should handle concurrent guest creation",
          "should efficiently query large guest lists",
          "should handle bulk operations efficiently",
          "should handle malformed request data",
          "should handle unauthorized requests",
          "should handle non-existent guest operations",
          "should handle database connection errors",
          "should return consistent response format for guest creation",
          "should return proper error format for validation failures"
        ]
      }
    },
    {
      "path": "src/__tests__/accessibility/guest-list-accessibility.test.ts",
      "name": "guest-list-accessibility.test.ts",
      "type": "accessibility",
      "testCount": 24,
      "lines": 651,
      "coverage": {
        "functions": [
          "extend",
          "test",
          "expect",
          "toLowerCase",
          "stringMatching",
          "mockImplementation",
          "describe",
          "it",
          "beforeEach",
          "afterEach",
          "render",
          "screen",
          "fireEvent",
          "waitFor",
          "axe",
          "toHaveNoViolations",
          "GuestListBuilder"
        ],
        "components": [
          "GuestListBuilder"
        ],
        "features": [
          "should have no accessibility violations",
          "should pass axe tests for drag and drop interface",
          "should pass axe tests for search and filter controls",
          "should support full keyboard navigation",
          "should handle keyboard navigation in drag-drop interface",
          "should maintain logical tab order",
          "should support arrow key navigation in list mode",
          "should have proper ARIA labels for all interactive elements",
          "should announce guest count and status updates",
          "should provide descriptive alt text and labels",
          "should properly announce drag and drop operations",
          "should maintain focus visibility",
          "should restore focus after modal interactions",
          "should manage focus during dynamic content updates",
          "should meet WCAG AA color contrast requirements",
          "should not rely solely on color to convey information",
          "should maintain contrast in different theme modes",
          "should associate form labels correctly",
          "should provide error messages accessibly",
          "should maintain accessibility on touch devices",
          "should support screen reader gestures on mobile",
          "should remain functional in high contrast mode",
          "should respect reduced motion preferences"
        ]
      }
    },
    {
      "path": "src/__tests__/cross-browser/guest-list-mobile-responsive.test.ts",
      "name": "guest-list-mobile-responsive.test.ts",
      "type": "cross-browser",
      "testCount": 22,
      "lines": 835,
      "coverage": {
        "functions": [
          "from",
          "mockTouchDevice",
          "mockBrowser",
          "expect",
          "Event",
          "describe",
          "it",
          "beforeEach",
          "afterEach",
          "vi",
          "render",
          "screen",
          "fireEvent",
          "waitFor",
          "within",
          "GuestListBuilder"
        ],
        "components": [
          "GuestListBuilder"
        ],
        "features": [
          "should adapt layout for mobile devices (320px - 768px)",
          "should optimize layout for tablet devices (768px - 1024px)",
          "should handle large desktop screens (1920px+)",
          "should prevent horizontal scroll on small screens",
          "should work correctly in Chromium-based browsers",
          "should work correctly in Firefox",
          "should work correctly in WebKit/Safari",
          "should handle browser-specific CSS features gracefully",
          "should support touch gestures on mobile devices",
          "should optimize performance for touch interactions",
          "should support swipe gestures for navigation",
          "should work offline with cached data",
          "should handle network connectivity changes",
          "should support installable PWA features",
          "should minimize layout shifts (CLS)",
          "should load efficiently on slow connections",
          "should optimize memory usage on mobile devices",
          "should handle responsive images properly",
          "should optimize for different pixel densities",
          "should handle portrait orientation on mobile",
          "should handle landscape orientation on mobile",
          "should adapt to foldable devices"
        ]
      }
    },
    {
      "path": "tests/e2e/guest-list-cross-browser-e2e.spec.ts",
      "name": "guest-list-cross-browser-e2e.spec.ts",
      "type": "e2e",
      "testCount": 20,
      "lines": 528,
      "coverage": {
        "functions": [
          "expect",
          "expectations",
          "test",
          "devices"
        ],
        "components": [],
        "features": [
          "should load guest list successfully",
          "should handle search functionality across browsers",
          "should support drag and drop operations",
          "should handle view mode switching",
          "should measure performance metrics",
          "should validate accessibility standards",
          "should adapt layout for mobile screens",
          "should support touch interactions",
          "should handle orientation changes",
          "should work with slow network conditions",
          "should optimize layout for tablet screens",
          "should support both touch and mouse interactions",
          "should maintain consistent visual appearance across browsers",
          "should handle different view modes consistently",
          "should handle network errors gracefully",
          "should recover from JavaScript errors",
          "should support offline functionality",
          "should handle service worker updates",
          "should handle RTL languages",
          "should handle different character sets"
        ]
      }
    },
    {
      "path": "src/__tests__/integration/guest-management-ws151-integration.test.ts",
      "name": "guest-management-ws151-integration.test.ts",
      "type": "integration",
      "testCount": 19,
      "lines": 620,
      "coverage": {
        "functions": [
          "expect",
          "stringMatching",
          "arrayContaining",
          "objectContaining",
          "stringContaining",
          "mockImplementation",
          "mockReturnValue",
          "any",
          "from",
          "describe",
          "it",
          "beforeEach",
          "afterEach",
          "jest",
          "createClient",
          "guestImportService",
          "guestImportProcessor",
          "guestValidator"
        ],
        "components": [],
        "features": [
          "should validate file upload requirements",
          "should reject oversized files",
          "should reject unsupported file types",
          "should upload file to storage successfully",
          "should validate guest data comprehensively",
          "should detect duplicate guests",
          "should normalize phone numbers correctly",
          "should provide helpful validation suggestions",
          "should queue import job successfully",
          "should process import job with transformations",
          "should handle job failures gracefully",
          "should queue rollback job successfully",
          "should execute rollback successfully",
          "should handle 1000+ guests within time limits",
          "should process large CSV files efficiently",
          "should work alongside existing bulk import API",
          "should generate compatible database records",
          "should handle database connection errors",
          "should handle file parsing errors gracefully"
        ]
      }
    },
    {
      "path": "src/__tests__/validation/guest-data-integrity.test.ts",
      "name": "guest-data-integrity.test.ts",
      "type": "validation",
      "testCount": 18,
      "lines": 929,
      "coverage": {
        "functions": [
          "expect",
          "describe",
          "it",
          "beforeAll",
          "afterAll",
          "beforeEach",
          "createClient",
          "Database"
        ],
        "components": [],
        "features": [
          "should detect exact duplicate guests by email",
          "should detect potential duplicates by name similarity",
          "should handle household-level duplicate detection",
          "should validate phone number duplicates with format normalization",
          "should maintain data integrity during bulk category updates",
          "should handle partial failures in bulk operations gracefully",
          "should maintain referential integrity during bulk deletions",
          "should validate constraints during bulk table assignments",
          "should enforce required field validations",
          "should validate email format constraints",
          "should validate enumerated field constraints",
          "should validate foreign key constraints",
          "should rollback failed bulk operations maintaining consistency",
          "should handle concurrent modification conflicts",
          "should handle maximum field length constraints",
          "should handle special characters and Unicode in names",
          "should handle null and empty string values appropriately",
          "should validate complex data relationships"
        ]
      }
    },
    {
      "path": "tests/e2e/guest-list-builder-drag-drop.spec.ts",
      "name": "guest-list-builder-drag-drop.spec.ts",
      "type": "e2e",
      "testCount": 18,
      "lines": 517,
      "coverage": {
        "functions": [
          "expect",
          "test",
          "Page",
          "BrowserContext"
        ],
        "components": [],
        "features": [
          " ",
          " ",
          "should display guest categories with proper layout",
          "should drag guest from one category to another",
          "should show drag feedback during drag operation",
          "should handle bulk selection and drag",
          "should prevent invalid drag operations",
          "should handle drag and drop on mobile devices",
          "should show success notification after drag operation",
          "should handle drag and drop with keyboard navigation",
          "should complete full CSV import workflow",
          "should handle CSV validation errors",
          "should handle large CSV import with progress tracking",
          "should handle Excel file import",
          "should save and reuse column mapping templates",
          "should handle network errors during import",
          "should work correctly in ${browserName}",
          "should handle drag operations smoothly with many guests"
        ]
      }
    },
    {
      "path": "src/__tests__/integration/guest-apis-bulk-operations-enhanced.test.ts",
      "name": "guest-apis-bulk-operations-enhanced.test.ts",
      "type": "integration",
      "testCount": 17,
      "lines": 743,
      "coverage": {
        "functions": [
          "expect",
          "describe",
          "it",
          "beforeAll",
          "afterAll",
          "beforeEach",
          "createClient",
          "Database"
        ],
        "components": [],
        "features": [
          "should handle 500+ guest CSV import within performance threshold",
          "should handle massive CSV import (1000 guests) with memory optimization",
          "should handle import with validation errors gracefully",
          "should handle bulk category updates efficiently",
          "should handle bulk RSVP status updates with validation",
          "should handle bulk deletion with confirmation",
          "should handle concurrent API requests without conflicts",
          "should handle concurrent writes with proper locking",
          "should handle database connection failures gracefully",
          "should handle malformed request data",
          "should handle rate limiting properly",
          "should maintain referential integrity during bulk operations",
          "should handle transaction rollbacks correctly",
          "should track and report API performance metrics"
        ]
      }
    },
    {
      "path": "src/__tests__/integration/guest-management-ws151-152-153.test.ts",
      "name": "guest-management-ws151-152-153.test.ts",
      "type": "integration",
      "testCount": 17,
      "lines": 713,
      "coverage": {
        "functions": [
          "expect",
          "describe",
          "it",
          "beforeAll",
          "afterAll",
          "beforeEach",
          "createClient",
          "Database"
        ],
        "components": [],
        "features": [
          "should handle large CSV import (500+ guests)",
          "should validate and reject invalid CSV data",
          "should support Excel file imports",
          "should create and manage dietary requirements with severity levels",
          "should validate dietary requirement data",
          "should update and delete dietary requirements",
          "should create photo groups with guest assignments",
          "should fetch all photo groups for a couple",
          "should update photo groups and assignments",
          "should reorder photo groups by priority",
          "should delete photo groups",
          "should handle concurrent operations without conflicts",
          "should efficiently query large guest lists",
          "should maintain data integrity across features",
          "should load 500+ guests in under 2 seconds",
          "should handle bulk operations efficiently"
        ]
      }
    },
    {
      "path": "tests/e2e/guest-list-enhanced-e2e.spec.ts",
      "name": "guest-list-enhanced-e2e.spec.ts",
      "type": "e2e",
      "testCount": 16,
      "lines": 714,
      "coverage": {
        "functions": [
          "expect",
          "test",
          "Page",
          "BrowserContext",
          "devices",
          "createHash"
        ],
        "components": [],
        "features": [
          "should handle 500+ guest display with acceptable performance",
          "should maintain performance during search with large datasets",
          "should handle complex multi-guest drag operations",
          "should handle drag and drop with keyboard navigation",
          "should handle drag operations with visual feedback",
          "should handle Excel import with multiple sheets",
          "should handle import with validation errors and recovery",
          "should save and reuse custom column mapping templates",
          "should maintain functionality in ${browserName}",
          "should work correctly on mobile devices",
          "should handle touch gestures correctly",
          "should maintain accessibility during drag operations",
          "should provide proper focus management",
          "should handle network failures gracefully",
          "should handle browser crashes and data recovery",
          "should track and report performance metrics"
        ]
      }
    },
    {
      "path": "src/__tests__/performance/guest-list-performance-enhanced.test.ts",
      "name": "guest-list-performance-enhanced.test.ts",
      "type": "performance",
      "testCount": 14,
      "lines": 731,
      "coverage": {
        "functions": [
          "expect",
          "describe",
          "it",
          "beforeAll",
          "afterAll",
          "beforeEach",
          "createClient",
          "Database",
          "performance"
        ],
        "components": [],
        "features": [
          "should create and optimize 2000 guest dataset efficiently",
          "should load guests progressively with optimal chunk performance",
          "should maintain performance during infinite scroll simulation",
          "should maintain fast search performance with 2000 guests",
          "should handle complex multi-filter combinations efficiently",
          "should handle large bulk updates with optimal performance",
          "should handle concurrent bulk operations without performance degradation",
          "should maintain optimal memory usage during large operations",
          "should meet mobile performance benchmarks"
        ]
      }
    },
    {
      "path": "src/__tests__/validation/guest-data-integrity-enhanced.test.ts",
      "name": "guest-data-integrity-enhanced.test.ts",
      "type": "validation",
      "testCount": 13,
      "lines": 1304,
      "coverage": {
        "functions": [
          "expect",
          "min",
          "max",
          "describe",
          "it",
          "beforeAll",
          "afterAll",
          "beforeEach",
          "vi",
          "createClient",
          "Database"
        ],
        "components": [],
        "features": [
          "should detect duplicates using multiple similarity algorithms",
          "should handle fuzzy matching with configurable thresholds",
          "should detect household-level duplicates with address matching",
          "should handle bulk insert operations efficiently",
          "should maintain data integrity during concurrent bulk updates",
          "should handle memory-efficient bulk operations",
          "should enforce complex business rule constraints",
          "should validate data consistency across related tables",
          "should handle partial failures with proper error recovery",
          "should simulate transaction rollback scenarios",
          "should handle international guest data correctly",
          "should handle extreme data volumes and stress conditions"
        ]
      }
    },
    {
      "path": "tests/e2e/guest-list-cross-browser-compatibility.spec.ts",
      "name": "guest-list-cross-browser-compatibility.spec.ts",
      "type": "e2e",
      "testCount": 13,
      "lines": 378,
      "coverage": {
        "functions": [
          "expect",
          "test",
          "BrowserName"
        ],
        "components": [],
        "features": [
          "should load guest list builder correctly on ${browserName}",
          "file upload should work consistently on ${browserName}",
          "form interactions should be consistent on ${browserName}",
          "search and filtering should work on ${browserName}",
          "bulk operations should work on ${browserName}",
          "keyboard navigation should work on ${browserName}",
          "performance should be acceptable on ${browserName}",
          "responsive design should work at ${viewport.width}x${viewport.height} on ${browserName}",
          "Safari-specific tests",
          "Firefox-specific tests",
          "Chrome-specific tests",
          "form data should persist consistently across browsers",
          "CSV export should work consistently across browsers"
        ]
      }
    },
    {
      "path": "src/__tests__/integration/ws-151-guest-list-builder.test.ts",
      "name": "ws-151-guest-list-builder.test.ts",
      "type": "integration",
      "testCount": 12,
      "lines": 529,
      "coverage": {
        "functions": [
          "expect",
          "describe",
          "test",
          "beforeAll",
          "afterAll",
          "beforeEach",
          "createClient",
          "createGuestService",
          "GuestService",
          "NextRequest"
        ],
        "components": [],
        "features": [
          "should parse natural language names correctly",
          "should create household groups correctly",
          "should normalize addresses correctly",
          "should handle bulk import of 500 guests in under 10 seconds",
          "should handle search on large guest lists efficiently",
          "should calculate analytics quickly for large guest lists",
          "quick-add API should handle natural language input",
          "bulk-import API should handle CSV data efficiently",
          "should detect duplicates accurately",
          "should handle duplicate detection during bulk import",
          "should provide accurate performance estimates",
          "should maintain data consistency during concurrent operations"
        ]
      }
    },
    {
      "path": "tests/e2e/guest-list-manager-comprehensive.spec.ts",
      "name": "guest-list-manager-comprehensive.spec.ts",
      "type": "e2e",
      "testCount": 12,
      "lines": 356,
      "coverage": {
        "functions": [
          "expect",
          "test"
        ],
        "components": [],
        "features": [
          "should load guest list within 1 second performance requirement",
          "should support filtering with <200ms response time",
          "should add new guest with family relationship",
          "should manage RSVP status tracking",
          "should handle household grouping",
          "should import CSV with 180+ guests",
          "should export guests to CSV",
          "should perform bulk operations on multiple guests",
          "should handle dietary restrictions management",
          "should integrate with vendor systems for headcounts",
          "should support mobile responsive design",
          "should maintain data integrity with concurrent operations"
        ]
      }
    },
    {
      "path": "tests/e2e/guest-ecosystem-integration.spec.ts",
      "name": "guest-ecosystem-integration.spec.ts",
      "type": "integration",
      "testCount": 3,
      "lines": 502,
      "coverage": {
        "functions": [
          "expect",
          "test"
        ],
        "components": [],
        "features": [
          "complete wedding journey - sarahs 150 guest wedding",
          "mobile responsive integration test",
          "cross-browser integration test"
        ]
      }
    }
  ],
  "componentFiles": [],
  "coverageByType": {
    "unit": 4,
    "integration": 6,
    "e2e": 5,
    "accessibility": 2,
    "performance": 2,
    "validation": 2
  },
  "overallCoverage": 48,
  "meetsCriteria": false,
  "recommendations": [
    "Add more unit tests for individual component methods",
    "Increase test coverage to meet 80% requirement",
    "Focus on testing edge cases and error scenarios"
  ]
}