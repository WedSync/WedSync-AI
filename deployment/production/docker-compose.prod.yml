# WS-168: Customer Success Dashboard - Production Docker Compose Configuration
# Optimized for high availability and performance

version: '3.8'

services:
  wedsync-app:
    image: wedsync:${WEDSYNC_VERSION:-latest}
    container_name: wedsync-app-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Application Environment
      NODE_ENV: production
      NEXT_PUBLIC_ENV: production
      
      # Database Configuration (Supabase)
      NEXT_PUBLIC_SUPABASE_URL: ${SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      
      # Redis Configuration
      REDIS_URL: redis://redis-prod:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Security Configuration
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      JWT_SECRET: ${JWT_SECRET}
      
      # Customer Success Dashboard Configuration
      ENABLE_CUSTOMER_SUCCESS_DASHBOARD: "true"
      HEALTH_SCORING_CACHE_TTL: "3600"
      INTERVENTION_EMAIL_RATE_LIMIT: "100"
      
      # Performance Configuration
      DASHBOARD_CACHE_ENABLED: "true"
      DASHBOARD_CACHE_TTL: "300"
      BATCH_PROCESSING_SIZE: "10"
      
      # Monitoring and Logging
      LOG_LEVEL: warn
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: production
      
      # Email Configuration for Interventions
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      
      # Rate Limiting
      RATE_LIMIT_MAX_REQUESTS: "1000"
      RATE_LIMIT_WINDOW_MS: "900000" # 15 minutes
      
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/public/uploads
    depends_on:
      - redis-prod
    networks:
      - wedsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  redis-prod:
    image: redis:7-alpine
    container_name: wedsync-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - wedsync-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  nginx-proxy:
    image: nginx:alpine
    container_name: wedsync-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - wedsync-app
    networks:
      - wedsync-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  redis_data:
    driver: local

networks:
  wedsync-network:
    driver: bridge