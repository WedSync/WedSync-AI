import type { NextConfig } from "next";
import { withSentryConfig } from '@sentry/nextjs';
import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';

// WS-145: Performance budget configuration
// WS-173: Updated targets for wedding supplier mobile optimization
const BUNDLE_TARGETS = {
  main: 250000,      // 250KB main bundle (WS-173 initial load target)
  vendor: 300000,    // 300KB vendor bundle  
  forms: 150000,     // 150KB forms module
  dashboard: 180000, // 180KB dashboard module
  dynamicChunk: 50000, // 50KB per dynamic component (WS-173)
  total: 800000      // 800KB total JS
} as const;

// Bundle analyzer configuration
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
});

const withPWA = require('next-pwa')({
  dest: 'public',
  register: true,
  skipWaiting: true,
  disable: process.env.NODE_ENV === 'development',
  sw: 'sw.js',
  publicExcludes: ['!robots.txt', '!sitemap.xml', '!favicon.ico'],
  buildExcludes: [/middleware-manifest\.json$/],
  customWorkerDir: 'worker',
  // Advanced configuration
  cleanupOutdatedCaches: true,
  maximumFileSizeToCacheInBytes: 5000000, // 5MB
  // Define runtime caching rules
  runtimeCaching: [
      // Critical Wedding Day APIs - Network First with fast fallback
      {
        urlPattern: /^\/api\/(timeline|wedding-coordination|vendors|issues|weather)\/.*/i,
        handler: 'NetworkFirst',
        options: {
          cacheName: 'critical-wedding-data',
          networkTimeoutSeconds: 5, // Fast timeout for critical data
          expiration: {
            maxEntries: 100,
            maxAgeSeconds: 7 * 24 * 60 * 60 // 1 week
          },
          backgroundSync: {
            name: 'critical-data-sync',
            options: {
              maxRetentionTime: 48 * 60 // 2 days retention
            }
          },
          cacheKeyWillBeUsed: async ({ request }: { request: any }) => {
            // Add timestamp to ensure fresh data for wedding day
            const url = new URL(request.url);
            if (url.pathname.includes('wedding-day')) {
              url.searchParams.set('cache-bust', Date.now().toString());
            }
            return url.href;
          }
        }
      },
      
      // Timeline API - Enhanced for wedding day performance
      {
        urlPattern: /^\/api\/timeline\/.*/i,
        handler: 'NetworkFirst',
        options: {
          cacheName: 'timeline-api-v2',
          networkTimeoutSeconds: 3,
          expiration: {
            maxEntries: 200,
            maxAgeSeconds: 24 * 60 * 60 // 1 day
          },
          backgroundSync: {
            name: 'timeline-sync',
            options: {
              maxRetentionTime: 48 * 60
            }
          }
        }
      },

      // Auth and user data - Network First with quick fallback
      {
        urlPattern: /^\/api\/(auth|user|profile)\/.*/i,
        handler: 'NetworkFirst',
        options: {
          cacheName: 'auth-data',
          networkTimeoutSeconds: 4,
          expiration: {
            maxEntries: 50,
            maxAgeSeconds: 60 * 60 // 1 hour
          }
        }
      },

      // General API requests - Network First with longer timeout
      {
        urlPattern: /^\/api\/.*/i,
        handler: 'NetworkFirst',
        options: {
          cacheName: 'api-cache',
          networkTimeoutSeconds: 10,
          expiration: {
            maxEntries: 100,
            maxAgeSeconds: 6 * 60 * 60 // 6 hours
          },
          backgroundSync: {
            name: 'general-api-sync',
            options: {
              maxRetentionTime: 24 * 60
            }
          }
        }
      },

      // Supabase Storage - Stale While Revalidate for images/files
      {
        urlPattern: /^https:\/\/.*\.supabase\.co\/storage\/.*/i,
        handler: 'StaleWhileRevalidate',
        options: {
          cacheName: 'supabase-storage',
          expiration: {
            maxEntries: 200,
            maxAgeSeconds: 30 * 24 * 60 * 60 // 30 days
          },
          cacheKeyWillBeUsed: async ({ request }: { request: any }) => {
            // Remove auth tokens from cache key
            const url = new URL(request.url);
            url.searchParams.delete('token');
            return url.href;
          }
        }
      },

      // Static assets - Cache First with long expiration
      {
        urlPattern: /\.(?:png|jpg|jpeg|svg|gif|webp|avif)$/i,
        handler: 'CacheFirst',
        options: {
          cacheName: 'images',
          expiration: {
            maxEntries: 100,
            maxAgeSeconds: 30 * 24 * 60 * 60 // 30 days
          }
        }
      },

      // Google Fonts - Cache First
      {
        urlPattern: /^https:\/\/fonts\.(?:googleapis|gstatic)\.com\/.*/i,
        handler: 'CacheFirst',
        options: {
          cacheName: 'google-fonts',
          expiration: {
            maxEntries: 10,
            maxAgeSeconds: 365 * 24 * 60 * 60 // 1 year
          }
        }
      },

      // CDN assets - Cache First
      {
        urlPattern: /^https:\/\/cdn\.jsdelivr\.net\/.*/i,
        handler: 'CacheFirst',
        options: {
          cacheName: 'cdn-assets',
          expiration: {
            maxEntries: 20,
            maxAgeSeconds: 30 * 24 * 60 * 60 // 30 days
          }
        }
      }
    ]
    // Note: precacheAndRoute and backgroundSyncOptions deprecated - handled automatically by next-pwa
  }
});

const nextConfig: NextConfig = {
  // Enable standalone output for Docker production builds
  output: process.env.NODE_ENV === 'production' ? 'standalone' : undefined,
  
  // Fix workspace root detection warning
  outputFileTracingRoot: '/Users/skyphotography/CODE/WedSync-2.0/WedSync2/wedsync',
  
  // Experimental features for Next.js 15
  experimental: {
    // Enable the new React 19 features
    reactCompiler: true,
    // Performance optimizations
    optimizeCss: true,
    serverMinification: true,
  },
  
  // Performance optimizations
  compress: true,
  poweredByHeader: false,
  productionBrowserSourceMaps: false,
  
  // Optimize compiler
  compiler: {
    removeConsole: process.env.NODE_ENV === 'production' ? {
      exclude: ['error', 'warn'],
    } : false,
  },
  
  // External packages that should not be bundled
  serverExternalPackages: ['@supabase/supabase-js'],
  
  // Webpack configuration for optimizations and fixes
  webpack: (config, { isServer, dev }) => {
    // WS-145: Performance budgets enforcement
    if (!isServer && !dev) {
      config.performance = {
        hints: 'error',
        maxAssetSize: 250000, // 250KB per asset
        maxEntrypointSize: BUNDLE_TARGETS.total, // 800KB total
        assetFilter: (assetFilename: string) => {
          return assetFilename.endsWith('.js') || assetFilename.endsWith('.css');
        }
      };

      // WS-145: Bundle analyzer for CI/CD integration
      if (process.env.CI || process.env.ANALYZE) {
        config.plugins.push(
          new BundleAnalyzerPlugin({
            analyzerMode: process.env.CI ? 'json' : 'server',
            openAnalyzer: !process.env.CI,
            generateStatsFile: true,
            statsFilename: '../bundle-stats.json',
            reportFilename: '../bundle-report.html'
          })
        );
      }
    }

    // Critical fix for tr46 mappingTable.json parsing error
    config.module.rules.push({
      test: /mappingTable\.json$/,
      type: 'asset/resource',
    });

    // Ensure proper JSON handling for other files
    config.module.rules.push({
      test: /\.json$/,
      exclude: /mappingTable\.json$/,
      type: 'json',
    });

    // Client-side optimizations
    if (!isServer) {
      // Node.js module fallbacks
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        net: false,
        tls: false,
        crypto: false,
        stream: false,
        url: false,
        zlib: false,
        http: false,
        https: false,
        assert: false,
        os: false,
        path: false,
      };
      
      // Production optimizations
      if (!dev) {
        // WS-145: Enhanced code splitting with size budgets
        config.optimization.splitChunks = {
          chunks: 'all',
          maxSize: BUNDLE_TARGETS.vendor, // 300KB max chunk size
          cacheGroups: {
            default: false,
            vendors: false,
            // Framework chunk - targeting main bundle budget
            framework: {
              name: 'framework',
              chunks: 'all',
              test: /(?<!node_modules.*)[\\/]node_modules[\\/](react|react-dom|scheduler|next)[\\/]/,
              priority: 40,
              enforce: true,
              maxSize: BUNDLE_TARGETS.main, // 200KB limit
            },
            // Supabase chunk
            supabase: {
              name: 'supabase',
              test: /[\\/]node_modules[\\/]@supabase[\\/]/,
              priority: 35,
              reuseExistingChunk: true,
              maxSize: 150000, // 150KB limit for supabase
            },
            // Forms chunk - aligned with forms budget
            forms: {
              name: 'forms',
              test: /[\\/](components|pages)[\\/].*forms?[\\/]|[\\/]node_modules[\\/](react-hook-form|@hookform)[\\/]/,
              priority: 32,
              reuseExistingChunk: true,
              maxSize: BUNDLE_TARGETS.forms, // 150KB limit
            },
            // Dashboard chunk - aligned with dashboard budget  
            dashboard: {
              name: 'dashboard',
              test: /[\\/](components|pages)[\\/].*dashboard[\\/]/,
              priority: 31,
              reuseExistingChunk: true,
              maxSize: BUNDLE_TARGETS.dashboard, // 180KB limit
            },
            // WS-173: Performance optimization chunks
            'analytics-dashboard': {
              name: 'analytics-dashboard',
              test: /[\\/]components[\\/]reviews[\\/]analytics[\\/]/,
              priority: 25,
              reuseExistingChunk: true,
              maxSize: 50000, // 50KB limit per WS-173 requirements
            },
            'customer-health': {
              name: 'customer-health',
              test: /[\\/]components[\\/]dashboard[\\/]CustomerHealthDashboard/,
              priority: 25,
              reuseExistingChunk: true,
              maxSize: 50000,
            },
            'photo-groups': {
              name: 'photo-groups',
              test: /[\\/]components[\\/](wedme|guests)[\\/].*Photo.*Manager/,
              priority: 25,
              reuseExistingChunk: true,
              maxSize: 50000,
            },
            'seating-tools': {
              name: 'seating-tools',
              test: /[\\/]components[\\/]seating[\\/]/,
              priority: 25,
              reuseExistingChunk: true,
              maxSize: 50000,
            },
            'trial-conversion': {
              name: 'trial-conversion',
              test: /[\\/]components[\\/]trial[\\/].*ConversionFlow/,
              priority: 25,
              reuseExistingChunk: true,
              maxSize: 50000,
            },
            // UI libraries chunk
            ui: {
              name: 'ui',
              test: /[\\/]node_modules[\\/](@headlessui|@heroicons|lucide-react|clsx|tailwind-merge)[\\/]/,
              priority: 30,
              reuseExistingChunk: true,
              maxSize: 100000, // 100KB for UI libs
            },
            // Performance monitoring chunk
            monitoring: {
              name: 'monitoring',
              test: /[\\/](web-vitals|@sentry|monitoring)[\\/]/,
              priority: 28,
              reuseExistingChunk: true,
              maxSize: 80000, // 80KB for monitoring
            },
            // Heavy libraries chunk
            heavy: {
              name: 'heavy',
              test: /[\\/]node_modules[\\/](react-pdf|@dnd-kit|stripe|pdf-lib)[\\/]/,
              priority: 25,
              reuseExistingChunk: true,
              maxSize: 200000, // 200KB for heavy libs
            },
            // Common modules
            commons: {
              name: 'commons',
              minChunks: 2,
              priority: 20,
              reuseExistingChunk: true,
              maxSize: 120000, // 120KB for common modules
            },
          },
        };
        
        // Minimize bundle size
        config.optimization.minimize = true;
      }
    }

    return config;
  },
  
  // Image optimization
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**',
      },
    ],
    // Performance optimization: smaller images on mobile
    deviceSizes: [640, 750, 828, 1080, 1200, 1920],
    imageSizes: [16, 32, 48, 64, 96, 128, 256],
    formats: ['image/avif', 'image/webp'],
    minimumCacheTTL: 60,
  },
  
  // TypeScript configuration - allow build to continue
  typescript: {
    ignoreBuildErrors: true,
  },
  
  // ESLint configuration - allow build to continue
  eslint: {
    ignoreDuringBuilds: true,
  },
  
  // Comprehensive security headers
  async headers() {
    const isProduction = process.env.NODE_ENV === 'production';
    
    return [
      {
        source: '/(.*)',
        headers: [
          // Content Security Policy - Strict security with required integrations
          {
            key: 'Content-Security-Policy',
            value: [
              "default-src 'self'",
              "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://cdn.jsdelivr.net https://unpkg.com",
              "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net",
              "font-src 'self' https://fonts.gstatic.com data:",
              "img-src 'self' data: https: blob:",
              "connect-src 'self' https://*.supabase.co wss://*.supabase.co https://api.stripe.com https://api.resend.com https://checkout.stripe.com",
              "frame-src 'self' https://js.stripe.com https://hooks.stripe.com https://checkout.stripe.com",
              "object-src 'none'",
              "base-uri 'self'",
              "form-action 'self' https://checkout.stripe.com",
              "frame-ancestors 'none'",
              isProduction ? "upgrade-insecure-requests" : "",
              "block-all-mixed-content"
            ].filter(Boolean).join('; ')
          },
          // Prevent clickjacking
          {
            key: 'X-Frame-Options',
            value: 'DENY'
          },
          // Prevent MIME type sniffing
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff'
          },
          // XSS Protection (legacy but still useful)
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block'
          },
          // Referrer Policy - Balance privacy and functionality
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin'
          },
          // Permissions Policy - Restrict sensitive features
          {
            key: 'Permissions-Policy',
            value: [
              'camera=()',
              'microphone=()',
              'geolocation=()',
              'payment=(self)',
              'usb=()',
              'bluetooth=()',
              'magnetometer=()',
              'accelerometer=()',
              'gyroscope=()',
              'fullscreen=(self)',
              'display-capture=()'
            ].join(', ')
          },
          // DNS Prefetch Control
          {
            key: 'X-DNS-Prefetch-Control',
            value: 'on'
          },
          // Remove server identification
          {
            key: 'Server',
            value: ''
          }
        ].concat(isProduction ? [
          // HSTS - Only in production
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains; preload'
          },
          // Expect-CT for certificate transparency
          {
            key: 'Expect-CT',
            value: 'enforce, max-age=86400'
          }
        ] : [])
      },
      {
        // Additional security for API routes
        source: '/api/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff'
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY'
          },
          {
            key: 'Cache-Control',
            value: 'no-cache, no-store, must-revalidate'
          },
          {
            key: 'Pragma',
            value: 'no-cache'
          },
          {
            key: 'Expires',
            value: '0'
          },
          // API-specific CSP
          {
            key: 'Content-Security-Policy',
            value: "default-src 'none'; frame-ancestors 'none'"
          }
        ]
      },
      {
        // Payment endpoint specific security
        source: '/api/stripe/(.*)',
        headers: [
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains'
          },
          {
            key: 'X-Permitted-Cross-Domain-Policies',
            value: 'none'
          },
          {
            key: 'Cross-Origin-Embedder-Policy',
            value: 'require-corp'
          },
          {
            key: 'Cross-Origin-Opener-Policy',
            value: 'same-origin'
          },
          {
            key: 'Cross-Origin-Resource-Policy',
            value: 'same-origin'
          }
        ]
      }
    ];
  },
};

// Export with PWA, Bundle Analyzer, and Sentry configurations
const configWithPWA = withPWA(nextConfig);
const configWithBundleAnalyzer = withBundleAnalyzer(configWithPWA);

// Temporarily disable Sentry during build to fix configuration issues
// Re-enable after proper Sentry project setup
export default configWithBundleAnalyzer;

/* Original Sentry config - restore after project setup:
export default withSentryConfig(configWithBundleAnalyzer, {
  // Sentry build-time configuration options
  silent: process.env.NODE_ENV === 'development',
  
  // Upload source maps only in production
  hideSourceMaps: true,
  
  // Disable webpack plugin in development for faster builds
  disableServerWebpackPlugin: process.env.NODE_ENV === 'development',
  disableClientWebpackPlugin: process.env.NODE_ENV === 'development',
  
  // Automatically instrument code for performance monitoring
  widenClientFileUpload: true,
  transpileClientSDK: true,
  tunnelRoute: '/monitoring-tunnel',
  
  // Additional options for better error reporting
  includeSourceMapsInBundle: false,
  automaticVercelMonitors: true,
});
*/